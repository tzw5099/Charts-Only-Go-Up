,vars_names_list,vars_values_list_100
0,__name__,__main__
1,__doc__,Automatically created module for IPython interacti
2,__package__,None
3,__loader__,None
4,__spec__,None
5,__builtin__,<module 'builtins' (built-in)>
6,__builtins__,<module 'builtins' (built-in)>
7,_ih,"['', 'import pandas as pd\nimport numpy as np\nimp"
8,_oh,"{17: ['__name__', '__doc__', '__package__', '__loa"
9,_dh,['D:\\Cloud\\rclone\\OneDrive\\Web\\TenDollarData\
10,In,"['', 'import pandas as pd\nimport numpy as np\nimp"
11,Out,"{17: ['__name__', '__doc__', '__package__', '__loa"
12,get_ipython,<function get_ipython at 0x000002028AFC1940>
13,exit,<IPython.core.autocall.ZMQExitAutocall object at 0
14,quit,<IPython.core.autocall.ZMQExitAutocall object at 0
15,_,"['__name__', '__doc__', '__package__', '__loader__"
16,__,
17,___,
18,pyforest,<module 'pyforest' (namespace)>
19,json,<module 'json' from 'C:\\Users\\Tom\\AppData\\Loca
20,getsizeof,<built-in function getsizeof>
21,NamespaceMagics,<class 'IPython.core.magics.namespace.NamespaceMag
22,_nms,<IPython.core.magics.namespace.NamespaceMagics obj
23,_Jupyter,<ipykernel.zmqshell.ZMQInteractiveShell object at 
24,np,<module 'numpy' from 'C:\\Users\\Tom\\quantconnect
25,_getsizeof,<function _getsizeof at 0x000002028DDB4940>
26,_getshapeof,<function _getshapeof at 0x00000202FE12CDC0>
27,var_dic_list,<function var_dic_list at 0x00000202FF1A7F70>
28,_i,"
df_pct_chg = df_fin_statement
pct_chg_cols = (df_"
29,_ii,vars_names_list
30,_iii,"vars_names_list = []
vars_values_list = []
# for n"
31,_i1,"import pandas as pd
import numpy as np
import glob"
32,pd,<module 'pandas' from 'C:\\Users\\Tom\\quantconnec
33,glob,<module 'glob' from 'C:\\Users\\Tom\\AppData\\Loca
34,os,<module 'os' from 'C:\\Users\\Tom\\AppData\\Local\
35,time,<module 'time' (built-in)>
36,pathlib,<module 'pathlib' from 'C:\\Users\\Tom\\AppData\\L
37,_i2,"start_time = time.time()
uri_list = ""cash-and-cash"
38,start_time,1607976230.7526271
39,uri_list,cash-and-cash-equivalents
40,url_symbol_name,apple
41,url_symbol,aapl
42,url_fin_metric,cash-and-cash-equivalents
43,_i3,"def magnitude_num(number, currency_symbol):
    if"
44,magnitude_num,<function magnitude_num at 0x00000202FFD70310>
45,_i4,"company_profiles = pd.read_csv(""../reference_data/"
46,company_profiles,      symbol                                      
47,fin_statements_matching,     index  subindex                Name  Financia
48,currency_symbol,$
49,company_profiles_col,"['symbol', 'long name', 'currency', 'exchange', 'i"
50,_i5,"profiles_dict = {}
profiles_value = company_profil"
51,profiles_dict,"{'symbol': 'AAPL', 'long name': 'Apple Inc', 'curr"
52,profiles_value,"['AAPL', 'Apple Inc', 'USD', 'NASDAQ', 'Consumer E"
53,titles_bs,"['Cash and Cash Equivalents', 'Short Term Investme"
54,titles_cf,"['Date', 'Symbol', 'Filing Date', 'Accepted Date',"
55,titles_is,"['Date', 'Symbol', 'Filing Date', 'Accepted Date',"
56,urls_bs,"['date', 'symbol', 'filing-date', 'accepted-date',"
57,urls_cf,"['date', 'symbol', 'filing-date', 'accepted-date',"
58,urls_is,"['date', 'symbol', 'filing-date', 'accepted-date',"
59,_i6,"for n, profiles_col in enumerate(company_profiles_"
60,n,29
61,profiles_col,short name
62,key,short name
63,value,short name
64,fin_metric_pos,5
65,fin_statement_dir,Balance Sheet
66,fin_statement_cols,"['Cash and Cash Equivalents', 'Short Term Investme"
67,cols,"['', 2020, 2019, 2018, 2017, 2016, 2015, 2014, 201"
68,fin_metric_title,Cash and Cash Equivalents
69,_i7,"# start_time = time.time()
csv_file = glob.glob(""."
70,csv_file,../Charts_TenDollarData/financial_statements/data/
71,df,"             date  cashAndCashEquivalents
26   780"
72,df_fin_statement,                Cash and Cash Equivalents  Short T
73,matching_row,    index  subindex                    Name Financ
74,fin_metric_name,cashAndCashEquivalents
75,sorted_metric,"25      756000000
20     1191000000
26     1203488"
76,_i8,"


# sorted_metric(int(len(sorted_metric)*(n/100))"
77,quarters,7
78,bottom_25,2310000000
79,top_25,13844000000
80,max_num,48844000000
81,min_num,756000000
82,mean,10764092148.148148
83,std_dev,11987554008.016428
84,std_dev_str,+/-$11.4%
85,mean_str,$10.8B
86,max_str,$48.8B
87,min_str,$756.0M
88,bottom_25_str,$2.3B
89,top_25_str,$13.8B
90,lifetime_sum_all_metric,$290.6B
91,latest_num,$38016000000
92,first_num,38016000000
93,pct_chg,0.0
94,historical_pct_chg,0.0
95,_i9,"if pct_chg>=0:
    pct_chg_str = ""+{}%"".format(pct"
96,pct_chg_str,+0.0%
97,max_min_pct_diff,63.60846560846561
98,max_min_pct_diff_str,+6400%
99,_i10,df_fin_statement['Quarter & Year'] =(df_fin_statem
100,latest_year,1994
101,earliest_year,2020
102,earliest_metric,38016000000
103,latest_metric,1203488000
104,_i11,"titles_list = ['Date','Symbol','Filing Date','Acce"
105,titles_list,"['Date', 'Symbol', 'Filing Date', 'Accepted Date',"
106,x,Date
107,_i12,"titles_bs.append('Quarter & Year') 
df_fin_stateme"
108,_i13,"
df_fin_statement = df_fin_statement[cols]

df_fin"
109,million,1000000
110,billion,1000000000
111,fin_metric_history,"Quarter & Year
1994     1203488000
1995      75600"
112,_i14,%whos
113,_i15,"vars_names_list = []
for name in vars().keys():
  "
114,vars_names_list,"['__name__', '__doc__', '__package__', '__loader__"
115,name,vars_names_list
116,_i16,"vars_names_list = []
vars_values_list = []
# for n"
117,vars_values_list,"['__main__', 'Automatically created module for IPy"
118,_i17,vars_names_list
119,_17,"['__name__', '__doc__', '__package__', '__loader__"
120,_i18,"
df_pct_chg = df_fin_statement
pct_chg_cols = (df_"
121,df_pct_chg,                Cash and Cash Equivalents  Short T
122,pct_chg_cols,                Cash and Cash Equivalents  Short T
123,df_pct_chg_str,                                               SEC
124,df_pct_chg_t,                                                 \
125,df_t,             281.89                               
126,df_pct,"<table class=""df_tableBoot"" id=""df_myTable1"" borde"
127,isnumber,<function isnumber at 0x00000202FFD6DD30>
128,df_n,                Cash and Cash Equivalents  Short T
129,df_n_sum,"Cash and Cash Equivalents           281.89
0      "
130,new_header,"0   281.89
Name: Cash and Cash Equivalents, dtype:"
131,col_list,"['<col id=""col_item_0"" class=""col_item_class first"
132,col_item,"<col id=""col_item_28"" class=""col_item_class"">"
133,col_list_str,"<col id=""col_item_0"" class=""col_item_class first_7"
134,df_html,"<table class=""df_tableBoot"" id=""df_myTable"" border"
135,df_tall,    Unnamed: 0        date symbol          filling
136,df_html_tall,"<table class=""abc"" id=""df_myTable"" border=""1"" clas"
137,full_path,['../Charts_TenDollarData/financial_statements/dat
138,path,..\Charts_TenDollarData\financial_statements\data\
139,total_seconds,267.55981707572937
140,labels,"[780883200000, 812332800000, 843782400000, 8752320"
141,values,"[1203488000, 756000000, 1552000000, 1230000000, 14"
142,colors,"['#F7464A', '#46BFBD', '#FDB45C', '#FEDCBA', '#ABC"
143,df_table_html,"<table border=""1"" class=""dataframe"">
  <thead>
   "
144,present_num,$1.2B
145,_i19,"vars_names_list = []
vars_values_list = []
# for n"
