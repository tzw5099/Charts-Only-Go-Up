{
  "layer0": "# mark: top\r\n\r\n# https://github.com/ptmcg/littletable\r\n    # https://github.com/sunary/flask-optimize\r\n    # https://github.com/h2oai/datatable\r\n    # https://github.com/derekeder/csv-to-html-table\r\n    # https://github.com/vividvilla/csvtotable\r\n    # https://medium.com/casual-inference/the-most-time-efficient-ways-to-import-csv-data-in-python-cc159b44063d\r\n    # https://blog.esciencecenter.nl/irregular-data-in-pandas-using-c-88ce311cb9ef\r\n    # all the imports - https://flask.palletsprojects.com/en/0.12.x/tutorial/setup/#tutorial-setup\r\n    # https://stackoverflow.com/questions/20646822/how-to-serve-static-files-in-flask\r\n    # https://stackoverflow.com/questions/20646822/how-to-serve-static-files-in-flask\r\n    # https://stackoverflow.com/questions/52644035/how-to-show-a-pandas-dataframe-into-a-existing-flask-html-table\r\n    # https://stackoverflow.com/questions/20906474/import-multiple-csv-files-into-pandas-and-concatenate-into-one-dataframe\r\n    # https://stackoverflow.com/questions/17134942/pandas-dataframe-output-end-of-csv\r\n    # http://www.compjour.org/lessons/flask-single-page/multiple-dynamic-routes-in-flask/\r\n\r\n# Flask-DebugToolbar\r\nimport os\r\nimport sqlite3\r\nimport pandas as pd\r\nimport glob\r\nimport pathlib\r\nimport time\r\nimport sys\r\n\r\n\r\nsys.path.append(os.path.join(os.path.dirname(__file__)))\r\n\r\n# from financial_statements.functions.pandas_extraction import FS\r\nfrom functions.pandas_extraction import FS\r\n\r\n\r\nimport numpy as np\r\nimport functools\r\nfrom datetime import datetime\r\nfrom string import Template\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_caching import Cache\r\nimport logging\r\nfrom flask import render_template_string,request, session, g, redirect, url_for, abort, render_template, flash, Blueprint\r\ncache = Cache()\r\n# app = Flask(__name__)\r\nfrom string import Template\r\n\r\n# https://stackoverflow.com/questions/17309889/how-to-debug-a-flask-app\r\n# from flask_debugtoolbar import DebugToolbarExtension\r\n# app.debug = True\r\n# toolbar = DebugToolbarExtension(app)\r\n\r\n\r\n# app.config['CACHE_TYPE'] = 'simple'\r\n# cache.init_app(app)\r\n# blueprint = Blueprint('stock', __name__, static_url_path='', static_folder='stock')\r\ncharts = Blueprint('charts', __name__)\r\n# app.register_blueprint(blueprint)\r\n\r\n\r\n\r\n\r\n@charts.route('/', methods=['POST', 'GET'])\r\n@charts.route(\"/home\")\r\ndef index():\r\n\r\n    return render_template('index.html')\r\n\r\n\r\n\r\n@charts.route('/<url_symbol>-<stock_or_etf>/<url_name>/<statement_or_ratio>/<url_fin_metric>', methods=['POST', 'GET']) # WORKS\r\ndef current_ratio(url_fin_metric,stock_or_etf,url_name,statement_or_ratio,url_symbol): # WORKS\r\n    from route_imports.ratio_map import metric_to_url_map # as ratios\r\n    from route_imports.ratio_map import url_to_var_name_map\r\n    from route_imports.ratio_map import url_to_name_map\r\n    from route_imports.ratio_map import fin_statement_raw_names\r\n    from route_imports.ratio_map import fin_statement_renamed_cols\r\n    from route_imports.ratio_map import metric_to_formula_map\r\n    from route_imports.ratio_map import url_to_metric_map\r\n    start_time = time.time()\r\n    url_symbol=\"aapl\"\r\n    titles_list = ['Date','Symbol','Filing Date','Accepted Date','Period','SEC Filing Link']\r\n    def magnitude_num(number, currency_symbol):\r\n        if len(str(number)) > 9:\r\n            magnitude = number/1000000000\r\n            magnitude_str = \"{}{}{}\".format(currency_symbol,round(magnitude,1),\"B\")\r\n        elif len(str(number)) > 6:\r\n            magnitude = number/1000000\r\n            magnitude_str = \"{}{}{}\".format(currency_symbol,round(magnitude,1),\"M\")\r\n        elif len(str(number)) > 3:\r\n            magnitude = number/1000\r\n            magnitude_str = \"{}{}{}\".format(currency_symbol,round(magnitude,1),\"K\")\r\n        else:\r\n            magnitude = number\r\n            magnitude_str = \"{}{}{}\".format(currency_symbol,round(magnitude,1),\"K\")\r\n        return magnitude_str\r\n    fin_statements_list = [\"balance-sheet\",\"income-statement\",\"cash-flow-statement\"]\r\n    if \"{}\".format(statement_or_ratio) in fin_statements_list:\r\n        company_profiles = pd.read_csv(\"reference_data/Company_Profiles.csv\")#, encoding='cp1252')\r\n        fin_statements_matching = pd.read_csv(\"reference_data/Financial_Statements_Reference_Matching.csv\")#, encoding='cp1252')\r\n        currency_symbol = list(company_profiles[company_profiles['symbol']==\"{}\".format(url_symbol.upper())]['currency symbol'])[0]\r\n        company_profiles_col = ['symbol',\r\n                                'long name',\r\n                                'currency',\r\n                                'exchange',\r\n                                'industry',\r\n                                'description',\r\n                                'sector',\r\n                                'country',\r\n                                'ipo date',\r\n                                'short name',\r\n                                'Industries',\r\n                                'Similar Companies']\r\n        company_profiles = company_profiles[company_profiles_col]\r\n        profiles_dict = {}\r\n        profiles_value = company_profiles[company_profiles['symbol']==\"{}\".format(url_symbol.upper())].values.tolist()[0]\r\n\r\n        # http://127.0.0.1:5000/aapl-stock/apple/balance-sheet/cash-and-cash-equivalents\r\n\r\n        titles_cf = list(fin_statements_matching[fin_statements_matching['Financial Statement']==\"Cash Flow Statement\"]['Title'])\r\n        titles_is = list(fin_statements_matching[fin_statements_matching['Financial Statement']==\"Income Statement\"]['Title'])\r\n\r\n        urls_bs = list(fin_statements_matching[fin_statements_matching['Financial Statement']==\"Balance Sheet\"]['URL'])\r\n        urls_cf = list(fin_statements_matching[fin_statements_matching['Financial Statement']==\"Cash Flow Statement\"]['URL'])\r\n        urls_is = list(fin_statements_matching[fin_statements_matching['Financial Statement']==\"Income Statement\"]['URL'])\r\n\r\n        for n, profiles_col in enumerate(company_profiles_col):\r\n            key = profiles_col\r\n            value = profiles_value[n]\r\n            profiles_dict[key] = value \r\n\r\n\r\n\r\n        chars_to_remove = [\"'\",\"[\",\"]\"]\r\n\r\n        for character in chars_to_remove:\r\n            profiles_dict['Industries'] = profiles_dict['Industries'].replace(character, \"\")\r\n            profiles_dict['Similar Companies'] = profiles_dict['Similar Companies'].replace(character, \"\")        \r\n\r\n        if \"{}\".format(url_fin_metric) in urls_is:\r\n            titles_bs = list(fin_statements_matching[fin_statements_matching['Financial Statement']==\"Income Statement\"]['Title'])\r\n            fin_metric_pos = urls_is.index(\"{}\".format(url_fin_metric))\r\n            fin_statement_dir = \"Income Statement\"\r\n        elif \"{}\".format(url_fin_metric) in urls_bs:\r\n            titles_bs = list(fin_statements_matching[fin_statements_matching['Financial Statement']==\"Balance Sheet\"]['Title'])\r\n            fin_metric_pos = urls_bs.index(\"{}\".format(url_fin_metric))\r\n            fin_statement_dir = \"Balance Sheet\"\r\n\r\n        elif \"{}\".format(url_fin_metric) in urls_cf:\r\n            titles_bs = list(fin_statements_matching[fin_statements_matching['Financial Statement']==\"Cash Flow Statement\"]['Title'])\r\n            fin_metric_pos = urls_cf.index(\"{}\".format(url_fin_metric))\r\n\r\n            fin_statement_dir = \"Cash Flow Statement\"\r\n        else:\r\n            pass\r\n        fin_statement_cols = titles_bs\r\n        cols = titles_bs\r\n        fin_metric_title = fin_statement_cols[fin_metric_pos]\r\n\r\n        csv_file = glob.glob(\"Charts_TenDollarData/financial_statements/data/Historical Financial Statements/*/year/{}/*~{}~*\".format(fin_statement_dir, url_symbol.upper()))[-1]\r\n\r\n        df = pd.read_csv(csv_file) #.format(\"NLOK\"))[-1]\r\n        # df = df[df['date'].notna()]#fillna(method='ffill')\r\n        df = df[0:].iloc[::-1]#.dropna()\r\n        #region Pandas data manipulation\r\n        df = df\r\n        matching_row = fin_statements_matching[fin_statements_matching['URL']==\"{}\".format(url_fin_metric)]\r\n        fin_metric_title = list(matching_row['Title'])[0]\r\n        fin_metric_name = list(matching_row['Name'])[0]\r\n        print(\"fin_metric_name\", fin_metric_name)\r\n        print(\"fin metric name\", fin_metric_name)\r\n        sorted_metric = df[\"{}\".format(fin_metric_name)].sort_values()\r\n        lifetime_sum_all_metric = df[\"{}\".format(fin_metric_name)].sum()\r\n        lifetime_sum_all_metric = magnitude_num(lifetime_sum_all_metric,currency_symbol)        \r\n        print(\"lifetime passed\")\r\n\r\n\r\n    else:\r\n        \r\n        currency_symbol = \"\"\r\n        fin_dir = [\"Income Statement\",\"Balance Sheet\",\"Cash Flow Statement\"]\r\n        fin_df_list = []\r\n        for x in fin_dir:\r\n            fin_file = glob.glob(\"Charts_TenDollarData/financial_statements/data/Historical Financial Statements/*/year/{}/*~{}~*\".format(x, url_symbol.upper()))[-1]\r\n            fin_df = pd.read_csv(fin_file)\r\n            fin_df_list.append(fin_df)\r\n        df_merge_is_bs = pd.merge(fin_df_list[0],fin_df_list[1],how=\"inner\", on=\"date\")\r\n        # df\r\n        # df_merge cols\r\n        df_merge = pd.merge(df_merge_is_bs,fin_df_list[2],how=\"inner\", on=\"date\")\r\n        df_merge = df_merge[fin_statement_raw_names]\r\n        \r\n        df_merge.columns = fin_statement_renamed_cols\r\n        df = df_merge\r\n\r\n        df['ffo_math']=df['net_income'] + df['d_n_a'] + df['sales_maturities_of_investments'] + df['purchase_of_investments'] + df['investments_in_pp_n_e'] + df['acquisitions_net']\r\n        df['book_value_math']=df['total_assets'].dropna()-df['total_liabilities'].dropna()\r\n        df['ebit_math']=df['ebitda_non'] - df['d_n_a']\r\n        df['working_capital_math']= df['total_current_assets'] - df['total_current_liabilities']\r\n\r\n        df['quick_assets_math']=df['cash_non']+df['short_term_investments']+df['accounts_receivable']\r\n        df['quick_ratio_math']=df['total_current_assets'] - df['inventory']\r\n        metric_name = url_to_metric_map['net-working-capital-ratio']\r\n\r\n        # url_fin_metric = 'net-working-capital-ratio'\r\n\r\n        fin_metric_title = url_to_name_map[url_fin_metric]\r\n        fin_metric_name = url_to_var_name_map[url_fin_metric]\r\n        metric_history = metric_to_formula_map(df,metric_name)\r\n        sorted_metric = metric_history.sort_values(ascending=True)\r\n        # sorted_metric(int(len(sorted_metric)*(n/100)))\r\n        lifetime_sum_all_metric = \"\"\r\n        lifetime_sum_all_metric = \"\"\r\n        df = df\r\n        df[\"{}\".format(fin_metric_name)] = metric_history\r\n    quarters = round(len(sorted_metric)/4)\r\n    bottom_25 = sorted_metric[len(sorted_metric)-1-quarters]\r\n    top_25 = sorted_metric[quarters-1]\r\n    max_metric = sorted_metric.max()\r\n    min_metric = sorted_metric.min()\r\n    mean = sorted_metric.mean()\r\n    std_dev = sorted_metric.std()\r\n    \r\n    std_dev_str = \"+/-{}{}%\".format(currency_symbol,round(abs((std_dev-mean)/mean)*100,1))\r\n    mean_str = magnitude_num(mean, currency_symbol)\r\n    max_str = magnitude_num(max_metric, currency_symbol)\r\n    min_str = magnitude_num(min_metric, currency_symbol)\r\n    bottom_25_str = magnitude_num(bottom_25, currency_symbol)\r\n    top_25_str = magnitude_num(top_25, currency_symbol)\r\n    \r\n    \r\n    earliest_year = list((df['date'].astype(str).str[0:4]))[0]    \r\n    latest_year = list((df['date'].astype(str).str[0:4]))[-1]    # average_abs_chg = latest_metric-earliest_metric\r\n    earliest_metric = list(df[\"{}\".format(fin_metric_name)])[0]\r\n    latest_metric = list(df[\"{}\".format(fin_metric_name)])[-1]\r\n    print(\"latest num\", latest_metric)\r\n    pct_chg = (latest_metric - earliest_metric)/earliest_metric\r\n    historical_pct_chg = str(round(pct_chg*100, 1))\r\n\r\n    if pct_chg>=0:\r\n        pct_chg_str = \"+{}%\".format(historical_pct_chg)\r\n    elif pct_chg<0:\r\n        pct_chg_str = \"-{}%\".format(historical_pct_chg)\r\n    else:\r\n        pct_chg_str = \"\"\r\n    historical_pct_chg = pct_chg_str\r\n    max_min_pct_diff = ((max_metric-min_metric)/min_metric)\r\n\r\n    if max_min_pct_diff>=0:\r\n        max_min_pct_diff_str = \"+{}%\".format(round(max_min_pct_diff)*100,1)\r\n    elif max_min_pct_diff<0:\r\n        max_min_pct_diff_str = \"-{}%\".format(round(max_min_pct_diff)*100,1)\r\n    else:\r\n        max_min_pct_diff_str = \"\"\r\n    \r\n    df = df.drop(['Quarter & Year', 'Unnamed: 0','symbol','fillingDate','acceptedDate','period','link'],axis=1, errors='ignore')\r\n\r\n    \r\n    print(\"list 5 \", df)\r\n    for x in reversed(titles_bs):\r\n        if x in titles_list:\r\n            titles_bs.remove(x)                \r\n    titles_bs.append('Quarter & Year') \r\n    df['Quarter & Year'] =(df['date'].astype(str).str[0:4]).astype(int)\r\n    df = df.drop(['date'],axis=1, errors='ignore')\r\n    print(\"titles_bs\",titles_bs)\r\n    print(\"list_fin_statement\",list(df))\r\n    df.columns = titles_bs\r\n    df = df\r\n\r\n\r\n\r\n    df = df[cols]\r\n\r\n    df.index = df['Quarter & Year']\r\n    \r\n    million = 1000000\r\n    billion = 1000000000\r\n    fin_metric_history = df['{}'.format(fin_metric_title)]\r\n    print(\"list 6 \", df)\r\n    if list(fin_metric_history)[0]  > billion:\r\n        df['{}'.format(fin_metric_title)] = (fin_metric_history/billion).round(decimals=2)\r\n        \r\n    elif list(fin_metric_history)[0]  > million:\r\n        df['{}'.format(fin_metric_title)] = (fin_metric_history/million).round(decimals=2)\r\n\r\n        pass\r\n    else:\r\n        pass\r\n\r\n    df_pct_chg = df\r\n    pct_chg_cols = (df.select_dtypes(include=['number']).pct_change(-1))\r\n    df_pct_chg_str = df_pct_chg.drop(list(pct_chg_cols), axis=1)\r\n    df_pct_chg = df_pct_chg_str.join(pct_chg_cols)[list(df)]\r\n\r\n    pd.set_option('display.float_format', '{:.2f}'.format)\r\n    df_pct_chg_t = df_pct_chg.transpose()\r\n    df_pct_chg_t.columns = list(df_pct_chg['Quarter & Year'])\r\n    df_pct_chg_t = df_pct_chg_t.iloc[1:]\r\n\r\n    df_pct_chg_t = df_pct_chg.transpose()\r\n    df_pct_chg_t.columns = list(df_pct_chg['Quarter & Year'])\r\n    df_pct_chg_t = df_pct_chg_t.iloc[1:]\r\n    df_pct_chg_t['']=df_pct_chg_t.index\r\n    df_pct_chg_t.index = range(len(df_pct_chg_t))\r\n\r\n    cols = list(df_pct_chg_t.columns)\r\n    cols = [cols[-1]] + cols[:-1]\r\n    df_pct_chg_t = df_pct_chg_t[cols]\r\n\r\n\r\n    df_t = df.transpose()\r\n    df_t.columns = list(df['Quarter & Year'])\r\n    df_t = df_t.iloc[1:]\r\n    df_t['']=df_t.index\r\n    df_t.index = range(len(df_t))\r\n\r\n    cols = list(df_t.columns)\r\n    cols = [cols[-1]] + cols[:-1]\r\n    df_t = df_t[cols]\r\n    #endregion\r\n\r\n    df_pct = df_pct_chg_t.to_html().replace('<table','<table class=\"df_tableBoot\" id=\"df_myTable1\"')# dt-responsive\" id=\"df_myTable\"')\r\n\r\n    df_t = df_t[df_t.columns[::-1]]\r\n    cols = list(df_t.columns)\r\n    cols = [cols[-1]] + cols[:-1]\r\n    df_t = df_t[cols]\r\n\r\n\r\n    def isnumber(x):\r\n        try:\r\n            float(x)\r\n            return True\r\n        except:\r\n            return False\r\n    df_n = df[df.applymap(isnumber)]\r\n    df_n[df_n < 2] = np.nan\r\n    df_n_sum = pd.DataFrame(df_n.sum())\r\n    df_n_sum[df_n_sum == 0] = \"\"\r\n    new_header = df_n_sum.iloc[0] #grab the first row for the header\r\n    df_n_sum = df_n_sum[1:] #take the data less the header row\r\n    df_n_sum.columns = new_header #set the header row as the df header\r\n    df_n_sum.index = range(len(df_n_sum))\r\n    df_t = pd.merge(df_n_sum, df_t, left_index=True, right_index=True,suffixes=('Total: {} - {}'.format(latest_year,earliest_year), 'Line Items'))\r\n    df_t = df_t[0:25]\r\n\r\n\r\n\r\n    col_list = []\r\n    n=0\r\n    while n<len(list(df_t))-0:\r\n        if n<6:\r\n                col_item = '<col id=\"col_item_{}\" class=\"col_item_class first_7_col\">'.format(n)\r\n        else:\r\n            col_item = '<col id=\"col_item_{}\" class=\"col_item_class\">'.format(n)\r\n        col_list.append(col_item)\r\n        n+=1\r\n    col_list_str = ''.join(map(str, col_list))\r\n    df_html = df_t.to_html().replace('border=\"1\" class=\"dataframe\">','class=\"df_tableBoot\" id=\"df_myTable\" border=\"1\" class=\"dataframe\"><colgroup>{}</colgroup>'.format(col_list_str))\r\n    # df_table_html = df_fin_statement[['{}'.format(fin_metric_title)]].iloc[::-1].transpose().to_html()#.replace(\"\\n\",\"\")\r\n    df_tall = df.iloc[::-1]\r\n    # df_tall.index = df['Quarter & Year']\r\n    # df_tall = df.index.shift(-1)\r\n    # df_tall = df_tall.reset_index()\r\n    print(\"list 7 \", df_tall)\r\n    df_html_tall = df_tall[['{}'.format('Quarter & Year'),'{}'.format(fin_metric_title)]].to_html(index=False)\r\n    df_html_tall = df_html_tall.replace('border=\"1\" class=\"dataframe\">','class=\"abc\" id=\"df_myTable\" border=\"1\" class=\"dataframe\">')#.replace(\"'\",\"\")\r\n    # df_html_tall = df_html_tall.replace(\"\\n\",\"\")\r\n    df_html_tall = df_html_tall.replace(\"\\n\",\"\")\r\n    df_html_tall = df_html_tall.replace(\"{}\".format(\"[\"),\"\")\r\n    df_html_tall = df_html_tall #render_template_string(df_html_tall)\r\n    #  df_html_tall = df_html_tall.replace(\"\\n\",\"\")\r\n    # df_html_tall.replace(\"\\n\",'\">')\r\n    df_html_tall = df_html_tall.replace('<td>','<td class=\"td_fin_statement_class fin_statement_class\">')\r\n    df_html_tall = df_html_tall.replace('<th>','<th class=\"th_fin_statement_class fin_statement_class\">')\r\n    df_html_tall = df_html_tall.replace('<tr>','<tr class=\"tr_fin_statement_class fin_statement_class\">')\r\n    df_html_tall = df_html_tall[0:]\r\n    print(\"list 8 \", df_tall)\r\n    df_html = df_html.replace('<td>','<td class=\"td_fin_statement_class fin_statement_class\">')\r\n    df_html = df_html.replace('<th>','<th class=\"th_fin_statement_class fin_statement_class\">')\r\n    df_html = df_html.replace('<tr>','<tr class=\"tr_fin_statement_class fin_statement_class\">')\r\n    \r\n    # df = df[['date',\"{}\".format(fin_metric_name)]].dropna() #.fillna(0)#.fillna(method='bfill')\r\n    # df['date'] = pd.to_datetime(df['date']).values.astype(np.int64) // 10 ** 6\r\n    full_path = csv_file.split(' ~ ')\r\n    path = pathlib.PurePath(full_path[0])\r\n    \r\n    total_seconds = ((time.time() - start_time))\r\n    print(\"list 9 \", df_tall)\r\n    df_table_html = df_tall[['{}'.format(fin_metric_title)]].iloc[::-1].transpose().to_html()#.replace(\"\\n\",\"\")\r\n    present_num = magnitude_num(int(latest_metric),currency_symbol)\r\n    print(\"last title\",df[\"{}\".format(fin_metric_title)])\r\n    latest_metric = \"${}\".format(df[\"{}\".format(fin_metric_title)][0])\r\n    print(\"latest_num 2\", latest_metric,\"present_num 2\", present_num)\r\n    print(\"Nothing took {} seconds\".format(time.time() - start_time))\r\n    return render_template('current_ratio.html', company_symbol = profiles_dict['symbol'],\\\r\n                            company_long_name = profiles_dict['long name'],\\\r\n                            company_currency = profiles_dict['currency'],\\\r\n                            company_exchange = profiles_dict['exchange'],\\\r\n                            company_industry = profiles_dict['industry'],\\\r\n                            company_description = profiles_dict['description'],\\\r\n                            company_sector = profiles_dict['sector'],\\\r\n                            company_country = profiles_dict['country'],\\\r\n                            company_ipo_date = profiles_dict['ipo date'],\\\r\n                            company_short_name = profiles_dict['short name'],\\\r\n                            company_industries = profiles_dict['Industries'],\\\r\n                            company_similar = profiles_dict['Similar Companies'],\\\r\n                            historical_pct_chg = historical_pct_chg,\\\r\n                            lifetime_sum_all_metric = lifetime_sum_all_metric,\\\r\n                            mean_str = mean_str,\\\r\n                            max_str = max_str,\\\r\n                            min_str = min_str,\\\r\n                            std_dev_str = std_dev_str,\\\r\n                            bottom_25_str = bottom_25_str,\\\r\n                            top_25_str = top_25_str,\\\r\n                            earliest_year = earliest_year,\\\r\n                            latest_year = latest_year,\\\r\n                            earliest_metric = earliest_metric,\\\r\n                            latest_metric = latest_metric,\\\r\n                            present_num = present_num,\\\r\n                            max_min_pct_diff_str = max_min_pct_diff_str, df_bs_table_html = [df_table_html],df_html_tall = [df_html_tall],fin_metric_name = fin_metric_title,\\\r\n                            df_date = df['date'].to_list(), df_rev = df[\"{}\".format(fin_metric_name)].to_list(),\\\r\n                            df_json  =df.to_numpy().tolist(),\\\r\n                            table_pct = [df_pct],\\\r\n                            tables=[df_html],\\\r\n                            titles=df.columns.values,\\\r\n                            total_time=total_seconds,\\\r\n                            place_name=url_symbol,\\\r\n                            max=17000,\\\r\n                            labels=labels,\\\r\n                            values=values)\r\n\r\n\r\n@charts.route('/test/<url_symbol>', methods=['POST', 'GET'])\r\n# @cache.cached(timeout=5)\r\ndef fin_test(url_symbol):\r\n    # values = list(FS(\"IS\",\"AAPL\")['Beginning Price'])[0:19]\r\n\r\n\r\n    return render_template('financial_statements.html',\r\n\r\n     df_html=FS(\"IS\",\"AAPL\").df_html(),\r\n     tables=FS(\"IS\",\"AAPL\").df_values()['df_table'],\r\n     table_pct = FS(\"IS\",\"AAPL\").df_values()['df_table_pct'],\r\n     df_date = FS(\"IS\",\"AAPL\").df_values()['chart_x_dates'],\r\n     df_rev = FS(\"IS\",\"AAPL\").df_values()['chart_y_revenue'],\r\n     df_json = FS(\"IS\",\"AAPL\").df_values()['df_json'],\r\n     titles=FS(\"IS\",\"AAPL\").df_values()['df_titles'],\r\n     labels = FS(\"IS\",\"AAPL\").df_labels(),\r\n     values=FS(\"IS\",\"AAPL\").df_price(),\r\n     place_name=url_symbol, max=17000,\r\n     )",
  "layer1": "# mark: top\r\n\r\n# https://github.com/ptmcg/littletable\r\n    # https://github.com/sunary/flask-optimize\r\n    # https://github.com/h2oai/datatable\r\n    # https://github.com/derekeder/csv-to-html-table\r\n    # https://github.com/vividvilla/csvtotable\r\n    # https://medium.com/casual-inference/the-most-time-efficient-ways-to-import-csv-data-in-python-cc159b44063d\r\n    # https://blog.esciencecenter.nl/irregular-data-in-pandas-using-c-88ce311cb9ef\r\n    # all the imports - https://flask.palletsprojects.com/en/0.12.x/tutorial/setup/#tutorial-setup\r\n    # https://stackoverflow.com/questions/20646822/how-to-serve-static-files-in-flask\r\n    # https://stackoverflow.com/questions/20646822/how-to-serve-static-files-in-flask\r\n    # https://stackoverflow.com/questions/52644035/how-to-show-a-pandas-dataframe-into-a-existing-flask-html-table\r\n    # https://stackoverflow.com/questions/20906474/import-multiple-csv-files-into-pandas-and-concatenate-into-one-dataframe\r\n    # https://stackoverflow.com/questions/17134942/pandas-dataframe-output-end-of-csv\r\n    # http://www.compjour.org/lessons/flask-single-page/multiple-dynamic-routes-in-flask/\r\n\r\n# Flask-DebugToolbar\r\nimport os\r\nimport sqlite3\r\nimport pandas as pd\r\nimport glob\r\nimport pathlib\r\nimport time\r\nimport sys\r\n\r\n\r\nsys.path.append(os.path.join(os.path.dirname(__file__)))\r\n\r\n# from financial_statements.functions.pandas_extraction import FS\r\nfrom functions.pandas_extraction import FS\r\n\r\n\r\nimport numpy as np\r\nimport functools\r\nfrom datetime import datetime\r\nfrom string import Template\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_caching import Cache\r\nimport logging\r\nfrom flask import render_template_string,request, session, g, redirect, url_for, abort, render_template, flash, Blueprint\r\ncache = Cache()\r\n# app = Flask(__name__)\r\nfrom string import Template\r\n\r\n# https://stackoverflow.com/questions/17309889/how-to-debug-a-flask-app\r\n# from flask_debugtoolbar import DebugToolbarExtension\r\n# app.debug = True\r\n# toolbar = DebugToolbarExtension(app)\r\n\r\n\r\n# app.config['CACHE_TYPE'] = 'simple'\r\n# cache.init_app(app)\r\n# blueprint = Blueprint('stock', __name__, static_url_path='', static_folder='stock')\r\ncharts = Blueprint('charts', __name__)\r\n# app.register_blueprint(blueprint)\r\n\r\n\r\n\r\n\r\n@charts.route('/', methods=['POST', 'GET'])\r\n@charts.route(\"/home\")\r\ndef index():\r\n\r\n    return render_template('index.html')\r\n\r\n\r\n\r\n@charts.route('/<url_symbol>-<stock_or_etf>/<url_name>/<statement_or_ratio>/<url_fin_metric>', methods=['POST', 'GET']) # WORKS\r\ndef current_ratio(url_fin_metric,stock_or_etf,url_name,statement_or_ratio,url_symbol): # WORKS\r\n    from route_imports.ratio_map import metric_to_url_map # as ratios\r\n    from route_imports.ratio_map import url_to_var_name_map\r\n    from route_imports.ratio_map import url_to_name_map\r\n    from route_imports.ratio_map import fin_statement_raw_names\r\n    from route_imports.ratio_map import fin_statement_renamed_cols\r\n    from route_imports.ratio_map import metric_to_formula_map\r\n    from route_imports.ratio_map import url_to_metric_map\r\n    start_time = time.time()\r\n    url_symbol=\"aapl\"\r\n    titles_list = ['Date','Symbol','Filing Date','Accepted Date','Period','SEC Filing Link']\r\n    def magnitude_num(number, currency_symbol):\r\n        if len(str(number)) > 9 and number > 0:\r\n            magnitude = number/1000000000\r\n            magnitude_str = \"{}{}{}\".format(currency_symbol,round(magnitude,1),\"B\")\r\n        elif len(str(number)) > 6 and number > 0:\r\n            magnitude = number/1000000\r\n            magnitude_str = \"{}{}{}\".format(currency_symbol,round(magnitude,1),\"M\")\r\n        elif len(str(number)) > 3 and number > 0:\r\n            magnitude = number/1000\r\n            magnitude_str = \"{}{}{}\".format(currency_symbol,round(magnitude,1),\"K\")\r\n\r\n        elif len(str(number)) > 9 and number < 0:\r\n            magnitude = abs(number/1000000000)\r\n            magnitude_str = \"-{}{}{}\".format(currency_symbol,round(magnitude,1),\"B\")\r\n        elif len(str(number)) > 6 and number < 0:\r\n            magnitude = abs(number/1000000)\r\n            magnitude_str = \"-{}{}{}\".format(currency_symbol,round(magnitude,1),\"M\")\r\n        elif len(str(number)) > 3 and number < 0:\r\n            magnitude = abs(number/1000)\r\n            magnitude_str = \"-{}{}{}\".format(currency_symbol,round(magnitude,1),\"K\")\r\n        else:\r\n            magnitude = number\r\n            magnitude_str = \"{}{}{}\".format(\"\",round(magnitude,1),\"K\")\r\n        return magnitude_str\r\n    fin_statements_list = [\"balance-sheet\",\"income-statement\",\"cash-flow-statement\"]\r\n    if \"{}\".format(statement_or_ratio) in fin_statements_list:\r\n        company_profiles = pd.read_csv(\"reference_data/Company_Profiles.csv\")#, encoding='cp1252')\r\n        fin_statements_matching = pd.read_csv(\"reference_data/Financial_Statements_Reference_Matching.csv\")#, encoding='cp1252')\r\n        currency_symbol = list(company_profiles[company_profiles['symbol']==\"{}\".format(url_symbol.upper())]['currency symbol'])[0]\r\n        company_profiles_col = ['symbol',\r\n                                'long name',\r\n                                'currency',\r\n                                'exchange',\r\n                                'industry',\r\n                                'description',\r\n                                'sector',\r\n                                'country',\r\n                                'ipo date',\r\n                                'short name',\r\n                                'Industries',\r\n                                'Similar Companies']\r\n        company_profiles = company_profiles[company_profiles_col]\r\n        profiles_dict = {}\r\n        profiles_value = company_profiles[company_profiles['symbol']==\"{}\".format(url_symbol.upper())].values.tolist()[0]\r\n\r\n        # http://127.0.0.1:5000/aapl-stock/apple/balance-sheet/cash-and-cash-equivalents\r\n\r\n        titles_cf = list(fin_statements_matching[fin_statements_matching['Financial Statement']==\"Cash Flow Statement\"]['Title'])\r\n        titles_is = list(fin_statements_matching[fin_statements_matching['Financial Statement']==\"Income Statement\"]['Title'])\r\n\r\n        urls_bs = list(fin_statements_matching[fin_statements_matching['Financial Statement']==\"Balance Sheet\"]['URL'])\r\n        urls_cf = list(fin_statements_matching[fin_statements_matching['Financial Statement']==\"Cash Flow Statement\"]['URL'])\r\n        urls_is = list(fin_statements_matching[fin_statements_matching['Financial Statement']==\"Income Statement\"]['URL'])\r\n\r\n        for n, profiles_col in enumerate(company_profiles_col):\r\n            key = profiles_col\r\n            value = profiles_value[n]\r\n            profiles_dict[key] = value \r\n\r\n\r\n\r\n        chars_to_remove = [\"'\",\"[\",\"]\"]\r\n\r\n        for character in chars_to_remove:\r\n            profiles_dict['Industries'] = profiles_dict['Industries'].replace(character, \"\")\r\n            profiles_dict['Similar Companies'] = profiles_dict['Similar Companies'].replace(character, \"\")        \r\n\r\n        if \"{}\".format(statement_or_ratio) == \"income-statement\":\r\n            titles_bs = list(fin_statements_matching[fin_statements_matching['Financial Statement']==\"Income Statement\"]['Title'])\r\n            fin_metric_pos = urls_is.index(\"{}\".format(url_fin_metric))\r\n            fin_statement_dir = \"Income Statement\"\r\n        elif \"{}\".format(statement_or_ratio) == \"balance-sheet\":\r\n            titles_bs = list(fin_statements_matching[fin_statements_matching['Financial Statement']==\"Balance Sheet\"]['Title'])\r\n            fin_metric_pos = urls_bs.index(\"{}\".format(url_fin_metric))\r\n            fin_statement_dir = \"Balance Sheet\"\r\n\r\n        elif \"{}\".format(statement_or_ratio) == \"cash-flow-statement\":\r\n            titles_bs = list(fin_statements_matching[fin_statements_matching['Financial Statement']==\"Cash Flow Statement\"]['Title'])\r\n            fin_metric_pos = urls_cf.index(\"{}\".format(url_fin_metric))\r\n\r\n            fin_statement_dir = \"Cash Flow Statement\"\r\n        else:\r\n            pass\r\n        fin_statement_cols = titles_bs\r\n        cols = titles_bs\r\n        fin_metric_title = fin_statement_cols[fin_metric_pos]\r\n\r\n        csv_file = glob.glob(\"Charts_TenDollarData/financial_statements/data/Historical Financial Statements/*/year/{}/*~{}~*\".format(fin_statement_dir, url_symbol.upper()))[-1]\r\n\r\n        df = pd.read_csv(csv_file) #.format(\"NLOK\"))[-1]\r\n        # df = df[df['date'].notna()]#fillna(method='ffill')\r\n        df = df[0:].iloc[::-1]#.dropna()\r\n        #region Pandas data manipulation\r\n        df = df\r\n        matching_row = fin_statements_matching[fin_statements_matching['URL']==\"{}\".format(url_fin_metric)]\r\n        fin_metric_title = list(matching_row['Title'])[0]\r\n        fin_metric_name = list(matching_row['Name'])[0]\r\n        print(\"fin_metric_name\", fin_metric_name)\r\n        print(\"fin metric name\", fin_metric_name)\r\n        df = df.dropna(subset=[\"{}\".format(fin_metric_name)]) #.fillna(0)#.fillna(method='bfill')\r\n        df = df[df[\"{}\".format(fin_metric_name)] != 0]\r\n        print(\"goodwill\")\r\n        print(df)\r\n        sorted_metric = df[\"{}\".format(fin_metric_name)].sort_values()\r\n        lifetime_sum_all_metric = df[\"{}\".format(fin_metric_name)].sum()\r\n        lifetime_sum_all_metric = magnitude_num(lifetime_sum_all_metric,currency_symbol)        \r\n        print(\"lifetime passed\")\r\n\r\n\r\n    else:\r\n        \r\n        currency_symbol = \"\"\r\n        fin_dir = [\"Income Statement\",\"Balance Sheet\",\"Cash Flow Statement\"]\r\n        fin_df_list = []\r\n        for x in fin_dir:\r\n            fin_file = glob.glob(\"Charts_TenDollarData/financial_statements/data/Historical Financial Statements/*/year/{}/*~{}~*\".format(x, url_symbol.upper()))[-1]\r\n            fin_df = pd.read_csv(fin_file)\r\n            fin_df_list.append(fin_df)\r\n        df_merge_is_bs = pd.merge(fin_df_list[0],fin_df_list[1],how=\"inner\", on=\"date\")\r\n        # df\r\n        # df_merge cols\r\n        df_merge = pd.merge(df_merge_is_bs,fin_df_list[2],how=\"inner\", on=\"date\")\r\n        df_merge = df_merge[fin_statement_raw_names]\r\n        \r\n        df_merge.columns = fin_statement_renamed_cols\r\n        df = df_merge\r\n\r\n        df['ffo_math']=df['net_income'] + df['d_n_a'] + df['sales_maturities_of_investments'] + df['purchase_of_investments'] + df['investments_in_pp_n_e'] + df['acquisitions_net']\r\n        df['book_value_math']=df['total_assets'].dropna()-df['total_liabilities'].dropna()\r\n        df['ebit_math']=df['ebitda_non'] - df['d_n_a']\r\n        df['working_capital_math']= df['total_current_assets'] - df['total_current_liabilities']\r\n\r\n        df['quick_assets_math']=df['cash_non']+df['short_term_investments']+df['accounts_receivable']\r\n        df['quick_ratio_math']=df['total_current_assets'] - df['inventory']\r\n        metric_name = url_to_metric_map['net-working-capital-ratio']\r\n\r\n        # url_fin_metric = 'net-working-capital-ratio'\r\n\r\n        fin_metric_title = url_to_name_map[url_fin_metric]\r\n        fin_metric_name = url_to_var_name_map[url_fin_metric]\r\n        metric_history = metric_to_formula_map(df,metric_name)\r\n        sorted_metric = metric_history.sort_values(ascending=True)\r\n        # sorted_metric(int(len(sorted_metric)*(n/100)))\r\n        lifetime_sum_all_metric = \"\"\r\n        lifetime_sum_all_metric = \"\"\r\n        df = df\r\n        df[\"{}\".format(fin_metric_name)] = metric_history\r\n    \r\n    quarters = round(len(sorted_metric)/4)\r\n    bottom_25 = sorted_metric[len(sorted_metric)-1-quarters]\r\n    top_25 = sorted_metric[quarters-1]\r\n    max_metric = sorted_metric.max()\r\n    min_metric = sorted_metric.min()\r\n    mean = sorted_metric.mean()\r\n    std_dev = sorted_metric.std()\r\n    \r\n    std_dev_pct = abs((std_dev-mean)/mean)*100\r\n    \r\n    std_dev_abs = std_dev_pct * mean/100\r\n    std_dev_abs = magnitude_num(std_dev_abs, currency_symbol)\r\n    \r\n    std_dev_str = \"+/-{}%\".format(round(std_dev_pct,1))\r\n    std_dev_abs_str = \"+/-{}\".format(std_dev_abs)\r\n    \r\n    mean_str = magnitude_num(mean, currency_symbol)\r\n    max_str = magnitude_num(max_metric, currency_symbol)\r\n    min_str = magnitude_num(min_metric, currency_symbol)\r\n    bottom_25_str = magnitude_num(bottom_25, currency_symbol)\r\n    top_25_str = magnitude_num(top_25, currency_symbol)\r\n    \r\n    num_years = len(sorted_metric)\r\n    earliest_year = list((df['date'].astype(str).str[0:4]))[0]    \r\n    latest_year = list((df['date'].astype(str).str[0:4]))[-1]    # average_abs_chg = latest_metric-earliest_metric\r\n    earliest_metric = list(df[\"{}\".format(fin_metric_name)])[0]\r\n    latest_metric = list(df[\"{}\".format(fin_metric_name)])[-1]\r\n    print(\"latest num\", latest_metric)\r\n    pct_chg = (latest_metric - earliest_metric)/earliest_metric\r\n    historical_pct_chg = str(round(pct_chg*100, 1))\r\n    annual_pct_chg = str(round((10*(pct_chg*100)**(1/num_years)), 1))\r\n\r\n    if pct_chg>=0:\r\n        hist_pct_chg_str = \"+{}%\".format(historical_pct_chg)\r\n        annual_pct_chg_str = \"+{}%\".format(annual_pct_chg)\r\n    elif pct_chg<0:\r\n        hist_pct_chg_str = \"-{}%\".format(historical_pct_chg)\r\n        annual_pct_chg_str = \"-{}%\".format(annual_pct_chg)\r\n    else:\r\n        hist_pct_chg_str = \"\"\r\n        annual_pct_chg_str = \"\"\r\n    historical_pct_chg = hist_pct_chg_str\r\n    annual_pct_chg = annual_pct_chg_str\r\n    max_min_pct_diff = ((max_metric-min_metric)/min_metric)\r\n\r\n    if max_min_pct_diff>=0:\r\n        max_min_pct_diff_str = \"+{}%\".format(round(max_min_pct_diff)*100,1)\r\n    elif max_min_pct_diff<0:\r\n        max_min_pct_diff_str = \"-{}%\".format(round(max_min_pct_diff)*100,1)\r\n    else:\r\n        max_min_pct_diff_str = \"\"\r\n    \r\n    df = df.drop(['Quarter & Year', 'Unnamed: 0','symbol','fillingDate','acceptedDate','period','link'],axis=1, errors='ignore')\r\n\r\n    \r\n    print(\"list 5 \", df)\r\n    for x in reversed(titles_bs):\r\n        if x in titles_list:\r\n            titles_bs.remove(x)                \r\n    titles_bs.append('Quarter & Year') \r\n    df['Quarter & Year'] =(df['date'].astype(str).str[0:4]).astype(int)\r\n    # df = df.drop(['date'],axis=1, errors='ignore')\r\n    print(\"titles_bs\",titles_bs)\r\n    print(\"list_fin_statement\",list(df))\r\n    titles_bs.insert(0,\"date\")\r\n    df.columns = titles_bs\r\n    df = df\r\n\r\n\r\n\r\n    df = df[cols]\r\n\r\n    df.index = df['Quarter & Year']\r\n    print(\"1st title\",fin_metric_title)\r\n    million = 1000000\r\n    billion = 1000000000\r\n    fin_metric_history = df['{}'.format(fin_metric_title)]\r\n    print(\"list 6 \", df)\r\n    if list(fin_metric_history)[0]  > billion:\r\n        # df['{}'.format(fin_metric_title)] = (fin_metric_history/billion).round(decimals=2)\r\n        pass\r\n    elif list(fin_metric_history)[0]  > million:\r\n        # df['{}'.format(fin_metric_title)] = (fin_metric_history/million).round(decimals=2)\r\n\r\n        pass\r\n    else:\r\n        # df['{}'.format(fin_metric_title)] = (fin_metric_history).round(decimals=2)\r\n        pass\r\n\r\n    df_pct_chg = df\r\n    pct_chg_cols = (df.select_dtypes(include=['number']).pct_change(-1))\r\n    df_pct_chg_str = df_pct_chg.drop(list(pct_chg_cols), axis=1)\r\n    df_pct_chg = df_pct_chg_str.join(pct_chg_cols)[list(df)]\r\n\r\n    pd.set_option('display.float_format', '{:.2f}'.format)\r\n    df_pct_chg_t = df_pct_chg.transpose()\r\n    df_pct_chg_t.columns = list(df_pct_chg['Quarter & Year'])\r\n    df_pct_chg_t = df_pct_chg_t.iloc[1:]\r\n\r\n    df_pct_chg_t = df_pct_chg.transpose()\r\n    df_pct_chg_t.columns = list(df_pct_chg['Quarter & Year'])\r\n    df_pct_chg_t = df_pct_chg_t.iloc[1:]\r\n    df_pct_chg_t['']=df_pct_chg_t.index\r\n    df_pct_chg_t.index = range(len(df_pct_chg_t))\r\n\r\n    cols = list(df_pct_chg_t.columns)\r\n    cols = [cols[-1]] + cols[:-1]\r\n    df_pct_chg_t = df_pct_chg_t[cols]\r\n\r\n\r\n    df_t = df.transpose()\r\n    df_t.columns = list(df['Quarter & Year'])\r\n    df_t = df_t.iloc[1:]\r\n    df_t['']=df_t.index\r\n    df_t.index = range(len(df_t))\r\n\r\n    cols = list(df_t.columns)\r\n    cols = [cols[-1]] + cols[:-1]\r\n    df_t = df_t[cols]\r\n    #endregion\r\n\r\n    df_pct = df_pct_chg_t.to_html().replace('<table','<table class=\"df_tableBoot\" id=\"df_myTable1\"')# dt-responsive\" id=\"df_myTable\"')\r\n\r\n    df_t = df_t[df_t.columns[::-1]]\r\n    cols = list(df_t.columns)\r\n    cols = [cols[-1]] + cols[:-1]\r\n    df_t = df_t[cols]\r\n\r\n\r\n    def isnumber(x):\r\n        try:\r\n            float(x)\r\n            return True\r\n        except:\r\n            return False\r\n    df_n = df[df.applymap(isnumber)]\r\n    df_n[df_n < 2] = np.nan\r\n    df_n_sum = pd.DataFrame(df_n.sum())\r\n    df_n_sum[df_n_sum == 0] = \"\"\r\n    new_header = df_n_sum.iloc[0] #grab the first row for the header\r\n    df_n_sum = df_n_sum[1:] #take the data less the header row\r\n    df_n_sum.columns = new_header #set the header row as the df header\r\n    df_n_sum.index = range(len(df_n_sum))\r\n    df_t = pd.merge(df_n_sum, df_t, left_index=True, right_index=True,suffixes=('Total: {} - {}'.format(latest_year,earliest_year), 'Line Items'))\r\n    df_t = df_t[0:25]\r\n\r\n\r\n\r\n    col_list = []\r\n    n=0\r\n    while n<len(list(df_t))-0:\r\n        if n<6:\r\n                col_item = '<col id=\"col_item_{}\" class=\"col_item_class first_7_col\">'.format(n)\r\n        else:\r\n            col_item = '<col id=\"col_item_{}\" class=\"col_item_class\">'.format(n)\r\n        col_list.append(col_item)\r\n        n+=1\r\n    col_list_str = ''.join(map(str, col_list))\r\n    df_html = df_t.to_html().replace('border=\"1\" class=\"dataframe\">','class=\"df_tableBoot\" id=\"df_myTable\" border=\"1\" class=\"dataframe\"><colgroup>{}</colgroup>'.format(col_list_str))\r\n    # df_table_html = df_fin_statement[['{}'.format(fin_metric_title)]].iloc[::-1].transpose().to_html()#.replace(\"\\n\",\"\")\r\n    df_tall = df.iloc[::-1]\r\n    # df_tall.index = df['Quarter & Year']\r\n    # df_tall = df.index.shift(-1)\r\n    # df_tall = df_tall.reset_index()\r\n    print(\"list 7 \", fin_metric_title)\r\n    df_html_tall = df_tall[['{}'.format('Quarter & Year'),'{}'.format(fin_metric_title)]].to_html(index=False)\r\n    df_html_tall = df_html_tall.replace('border=\"1\" class=\"dataframe\">','class=\"abc\" id=\"df_myTable\" border=\"1\" class=\"dataframe\">')#.replace(\"'\",\"\")\r\n    # df_html_tall = df_html_tall.replace(\"\\n\",\"\")\r\n    df_html_tall = df_html_tall.replace(\"\\n\",\"\")\r\n    df_html_tall = df_html_tall.replace(\"{}\".format(\"[\"),\"\")\r\n    df_html_tall = df_html_tall #render_template_string(df_html_tall)\r\n    #  df_html_tall = df_html_tall.replace(\"\\n\",\"\")\r\n    # df_html_tall.replace(\"\\n\",'\">')\r\n    # https://stackoverflow.com/questions/39599802/python-conditionally-add-class-to-td-tags-in-html-table\r\n    df_html_tall = df_html_tall.replace('<td>','<td class=\"td_fin_statement_class fin_statement_class\">')\r\n    df_html_tall = df_html_tall.replace('<th>','<th class=\"th_fin_statement_class fin_statement_class\">')\r\n    df_html_tall = df_html_tall.replace('<tr>','<tr class=\"tr_fin_statement_class fin_statement_class\">')\r\n    df_html_tall = df_html_tall[0:]\r\n    print(\"list 8 \", fin_metric_title)\r\n    df_html = df_html.replace('<td>','<td class=\"td_fin_statement_class fin_statement_class\">')\r\n    df_html = df_html.replace('<th>','<th class=\"th_fin_statement_class fin_statement_class\">')\r\n    df_html = df_html.replace('<tr>','<tr class=\"tr_fin_statement_class fin_statement_class\">')\r\n    \r\n    # df = df[[\"{}\".format(fin_metric_title)]].dropna() #.fillna(0)#.fillna(method='bfill')\r\n    df['date'] = pd.to_datetime(df['date']).values.astype(np.int64) // 10 ** 6\r\n    full_path = csv_file.split(' ~ ')\r\n    path = pathlib.PurePath(full_path[0])\r\n    \r\n    total_seconds = ((time.time() - start_time))\r\n    # print(\"list 9 \", df_tall)\r\n    print(\"9 title\", fin_metric_title)\r\n    df_table_html = df_tall[['{}'.format(fin_metric_title)]].iloc[::-1].transpose().to_html()#.replace(\"\\n\",\"\")\r\n    present_num = magnitude_num(int(latest_metric),currency_symbol)\r\n    print(\"last title 2\", fin_metric_title, \"list now \",list(df))\r\n    print(\"last \", list(df[\"{}\".format(fin_metric_title)])[-1])\r\n    latest_metric = \"${}\".format(list(df[\"{}\".format(fin_metric_title)])[0])\r\n    print(\"latest_num 2\", df['date'].to_list(),\"present_num 2\", present_num)\r\n    print(\"Nothing took {} seconds\".format(time.time() - start_time))\r\n    labels = list(df['date'])\r\n    print(\"df json\", df[['date',\"{}\".format(fin_metric_title)]].to_numpy().tolist())\r\n    return render_template('current_ratio.html', company_symbol = profiles_dict['symbol'],\\\r\n                            company_long_name = profiles_dict['long name'],\\\r\n                            company_currency = profiles_dict['currency'],\\\r\n                            company_exchange = profiles_dict['exchange'],\\\r\n                            company_industry = profiles_dict['industry'],\\\r\n                            company_description = profiles_dict['description'],\\\r\n                            company_sector = profiles_dict['sector'],\\\r\n                            company_country = profiles_dict['country'],\\\r\n                            company_ipo_date = profiles_dict['ipo date'],\\\r\n                            company_short_name = profiles_dict['short name'],\\\r\n                            company_industries = profiles_dict['Industries'],\\\r\n                            company_similar = profiles_dict['Similar Companies'],\\\r\n                            historical_pct_chg = historical_pct_chg,\\\r\n                            lifetime_sum_all_metric = lifetime_sum_all_metric,\\\r\n                            mean_str = mean_str,\\\r\n                            max_str = max_str,\\\r\n                            min_str = min_str,\\\r\n                            std_dev_str = std_dev_str,\\\r\n                            std_dev_abs_str = std_dev_abs_str,\\\r\n                            bottom_25_str = bottom_25_str,\\\r\n                            top_25_str = top_25_str,\\\r\n                            earliest_year = earliest_year,\\\r\n                            latest_year = latest_year,\\\r\n                            earliest_metric = earliest_metric,\\\r\n                            latest_metric = latest_metric,\\\r\n                            present_num = present_num,\\\r\n                            max_min_pct_diff_str = max_min_pct_diff_str, df_bs_table_html = [df_table_html],df_html_tall = [df_html_tall],fin_metric_name = fin_metric_title,\\\r\n                            df_date = df['date'].to_list(),\\\r\n                            # df_rev = df[\"{}\".format(fin_metric_name)].to_list(),\\\r\n                            df_json  =df[['date',\"{}\".format(fin_metric_title)]].to_numpy().tolist(),\\\r\n                            table_pct = [df_pct],\\\r\n                            tables=[df_html],\\\r\n                            titles=df.columns.values,\\\r\n                            total_time=total_seconds,\\\r\n                            place_name=url_symbol,\\\r\n                            max=17000,\\\r\n                            labels=labels,\\\r\n                            annual_pct_chg = annual_pct_chg,\\\r\n                            # values=values\r\n                            )\r\n\r\n\r\n@charts.route('/test/<url_symbol>', methods=['POST', 'GET'])\r\n# @cache.cached(timeout=5)\r\ndef fin_test(url_symbol):\r\n    # values = list(FS(\"IS\",\"AAPL\")['Beginning Price'])[0:19]\r\n\r\n\r\n    return render_template('financial_statements.html',\r\n\r\n     df_html=FS(\"IS\",\"AAPL\").df_html(),\r\n     tables=FS(\"IS\",\"AAPL\").df_values()['df_table'],\r\n     table_pct = FS(\"IS\",\"AAPL\").df_values()['df_table_pct'],\r\n     df_date = FS(\"IS\",\"AAPL\").df_values()['chart_x_dates'],\r\n     df_rev = FS(\"IS\",\"AAPL\").df_values()['chart_y_revenue'],\r\n     df_json = FS(\"IS\",\"AAPL\").df_values()['df_json'],\r\n     titles=FS(\"IS\",\"AAPL\").df_values()['df_titles'],\r\n     labels = FS(\"IS\",\"AAPL\").df_labels(),\r\n     values=FS(\"IS\",\"AAPL\").df_price(),\r\n     place_name=url_symbol, max=17000,\r\n     )",
  "isVisible": true
}