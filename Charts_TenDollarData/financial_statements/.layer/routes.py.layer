{
  "layer0": "\r\n# mark: top\r\n\r\n# https://github.com/ptmcg/littletable\r\n    # https://github.com/sunary/flask-optimize\r\n    # https://github.com/h2oai/datatable\r\n    # https://github.com/derekeder/csv-to-html-table\r\n    # https://github.com/vividvilla/csvtotable\r\n    # https://medium.com/casual-inference/the-most-time-efficient-ways-to-import-csv-data-in-python-cc159b44063d\r\n    # https://blog.esciencecenter.nl/irregular-data-in-pandas-using-c-88ce311cb9ef\r\n    # all the imports - https://flask.palletsprojects.com/en/0.12.x/tutorial/setup/#tutorial-setup\r\n    # https://stackoverflow.com/questions/20646822/how-to-serve-static-files-in-flask\r\n    # https://stackoverflow.com/questions/20646822/how-to-serve-static-files-in-flask\r\n    # https://stackoverflow.com/questions/52644035/how-to-show-a-pandas-dataframe-into-a-existing-flask-html-table\r\n    # https://stackoverflow.com/questions/20906474/import-multiple-csv-files-into-pandas-and-concatenate-into-one-dataframe\r\n    # https://stackoverflow.com/questions/17134942/pandas-dataframe-output-end-of-csv\r\n    # http://www.compjour.org/lessons/flask-single-page/multiple-dynamic-routes-in-flask/\r\n\r\n# Flask-DebugToolbar\r\nimport os\r\nimport sqlite3\r\nimport pandas as pd\r\nimport glob\r\nimport pathlib\r\nimport time\r\nimport sys\r\n\r\n\r\nsys.path.append(os.path.join(os.path.dirname(__file__)))\r\n\r\n# from financial_statements.functions.pandas_extraction import FS\r\nfrom functions.pandas_extraction import FS\r\n\r\n\r\nimport numpy as np\r\nimport functools\r\nfrom datetime import datetime\r\nfrom string import Template\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_caching import Cache\r\nimport logging\r\nfrom flask import request, session, g, redirect, url_for, abort, render_template, flash, Blueprint\r\ncache = Cache()\r\n# app = Flask(__name__)\r\nfrom string import Template\r\n\r\n# https://stackoverflow.com/questions/17309889/how-to-debug-a-flask-app\r\n# from flask_debugtoolbar import DebugToolbarExtension\r\n# app.debug = True\r\n# toolbar = DebugToolbarExtension(app)\r\n\r\n\r\n# app.config['CACHE_TYPE'] = 'simple'\r\n# cache.init_app(app)\r\n# blueprint = Blueprint('stock', __name__, static_url_path='', static_folder='stock')\r\ncharts = Blueprint('charts', __name__)\r\n# app.register_blueprint(blueprint)\r\n\r\n\r\n\r\n\r\n@charts.route('/', methods=['POST', 'GET'])\r\n@charts.route(\"/home\")\r\ndef index():\r\n\r\n    return render_template('index.html')\r\n\r\n\r\n\r\n@charts.route('/<some_place>-stock/<name_url>/<urilist>', methods=['POST', 'GET']) # WORKS\r\ndef current_ratio(urilist,name_url,some_place): # WORKS\r\n# def current_ratio(urilist,url_symbol_name):\r\n    # print(url_symbol_name,\" yee haw\")\r\n    # some_place = url_symbol_name.split(\"/\")[0].upper()\r\n    print(some_place,\" yee haw\")\r\n    # short_name = short_name\r\n    url_is_list = [ 'revenue_sales',\r\n                'cost_of_sales_cost_of_revenue_cost_of_goods_sold',\r\n                'gross_profit_gross_income',\r\n                'gross_income_ratio_gross_profit_ratio',\r\n                'r%26d_research_and_development_expenses',\r\n                'sg%26a_sga_sales_general_and_administrative_expenses',\r\n                'other_expenses',\r\n                'operating_expenses',\r\n                '',\r\n                'interest_expense',\r\n                'd%26a_depreciation_and_amortization',\r\n                'ebitda',\r\n                'ebitda_ratio',\r\n                'operating_income',\r\n                'operating_income_ratio',\r\n                'other_income_other_expenses_net',\r\n                'income_before_tax_provisions',\r\n                'income_before_tax_ratio',\r\n                'income_tax_expense_provisions',\r\n                'net_income',\r\n                'net_income_ratio',\r\n                'eps_earnings_per_share',\r\n                'eps_earnings_per_share_diluted',\r\n                'shares_outstanding_for_eps',\r\n                'shares_outstanding_weighted_for_eps',]\r\n    url_bs_list = ['quarter_and_year','cash_and_cash_equivalents',\r\n                'short_term_investments',\r\n                'cash_and_short_term_investments',\r\n                'net_receivables',\r\n                'inventory',\r\n                'other_current_assets',\r\n                'total_current_assets',\r\n                'pp_and_e',\r\n                'goodwill',\r\n                'intangible_assets',\r\n                'goodwill_and_intangible_assets',\r\n                'long_term_investments',\r\n                'tax_assets',\r\n                'other_non_current_assets',\r\n                'total_non_current_assets',\r\n                'other_assets',\r\n                'total_assets',\r\n                'accounts_payables',\r\n                'short_term_debt',\r\n                'tax_payables',\r\n                'deferred_revenue',\r\n                'other_current_liabilities',\r\n                'total_current_liabilities',\r\n                'long_term_debt',\r\n                'deferred_revenue_non_current',\r\n                'deferred_tax_liabilities_non_current',\r\n                'other_non_current_liabilities',\r\n                'total_non_current_liabilities',\r\n                'other_liabilities',\r\n                'total_liabilities',\r\n                'common_stock',\r\n                'retained_earnings',\r\n                'accumulated_other_comprehensive_income_loss',\r\n                'other_total_stockholders_equity',\r\n                'total_stockholders_equity',\r\n                'total_liabilities_and_stockholders_equity',\r\n                'total_investments',\r\n                'total_debt',\r\n                'net_debt','final_link']\r\n    url_cf_list = ['net_income',\r\n                    'depreciation_and_amortization',\r\n                    'deferred_income_tax',\r\n                    'stock_based_compensation',\r\n                    'change_in_working_capital',\r\n                    'accounts_receivable',\r\n                    'inventory',\r\n                    'accounts_payables',\r\n                    'other_working_capital',\r\n                    'other_non_cash_items',\r\n                    'net_cash_provided_by_operating_activities',\r\n                    'investments_in_property_plant_and_equipment',\r\n                    'acquisitions_net',\r\n                    'purchases_of_investments',\r\n                    'sales_maturities_of_investments',\r\n                    'other_investing_activities',\r\n                    'net_cash_used_for_investing_activities',\r\n                    'debt_repayment',\r\n                    'common_stock_issued',\r\n                    'common_stock_repurchased',\r\n                    'dividends_paid',\r\n                    'other_financing_activities',\r\n                    'net_cash_used_provided_by_financing_activities',\r\n                    'effect_of_forex_changes_on_cash',\r\n                    'net_change_in_cash',\r\n                    'cash_at_end_of_period',\r\n                    'cash_at_beginning_of_period',\r\n                    'operating_cash_flow',\r\n                    'capital_expenditure',\r\n                    'free_cash_flow']\r\n\r\n    company_profiles = pd.read_csv(\"reference_Data/Company_Profiles.csv\")#, encoding='cp1252')\r\n    company_profiles_col = ['symbol',\r\n                            'long name',\r\n                            'currency',\r\n                            'exchange',\r\n                            'industry',\r\n                            'description',\r\n                            'sector',\r\n                            'country',\r\n                            'ipo date',\r\n                            'short name']\r\n    company_profiles = company_profiles[company_profiles_col]    \r\n    profiles_dict = {}\r\n    profiles_value = company_profiles[company_profiles['symbol']==\"{}\".format(some_place.upper())].values.tolist()[0]\r\n    for n, profiles_col in enumerate(company_profiles_col):\r\n        key = profiles_col\r\n        value = profiles_value[n]\r\n        profiles_dict[key] = value \r\n    \r\n    if \"{}\".format(urilist) in url_is_list:\r\n        fin_statement_dir = \"Income Statement\"\r\n    elif \"{}\".format(urilist) in url_bs_list:\r\n        fin_metric_pos = url_bs_list.index(\"{}\".format(urilist))\r\n        fin_statement_dir = \"Balance Sheet\"\r\n        fin_statement_cols = ['Cash and Cash Equivalents',\r\n                            'Short Term Investments',\r\n                            'Cash And Short-Term Investments',\r\n                            'Net Receivables',\r\n                            'Inventory',\r\n                            'Other Current Assets',\r\n                            'Total Current Assets',\r\n                            'PP&E',\r\n                            'Goodwill',\r\n                            'Intangible Assets',\r\n                            'Goodwill and Intangible Assets',\r\n                            'Long-term Investments',\r\n                            'Tax Assets',\r\n                            'Other Non-Current Assets',\r\n                            'Total Non-Current Assets',\r\n                            'Other Assets',\r\n                            'TotalAssets',\r\n                            'Accounts Payables',\r\n                            'Short-term Debt',\r\n                            'Tax Payables',\r\n                            'Deferred Revenue',\r\n                            'Other Current Liabilities',\r\n                            'Total Current Liabilities',\r\n                            'Long-term Debt',\r\n                            'Deferred Revenue Non-Current',\r\n                            'Deferred Tax Liabilities Non-Current',\r\n                            'Other Non-Current Liabilities',\r\n                            'Total Non-Current Liabilities',\r\n                            'Other Liabilities',\r\n                            'Total Liabilities',\r\n                            'Common Stock',\r\n                            'Retained Earnings',\r\n                            'Accumulated Other Comprehensive Income Loss',\r\n                            'Other Total Stockholders Equity',\r\n                            'Total Stockholders Equity',\r\n                            'Total Liabilities & Stockholders Equity',\r\n                            'Total Investments',\r\n                            'Total Debt',\r\n                            'Net Debt',\r\n                            'finalLink','Quarter & Year']\r\n        cols = ['Quarter & Year',\r\n                'Cash and Cash Equivalents',\r\n                'Short Term Investments',\r\n                'Cash And Short-Term Investments',\r\n                'Net Receivables',\r\n                'Inventory',\r\n                'Other Current Assets',\r\n                'Total Current Assets',\r\n                'PP&E',\r\n                'Goodwill',\r\n                'Intangible Assets',\r\n                'Goodwill and Intangible Assets',\r\n                'Long-term Investments',\r\n                'Tax Assets',\r\n                'Other Non-Current Assets',\r\n                'Total Non-Current Assets',\r\n                'Other Assets',\r\n                'TotalAssets',\r\n                'Accounts Payables',\r\n                'Short-term Debt',\r\n                'Tax Payables',\r\n                'Deferred Revenue',\r\n                'Other Current Liabilities',\r\n                'Total Current Liabilities',\r\n                'Long-term Debt',\r\n                'Deferred Revenue Non-Current',\r\n                'Deferred Tax Liabilities Non-Current',\r\n                'Other Non-Current Liabilities',\r\n                'Total Non-Current Liabilities',\r\n                'Other Liabilities',\r\n                'Total Liabilities',\r\n                'Common Stock',\r\n                'Retained Earnings',\r\n                'Accumulated Other Comprehensive Income Loss',\r\n                'Other Total Stockholders Equity',\r\n                'Total Stockholders Equity',\r\n                'Total Liabilities & Stockholders Equity',\r\n                'Total Investments',\r\n                'Total Debt',\r\n                'Net Debt',\r\n                'finalLink']        \r\n        fin_metric_name = fin_statement_cols[fin_metric_pos-1]\r\n        \r\n    elif \"{}\".format(urilist) in url_cf_list:\r\n        fin_statement_dir = \"Cash Flow Statement\"\r\n        \r\n    else:\r\n        pass\r\n    # pragma adasdadsd\r\n    # MARK: asdas\r\n    start_time = time.time()\r\n    csv_file = glob.glob(\"Charts_TenDollarData/financial_statements/data/Historical Financial Statements/*/year/{}/*~{}~*\".format(fin_statement_dir, some_place.upper()))[-1]\r\n    # csv_file = glob.glob(\"../Charts_TenDollarData/financial_statements/data/Historical Financial Statements/*/year/*/*~{}~*\".format(some_place))[-1]\r\n    df = pd.read_csv(csv_file) #.format(\"NLOK\"))[-1]\r\n    # df = df[df['date'].notna()]#fillna(method='ffill')\r\n    df = df[0:].iloc[::-1]#.dropna()\r\n    df_bs = df\r\n    #region Pandas data manipulation\r\n    # df_bs['Quarter & Year'] = df_bs['period']+\" \"+(df_bs['date'].astype(str).str[0:4])#((df_bs['date'].astype(str).str[0:4].astype(int))-1).astype(str)\r\n    df_bs['Quarter & Year'] =(df_bs['date'].astype(str).str[0:4]).astype(int)#((df_bs['date'].astype(str).str[0:4].astype(int))-1)\r\n    latest_year = list((df_bs['date'].astype(str).str[0:4]))[0]\r\n    earliest_year = list((df_bs['date'].astype(str).str[0:4]))[-1]\r\n\r\n    df_bs = df_bs.drop([ 'Unnamed: 0','date',\r\n    'symbol',\r\n    'fillingDate','period','link','acceptedDate'],axis=1)\r\n    \r\n    df_bs.columns = fin_statement_cols\r\n    # for col in df_bs.columns:\r\n    #     if len(df_bs[col].unique()) == 1:\r\n    #         df_bs.drop(col,inplace=True,axis=1)\r\n\r\n\r\n    df_bs = df_bs[cols]\r\n\r\n    df_bs.index = df_bs['Quarter & Year']\r\n    \r\n    million = 1000000\r\n    billion = 1000000000\r\n    fin_metric_history = df_bs['{}'.format(fin_metric_name)]\r\n    if list(fin_metric_history)[0]  > billion:\r\n        print()\r\n        df_bs['{}'.format(fin_metric_name)] = (fin_metric_history/billion).round(decimals=2)\r\n        df_bs_table_html = df_bs[['{}'.format(fin_metric_name)]].iloc[::-1].transpose().to_html().replace(\"'\",\"\")\r\n        \r\n    elif fin_metric_history[0]  > million:\r\n        pass\r\n    else:\r\n        pass\r\n\r\n    df_bs_pct_chg = df_bs\r\n    pct_chg_cols = (df_bs.select_dtypes(include=['number']).pct_change(-1))\r\n    df_bs_str = df_bs_pct_chg.drop(list(pct_chg_cols), axis=1)\r\n    df_bs_pct_chg = df_bs_str.join(pct_chg_cols)[list(df_bs)]\r\n\r\n    pd.set_option('display.float_format', '{:.2f}'.format)\r\n    df_bs_pct_chg_t = df_bs_pct_chg.transpose()\r\n    df_bs_pct_chg_t.columns = list(df_bs_pct_chg['Quarter & Year'])\r\n    df_bs_pct_chg_t = df_bs_pct_chg_t.iloc[1:]\r\n\r\n    df_bs_pct_chg_t = df_bs_pct_chg.transpose()\r\n    df_bs_pct_chg_t.columns = list(df_bs_pct_chg['Quarter & Year'])\r\n    df_bs_pct_chg_t = df_bs_pct_chg_t.iloc[1:]\r\n    df_bs_pct_chg_t['']=df_bs_pct_chg_t.index\r\n    df_bs_pct_chg_t.index = range(len(df_bs_pct_chg_t))\r\n\r\n    cols = list(df_bs_pct_chg_t.columns)\r\n    cols = [cols[-1]] + cols[:-1]\r\n    df_bs_pct_chg_t = df_bs_pct_chg_t[cols]\r\n\r\n\r\n    df_bs_t = df_bs.transpose()\r\n    df_bs_t.columns = list(df_bs['Quarter & Year'])\r\n    df_bs_t = df_bs_t.iloc[1:]\r\n    df_bs_t['']=df_bs_t.index\r\n    df_bs_t.index = range(len(df_bs_t))\r\n\r\n    cols = list(df_bs_t.columns)\r\n    cols = [cols[-1]] + cols[:-1]\r\n    df_bs_t = df_bs_t[cols]\r\n    #endregion\r\n\r\n    df_pct = df_bs_pct_chg_t.to_html().replace('<table','<table class=\"df_tableBoot\" id=\"df_myTable1\"')# dt-responsive\" id=\"df_myTable\"')\r\n\r\n    df_bs_t = df_bs_t[df_bs_t.columns[::-1]]\r\n    cols = list(df_bs_t.columns)\r\n    cols = [cols[-1]] + cols[:-1]\r\n    df_bs_t = df_bs_t[cols]\r\n    # df_html = df_bs_t.to_html().replace('<table','<table class=\"df_tableBoot\" id=\"df_myTable2\"')# dt-responsive\" id=\"df_myTable\"')\r\n\r\n\r\n\r\n    def isnumber(x):\r\n        try:\r\n            float(x)\r\n            return True\r\n        except:\r\n            return False\r\n    df_bs_n = df_bs[df_bs.applymap(isnumber)]\r\n    df_bs_n[df_bs_n < 2] = np.nan\r\n    # pd.DataFrame(df_bs_n.sum())#axis=0))\r\n    df_bs_n_sum = pd.DataFrame(df_bs_n.sum())\r\n    df_bs_n_sum[df_bs_n_sum == 0] = \"\"\r\n    new_header = df_bs_n_sum.iloc[0] #grab the first row for the header\r\n    df_bs_n_sum = df_bs_n_sum[1:] #take the data less the header row\r\n    df_bs_n_sum.columns = new_header #set the header row as the df header\r\n    df_bs_n_sum.index = range(len(df_bs_n_sum))\r\n    df_bs_t = pd.merge(df_bs_n_sum, df_bs_t, left_index=True, right_index=True,suffixes=('Total: {} - {}'.format(latest_year,earliest_year), 'Line Items'))\r\n    df_bs_t = df_bs_t[0:25]\r\n\r\n\r\n\r\n    col_list = []\r\n    n=0\r\n    while n<len(list(df_bs_t))-0:\r\n        if n<6:\r\n                col_item = '<col id=\"col_item_{}\" class=\"col_item_class first_7_col\">'.format(n)\r\n        else:\r\n            col_item = '<col id=\"col_item_{}\" class=\"col_item_class\">'.format(n)\r\n        col_list.append(col_item)\r\n        n+=1\r\n    col_list_str = ''.join(map(str, col_list))\r\n    df_html = df_bs_t.to_html().replace('border=\"1\" class=\"dataframe\">','class=\"df_tableBoot\" id=\"df_myTable\" border=\"1\" class=\"dataframe\"><colgroup>{}</colgroup>'.format(col_list_str))\r\n\r\n\r\n    df_html = df_html.replace('<td>','<td class=\"td_fin_statement_class fin_statement_class\">')\r\n    df_html = df_html.replace('<th>','<th class=\"th_fin_statement_class fin_statement_class\">')\r\n    df_html = df_html.replace('<tr>','<tr class=\"tr_fin_statement_class fin_statement_class\">')\r\n\r\n    df_html=df_html[0:]\r\n    df = df[['date','cashAndCashEquivalents']].dropna() #.fillna(0)#.fillna(method='bfill')\r\n\r\n    df['date'] = pd.to_datetime(df['date']).values.astype(np.int64) // 10 ** 6\r\n\r\n    full_path = csv_file.split(' ~ ')\r\n\r\n    path = pathlib.PurePath(full_path[0])\r\n    # asset_ticker = path.name #full_path[0].split(\"/\")\r\n    # asset_type = full_path[1]\r\n    # asset_name = full_path[-1]\r\n    print(\"Nothing took {} seconds\".format(time.time() - start_time))\r\n    total_seconds = ((time.time() - start_time))\r\n\r\n    labels = [\r\n        'JAN', 'FEB', 'MAR', 'APR',\r\n        'MAY', 'JUN', 'JUL', 'AUG',\r\n        'SEP', 'OCT', 'NOV', 'DEC'\r\n    ]\r\n    labels = list(df['date'])#[0:19]\r\n\r\n    values = [\r\n        967.67, 1190.89, 1079.75, 1349.19,\r\n        2328.91, 2504.28, 2873.83, 4764.87,\r\n        4349.29, 6458.30, 9907, 16297\r\n    ]\r\n\r\n    values = list(df['cashAndCashEquivalents'])#[0:19]\r\n\r\n    colors = [\r\n        \"#F7464A\", \"#46BFBD\", \"#FDB45C\", \"#FEDCBA\",\r\n        \"#ABCDEF\", \"#DDDDDD\", \"#ABCABC\", \"#4169E1\",\r\n        \"#C71585\", \"#FF4500\", \"#FEDCBA\", \"#46BFBD\"]\r\n    df_html\r\n    # return render_template('D:\\\\Cloud\\\\rclone\\\\OneDrive\\\\Web\\\\TenDollarData\\\\Charts_TenDollarData\\\\financial_statements\\\\templates\\\\fin_statements_bootstrapped.html',\r\n    return render_template('current_ratio.html', company_symbol = profiles_dict['symbol'],\\\r\n                            company_long_name = profiles_dict['long name'],\\\r\n                            company_currency = profiles_dict['currency'],\\\r\n                            company_exchange = profiles_dict['exchange'],\\\r\n                            company_industry = profiles_dict['industry'],\\\r\n                            company_description = profiles_dict['description'],\\\r\n                            company_sector = profiles_dict['sector'],\\\r\n                            company_country = profiles_dict['country'],\\\r\n                            company_ipo_date = profiles_dict['ipo date'],\\\r\n                            company_short_name = profiles_dict['short name'],\\\r\n    df_bs_table_html = [df_bs_table_html], fin_metric_name = fin_metric_name,\r\n     df_date = df['date'].to_list(), df_rev = df['cashAndCashEquivalents'].to_list(),\r\n     df_json  =df.to_numpy().tolist(), table_pct = [df_pct], tables=[df_html], titles=df.columns.values,\r\n\r\n\r\n\r\n\r\n\r\n     total_time=total_seconds, place_name=some_place, max=17000, labels=labels, values=values)\r\n\r\n\r\n@charts.route('/test/<some_place>', methods=['POST', 'GET'])\r\n# @cache.cached(timeout=5)\r\ndef fin_test(some_place):\r\n    # values = list(FS(\"IS\",\"AAPL\")['Beginning Price'])[0:19]\r\n\r\n\r\n    return render_template('financial_statements.html',\r\n\r\n     df_html=FS(\"IS\",\"AAPL\").df_html(),\r\n     tables=FS(\"IS\",\"AAPL\").df_values()['df_table'],\r\n     table_pct = FS(\"IS\",\"AAPL\").df_values()['df_table_pct'],\r\n     df_date = FS(\"IS\",\"AAPL\").df_values()['chart_x_dates'],\r\n     df_rev = FS(\"IS\",\"AAPL\").df_values()['chart_y_revenue'],\r\n     df_json = FS(\"IS\",\"AAPL\").df_values()['df_json'],\r\n     titles=FS(\"IS\",\"AAPL\").df_values()['df_titles'],\r\n     labels = FS(\"IS\",\"AAPL\").df_labels(),\r\n     values=FS(\"IS\",\"AAPL\").df_price(),\r\n     place_name=some_place, max=17000,\r\n     )\r\n\r\n\r\n",
  "layer1": "\r\n# mark: top\r\n\r\n# https://github.com/ptmcg/littletable\r\n    # https://github.com/sunary/flask-optimize\r\n    # https://github.com/h2oai/datatable\r\n    # https://github.com/derekeder/csv-to-html-table\r\n    # https://github.com/vividvilla/csvtotable\r\n    # https://medium.com/casual-inference/the-most-time-efficient-ways-to-import-csv-data-in-python-cc159b44063d\r\n    # https://blog.esciencecenter.nl/irregular-data-in-pandas-using-c-88ce311cb9ef\r\n    # all the imports - https://flask.palletsprojects.com/en/0.12.x/tutorial/setup/#tutorial-setup\r\n    # https://stackoverflow.com/questions/20646822/how-to-serve-static-files-in-flask\r\n    # https://stackoverflow.com/questions/20646822/how-to-serve-static-files-in-flask\r\n    # https://stackoverflow.com/questions/52644035/how-to-show-a-pandas-dataframe-into-a-existing-flask-html-table\r\n    # https://stackoverflow.com/questions/20906474/import-multiple-csv-files-into-pandas-and-concatenate-into-one-dataframe\r\n    # https://stackoverflow.com/questions/17134942/pandas-dataframe-output-end-of-csv\r\n    # http://www.compjour.org/lessons/flask-single-page/multiple-dynamic-routes-in-flask/\r\n\r\n# Flask-DebugToolbar\r\nimport os\r\nimport sqlite3\r\nimport pandas as pd\r\nimport glob\r\nimport pathlib\r\nimport time\r\nimport sys\r\n\r\n\r\nsys.path.append(os.path.join(os.path.dirname(__file__)))\r\n\r\n# from financial_statements.functions.pandas_extraction import FS\r\nfrom functions.pandas_extraction import FS\r\n\r\n\r\nimport numpy as np\r\nimport functools\r\nfrom datetime import datetime\r\nfrom string import Template\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_caching import Cache\r\nimport logging\r\nfrom flask import request, session, g, redirect, url_for, abort, render_template, flash, Blueprint\r\ncache = Cache()\r\n# app = Flask(__name__)\r\nfrom string import Template\r\n\r\n# https://stackoverflow.com/questions/17309889/how-to-debug-a-flask-app\r\n# from flask_debugtoolbar import DebugToolbarExtension\r\n# app.debug = True\r\n# toolbar = DebugToolbarExtension(app)\r\n\r\n\r\n# app.config['CACHE_TYPE'] = 'simple'\r\n# cache.init_app(app)\r\n# blueprint = Blueprint('stock', __name__, static_url_path='', static_folder='stock')\r\ncharts = Blueprint('charts', __name__)\r\n# app.register_blueprint(blueprint)\r\n\r\n\r\n\r\n\r\n@charts.route('/', methods=['POST', 'GET'])\r\n@charts.route(\"/home\")\r\ndef index():\r\n\r\n    return render_template('index.html')\r\n\r\n\r\n\r\n@charts.route('/<some_place>-stock/<name_url>/<urilist>', methods=['POST', 'GET']) # WORKS\r\ndef current_ratio(urilist,name_url,some_place): # WORKS\r\n# def current_ratio(urilist,url_symbol_name):\r\n    # print(url_symbol_name,\" yee haw\")\r\n    # some_place = url_symbol_name.split(\"/\")[0].upper()\r\n    print(some_place,\" yee haw\")\r\n    # short_name = short_name\r\n    url_is_list = [ 'revenue_sales',\r\n                'cost_of_sales_cost_of_revenue_cost_of_goods_sold',\r\n                'gross_profit_gross_income',\r\n                'gross_income_ratio_gross_profit_ratio',\r\n                'r%26d_research_and_development_expenses',\r\n                'sg%26a_sga_sales_general_and_administrative_expenses',\r\n                'other_expenses',\r\n                'operating_expenses',\r\n                '',\r\n                'interest_expense',\r\n                'd%26a_depreciation_and_amortization',\r\n                'ebitda',\r\n                'ebitda_ratio',\r\n                'operating_income',\r\n                'operating_income_ratio',\r\n                'other_income_other_expenses_net',\r\n                'income_before_tax_provisions',\r\n                'income_before_tax_ratio',\r\n                'income_tax_expense_provisions',\r\n                'net_income',\r\n                'net_income_ratio',\r\n                'eps_earnings_per_share',\r\n                'eps_earnings_per_share_diluted',\r\n                'shares_outstanding_for_eps',\r\n                'shares_outstanding_weighted_for_eps',]\r\n    url_bs_list = ['quarter_and_year','cash_and_cash_equivalents',\r\n                'short_term_investments',\r\n                'cash_and_short_term_investments',\r\n                'net_receivables',\r\n                'inventory',\r\n                'other_current_assets',\r\n                'total_current_assets',\r\n                'pp_and_e',\r\n                'goodwill',\r\n                'intangible_assets',\r\n                'goodwill_and_intangible_assets',\r\n                'long_term_investments',\r\n                'tax_assets',\r\n                'other_non_current_assets',\r\n                'total_non_current_assets',\r\n                'other_assets',\r\n                'total_assets',\r\n                'accounts_payables',\r\n                'short_term_debt',\r\n                'tax_payables',\r\n                'deferred_revenue',\r\n                'other_current_liabilities',\r\n                'total_current_liabilities',\r\n                'long_term_debt',\r\n                'deferred_revenue_non_current',\r\n                'deferred_tax_liabilities_non_current',\r\n                'other_non_current_liabilities',\r\n                'total_non_current_liabilities',\r\n                'other_liabilities',\r\n                'total_liabilities',\r\n                'common_stock',\r\n                'retained_earnings',\r\n                'accumulated_other_comprehensive_income_loss',\r\n                'other_total_stockholders_equity',\r\n                'total_stockholders_equity',\r\n                'total_liabilities_and_stockholders_equity',\r\n                'total_investments',\r\n                'total_debt',\r\n                'net_debt','final_link']\r\n    url_cf_list = ['net_income',\r\n                    'depreciation_and_amortization',\r\n                    'deferred_income_tax',\r\n                    'stock_based_compensation',\r\n                    'change_in_working_capital',\r\n                    'accounts_receivable',\r\n                    'inventory',\r\n                    'accounts_payables',\r\n                    'other_working_capital',\r\n                    'other_non_cash_items',\r\n                    'net_cash_provided_by_operating_activities',\r\n                    'investments_in_property_plant_and_equipment',\r\n                    'acquisitions_net',\r\n                    'purchases_of_investments',\r\n                    'sales_maturities_of_investments',\r\n                    'other_investing_activities',\r\n                    'net_cash_used_for_investing_activities',\r\n                    'debt_repayment',\r\n                    'common_stock_issued',\r\n                    'common_stock_repurchased',\r\n                    'dividends_paid',\r\n                    'other_financing_activities',\r\n                    'net_cash_used_provided_by_financing_activities',\r\n                    'effect_of_forex_changes_on_cash',\r\n                    'net_change_in_cash',\r\n                    'cash_at_end_of_period',\r\n                    'cash_at_beginning_of_period',\r\n                    'operating_cash_flow',\r\n                    'capital_expenditure',\r\n                    'free_cash_flow']\r\n\r\n    company_profiles = pd.read_csv(\"reference_Data/Company_Profiles.csv\")#, encoding='cp1252')\r\n    company_profiles_col = ['symbol',\r\n                            'long name',\r\n                            'currency',\r\n                            'exchange',\r\n                            'industry',\r\n                            'description',\r\n                            'sector',\r\n                            'country',\r\n                            'ipo date',\r\n                            'short name']\r\n    company_profiles = company_profiles[company_profiles_col]    \r\n    profiles_dict = {}\r\n    profiles_value = company_profiles[company_profiles['symbol']==\"{}\".format(some_place.upper())].values.tolist()[0]\r\n    for n, profiles_col in enumerate(company_profiles_col):\r\n        key = profiles_col\r\n        value = profiles_value[n]\r\n        profiles_dict[key] = value \r\n    \r\n    if \"{}\".format(urilist) in url_is_list:\r\n        fin_statement_dir = \"Income Statement\"\r\n    elif \"{}\".format(urilist) in url_bs_list:\r\n        fin_metric_pos = url_bs_list.index(\"{}\".format(urilist))\r\n        fin_statement_dir = \"Balance Sheet\"\r\n        fin_statement_cols = ['Cash and Cash Equivalents',\r\n                            'Short Term Investments',\r\n                            'Cash And Short-Term Investments',\r\n                            'Net Receivables',\r\n                            'Inventory',\r\n                            'Other Current Assets',\r\n                            'Total Current Assets',\r\n                            'PP&E',\r\n                            'Goodwill',\r\n                            'Intangible Assets',\r\n                            'Goodwill and Intangible Assets',\r\n                            'Long-term Investments',\r\n                            'Tax Assets',\r\n                            'Other Non-Current Assets',\r\n                            'Total Non-Current Assets',\r\n                            'Other Assets',\r\n                            'TotalAssets',\r\n                            'Accounts Payables',\r\n                            'Short-term Debt',\r\n                            'Tax Payables',\r\n                            'Deferred Revenue',\r\n                            'Other Current Liabilities',\r\n                            'Total Current Liabilities',\r\n                            'Long-term Debt',\r\n                            'Deferred Revenue Non-Current',\r\n                            'Deferred Tax Liabilities Non-Current',\r\n                            'Other Non-Current Liabilities',\r\n                            'Total Non-Current Liabilities',\r\n                            'Other Liabilities',\r\n                            'Total Liabilities',\r\n                            'Common Stock',\r\n                            'Retained Earnings',\r\n                            'Accumulated Other Comprehensive Income Loss',\r\n                            'Other Total Stockholders Equity',\r\n                            'Total Stockholders Equity',\r\n                            'Total Liabilities & Stockholders Equity',\r\n                            'Total Investments',\r\n                            'Total Debt',\r\n                            'Net Debt',\r\n                            'finalLink','Quarter & Year']\r\n        cols = ['Quarter & Year',\r\n                'Cash and Cash Equivalents',\r\n                'Short Term Investments',\r\n                'Cash And Short-Term Investments',\r\n                'Net Receivables',\r\n                'Inventory',\r\n                'Other Current Assets',\r\n                'Total Current Assets',\r\n                'PP&E',\r\n                'Goodwill',\r\n                'Intangible Assets',\r\n                'Goodwill and Intangible Assets',\r\n                'Long-term Investments',\r\n                'Tax Assets',\r\n                'Other Non-Current Assets',\r\n                'Total Non-Current Assets',\r\n                'Other Assets',\r\n                'TotalAssets',\r\n                'Accounts Payables',\r\n                'Short-term Debt',\r\n                'Tax Payables',\r\n                'Deferred Revenue',\r\n                'Other Current Liabilities',\r\n                'Total Current Liabilities',\r\n                'Long-term Debt',\r\n                'Deferred Revenue Non-Current',\r\n                'Deferred Tax Liabilities Non-Current',\r\n                'Other Non-Current Liabilities',\r\n                'Total Non-Current Liabilities',\r\n                'Other Liabilities',\r\n                'Total Liabilities',\r\n                'Common Stock',\r\n                'Retained Earnings',\r\n                'Accumulated Other Comprehensive Income Loss',\r\n                'Other Total Stockholders Equity',\r\n                'Total Stockholders Equity',\r\n                'Total Liabilities & Stockholders Equity',\r\n                'Total Investments',\r\n                'Total Debt',\r\n                'Net Debt',\r\n                'finalLink']        \r\n        fin_metric_name = fin_statement_cols[fin_metric_pos-1]\r\n        \r\n    elif \"{}\".format(urilist) in url_cf_list:\r\n        fin_statement_dir = \"Cash Flow Statement\"\r\n        \r\n    else:\r\n        pass\r\n    # pragma adasdadsd\r\n    # MARK: asdas\r\n    start_time = time.time()\r\n    csv_file = glob.glob(\"Charts_TenDollarData/financial_statements/data/Historical Financial Statements/*/year/{}/*~{}~*\".format(fin_statement_dir, some_place.upper()))[-1]\r\n    # csv_file = glob.glob(\"../Charts_TenDollarData/financial_statements/data/Historical Financial Statements/*/year/*/*~{}~*\".format(some_place))[-1]\r\n    df = pd.read_csv(csv_file) #.format(\"NLOK\"))[-1]\r\n    # df = df[df['date'].notna()]#fillna(method='ffill')\r\n    df = df[0:].iloc[::-1]#.dropna()\r\n    df_bs = df\r\n    #region Pandas data manipulation\r\n    # df_bs['Quarter & Year'] = df_bs['period']+\" \"+(df_bs['date'].astype(str).str[0:4])#((df_bs['date'].astype(str).str[0:4].astype(int))-1).astype(str)\r\n    df_bs['Quarter & Year'] =(df_bs['date'].astype(str).str[0:4]).astype(int)#((df_bs['date'].astype(str).str[0:4].astype(int))-1)\r\n    latest_year = list((df_bs['date'].astype(str).str[0:4]))[0]\r\n    earliest_year = list((df_bs['date'].astype(str).str[0:4]))[-1]\r\n\r\n    df_bs = df_bs.drop([ 'Unnamed: 0','date',\r\n    'symbol',\r\n    'fillingDate','period','link','acceptedDate'],axis=1)\r\n    \r\n    df_bs.columns = fin_statement_cols\r\n    # for col in df_bs.columns:\r\n    #     if len(df_bs[col].unique()) == 1:\r\n    #         df_bs.drop(col,inplace=True,axis=1)\r\n\r\n\r\n    df_bs = df_bs[cols]\r\n\r\n    df_bs.index = df_bs['Quarter & Year']\r\n    \r\n    million = 1000000\r\n    billion = 1000000000\r\n    fin_metric_history = df_bs['{}'.format(fin_metric_name)]\r\n    if list(fin_metric_history)[0]  > billion:\r\n        print()\r\n        df_bs['{}'.format(fin_metric_name)] = (fin_metric_history/billion).round(decimals=2)\r\n        df_bs_table_html = df_bs[['{}'.format(fin_metric_name)]].iloc[::-1].transpose().to_html().replace(\"'\",\"\")\r\n        \r\n    elif fin_metric_history[0]  > million:\r\n        pass\r\n    else:\r\n        pass\r\n\r\n    df_bs_pct_chg = df_bs\r\n    pct_chg_cols = (df_bs.select_dtypes(include=['number']).pct_change(-1))\r\n    df_bs_str = df_bs_pct_chg.drop(list(pct_chg_cols), axis=1)\r\n    df_bs_pct_chg = df_bs_str.join(pct_chg_cols)[list(df_bs)]\r\n\r\n    pd.set_option('display.float_format', '{:.2f}'.format)\r\n    df_bs_pct_chg_t = df_bs_pct_chg.transpose()\r\n    df_bs_pct_chg_t.columns = list(df_bs_pct_chg['Quarter & Year'])\r\n    df_bs_pct_chg_t = df_bs_pct_chg_t.iloc[1:]\r\n\r\n    df_bs_pct_chg_t = df_bs_pct_chg.transpose()\r\n    df_bs_pct_chg_t.columns = list(df_bs_pct_chg['Quarter & Year'])\r\n    df_bs_pct_chg_t = df_bs_pct_chg_t.iloc[1:]\r\n    df_bs_pct_chg_t['']=df_bs_pct_chg_t.index\r\n    df_bs_pct_chg_t.index = range(len(df_bs_pct_chg_t))\r\n\r\n    cols = list(df_bs_pct_chg_t.columns)\r\n    cols = [cols[-1]] + cols[:-1]\r\n    df_bs_pct_chg_t = df_bs_pct_chg_t[cols]\r\n\r\n\r\n    df_bs_t = df_bs.transpose()\r\n    df_bs_t.columns = list(df_bs['Quarter & Year'])\r\n    df_bs_t = df_bs_t.iloc[1:]\r\n    df_bs_t['']=df_bs_t.index\r\n    df_bs_t.index = range(len(df_bs_t))\r\n\r\n    cols = list(df_bs_t.columns)\r\n    cols = [cols[-1]] + cols[:-1]\r\n    df_bs_t = df_bs_t[cols]\r\n    #endregion\r\n\r\n    df_pct = df_bs_pct_chg_t.to_html().replace('<table','<table class=\"df_tableBoot\" id=\"df_myTable1\"')# dt-responsive\" id=\"df_myTable\"')\r\n\r\n    df_bs_t = df_bs_t[df_bs_t.columns[::-1]]\r\n    cols = list(df_bs_t.columns)\r\n    cols = [cols[-1]] + cols[:-1]\r\n    df_bs_t = df_bs_t[cols]\r\n    # df_html = df_bs_t.to_html().replace('<table','<table class=\"df_tableBoot\" id=\"df_myTable2\"')# dt-responsive\" id=\"df_myTable\"')\r\n\r\n\r\n\r\n    def isnumber(x):\r\n        try:\r\n            float(x)\r\n            return True\r\n        except:\r\n            return False\r\n    df_bs_n = df_bs[df_bs.applymap(isnumber)]\r\n    df_bs_n[df_bs_n < 2] = np.nan\r\n    # pd.DataFrame(df_bs_n.sum())#axis=0))\r\n    df_bs_n_sum = pd.DataFrame(df_bs_n.sum())\r\n    df_bs_n_sum[df_bs_n_sum == 0] = \"\"\r\n    new_header = df_bs_n_sum.iloc[0] #grab the first row for the header\r\n    df_bs_n_sum = df_bs_n_sum[1:] #take the data less the header row\r\n    df_bs_n_sum.columns = new_header #set the header row as the df header\r\n    df_bs_n_sum.index = range(len(df_bs_n_sum))\r\n    df_bs_t = pd.merge(df_bs_n_sum, df_bs_t, left_index=True, right_index=True,suffixes=('Total: {} - {}'.format(latest_year,earliest_year), 'Line Items'))\r\n    df_bs_t = df_bs_t[0:25]\r\n\r\n\r\n\r\n    col_list = []\r\n    n=0\r\n    while n<len(list(df_bs_t))-0:\r\n        if n<6:\r\n                col_item = '<col id=\"col_item_{}\" class=\"col_item_class first_7_col\">'.format(n)\r\n        else:\r\n            col_item = '<col id=\"col_item_{}\" class=\"col_item_class\">'.format(n)\r\n        col_list.append(col_item)\r\n        n+=1\r\n    col_list_str = ''.join(map(str, col_list))\r\n    df_html = df_bs_t.to_html().replace('border=\"1\" class=\"dataframe\">','class=\"df_tableBoot\" id=\"df_myTable\" border=\"1\" class=\"dataframe\"><colgroup>{}</colgroup>'.format(col_list_str))\r\n\r\n\r\n    df_html = df_html.replace('<td>','<td class=\"td_fin_statement_class fin_statement_class\">')\r\n    df_html = df_html.replace('<th>','<th class=\"th_fin_statement_class fin_statement_class\">')\r\n    df_html = df_html.replace('<tr>','<tr class=\"tr_fin_statement_class fin_statement_class\">')\r\n\r\n    df_html=df_html[0:]\r\n    df = df[['date','cashAndCashEquivalents']].dropna() #.fillna(0)#.fillna(method='bfill')\r\n\r\n    df['date'] = pd.to_datetime(df['date']).values.astype(np.int64) // 10 ** 6\r\n\r\n    full_path = csv_file.split(' ~ ')\r\n\r\n    path = pathlib.PurePath(full_path[0])\r\n    # asset_ticker = path.name #full_path[0].split(\"/\")\r\n    # asset_type = full_path[1]\r\n    # asset_name = full_path[-1]\r\n    print(\"Nothing took {} seconds\".format(time.time() - start_time))\r\n    total_seconds = ((time.time() - start_time))\r\n\r\n    labels = [\r\n        'JAN', 'FEB', 'MAR', 'APR',\r\n        'MAY', 'JUN', 'JUL', 'AUG',\r\n        'SEP', 'OCT', 'NOV', 'DEC'\r\n    ]\r\n    labels = list(df['date'])#[0:19]\r\n\r\n    values = [\r\n        967.67, 1190.89, 1079.75, 1349.19,\r\n        2328.91, 2504.28, 2873.83, 4764.87,\r\n        4349.29, 6458.30, 9907, 16297\r\n    ]\r\n\r\n    values = list(df['cashAndCashEquivalents'])#[0:19]\r\n\r\n    colors = [\r\n        \"#F7464A\", \"#46BFBD\", \"#FDB45C\", \"#FEDCBA\",\r\n        \"#ABCDEF\", \"#DDDDDD\", \"#ABCABC\", \"#4169E1\",\r\n        \"#C71585\", \"#FF4500\", \"#FEDCBA\", \"#46BFBD\"]\r\n    df_html\r\n    # return render_template('D:\\\\Cloud\\\\rclone\\\\OneDrive\\\\Web\\\\TenDollarData\\\\Charts_TenDollarData\\\\financial_statements\\\\templates\\\\fin_statements_bootstrapped.html',\r\n    return render_template('current_ratio.html', company_symbol = profiles_dict['symbol'],\\\r\n                            company_long_name = profiles_dict['long name'],\\\r\n                            company_currency = profiles_dict['currency'],\\\r\n                            company_exchange = profiles_dict['exchange'],\\\r\n                            company_industry = profiles_dict['industry'],\\\r\n                            company_description = profiles_dict['description'],\\\r\n                            company_sector = profiles_dict['sector'],\\\r\n                            company_country = profiles_dict['country'],\\\r\n                            company_ipo_date = profiles_dict['ipo date'],\\\r\n                            company_short_name = profiles_dict['short name'],\\\r\n    df_bs_table_html = [df_bs_table_html], fin_metric_name = fin_metric_name,\r\n     df_date = df['date'].to_list(), df_rev = df['cashAndCashEquivalents'].to_list(),\r\n     df_json  =df.to_numpy().tolist(), table_pct = [df_pct], tables=[df_html], titles=df.columns.values,\r\n\r\n\r\n\r\n\r\n\r\n     total_time=total_seconds, place_name=some_place, max=17000, labels=labels, values=values)\r\n\r\n\r\n@charts.route('/test/<some_place>', methods=['POST', 'GET'])\r\n# @cache.cached(timeout=5)\r\ndef fin_test(some_place):\r\n    # values = list(FS(\"IS\",\"AAPL\")['Beginning Price'])[0:19]\r\n\r\n\r\n    return render_template('financial_statements.html',\r\n\r\n     df_html=FS(\"IS\",\"AAPL\").df_html(),\r\n     tables=FS(\"IS\",\"AAPL\").df_values()['df_table'],\r\n     table_pct = FS(\"IS\",\"AAPL\").df_values()['df_table_pct'],\r\n     df_date = FS(\"IS\",\"AAPL\").df_values()['chart_x_dates'],\r\n     df_rev = FS(\"IS\",\"AAPL\").df_values()['chart_y_revenue'],\r\n     df_json = FS(\"IS\",\"AAPL\").df_values()['df_json'],\r\n     titles=FS(\"IS\",\"AAPL\").df_values()['df_titles'],\r\n     labels = FS(\"IS\",\"AAPL\").df_labels(),\r\n     values=FS(\"IS\",\"AAPL\").df_price(),\r\n     place_name=some_place, max=17000,\r\n     )\r\n\r\n\r\n",
  "isVisible": false
}