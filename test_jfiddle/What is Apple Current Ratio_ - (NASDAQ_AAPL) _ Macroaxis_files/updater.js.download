var positionRiskReturnChart;

function displayMarketsRiskReturnBubbles(chartDiv, marketX, marketY, marketName, positionsX, positionsY, positionsName) {
    var minX = positionsX.getMin();
    minX = Math.min(minX, marketX);
    minX = Math.min(minX, 0);
    minX = scaleMin(minX);
    var minY = positionsY.getMin();
    minY = Math.min(minY, marketY);
    minY = Math.min(minY, 0);
    minY = scaleMin(minY);
    var maxX = positionsX.getMax();
    maxX = Math.max(maxX, marketX);
    maxX = maxX * 1.1;
    var maxY = positionsY.getMax();
    maxY = Math.max(maxY, marketY);
    maxY = maxY * 1.1;
    var chartData = [{
            market_x: marketX,
            market_y: marketY,
            color: "#FE642E",
            description: marketName
        },
        {
            riskFree_x: 0,
            riskFree_y: 0.01,
            color: "#aaaaaa",
            description: "Risk Free Investment"
        }
    ];
    var size = positionsX.length;
    for (var i = 0; i < size; i++) {
        var x = positionsX[i];
        var y = positionsY[i];
        var color = "#aaaaaa";
        var desc = positionsName[i];
        chartData.push({
            position_x: x,
            position_y: y,
            color: color,
            description: desc
        });
    }
    pushMinMaxData(chartData, minX, minY, maxX, maxY);
  
        positionRiskReturnChart = new AmCharts.AmXYChart();
        var chartCursor = new AmCharts.ChartCursor();
        decorateCursor(chartCursor);
        positionRiskReturnChart.addChartCursor(chartCursor);
        positionRiskReturnChart.dataProvider = chartData;
        positionRiskReturnChart.startDuration = 0;
        setUpLineMargings(positionRiskReturnChart);
        positionRiskReturnChart.mask = false;
        positionRiskReturnChart.negativeFillColors = "[#E42217]";
        positionRiskReturnChart.negativeFillAlphas = 0.5;
        positionRiskReturnChart.hoverBrightness = 100;
        decorateBalloon(positionRiskReturnChart.balloon);
        var xAxis = new AmCharts.ValueAxis();
        decorateCompareBubbleXAxis(xAxis, false);
        positionRiskReturnChart.addValueAxis(xAxis);
        var yAxis = new AmCharts.ValueAxis();
        decorateCompareBubbleYAxis(yAxis, false);
        positionRiskReturnChart.addValueAxis(yAxis);
        var riskFreeGraph = new AmCharts.AmGraph();
        decorateRiskFreeRateRiskReturnBubbles(riskFreeGraph);
        positionRiskReturnChart.addGraph(riskFreeGraph);
        var minGraph = new AmCharts.AmGraph();
        decorateCompareMinBubble(minGraph);
        positionRiskReturnChart.addGraph(minGraph);
        var maxGraph = new AmCharts.AmGraph();
        decorateCompareMaxBubble(maxGraph);
        positionRiskReturnChart.addGraph(maxGraph);
        var positionsGraph = new AmCharts.AmGraph();
        positionsGraph.addListener("clickGraphItem", handleBubbleCompareClick);
        decorateMarketPositionsRiskReturnBubbles(positionsGraph);
        positionRiskReturnChart.addGraph(positionsGraph);
        var marketGraph = new AmCharts.AmGraph();
        decorateMarketRiskReturnBubbles(marketGraph);
        positionRiskReturnChart.addGraph(marketGraph);
        positionRiskReturnChart.exportConfig = buildExportConfig(chartDiv);
        positionRiskReturnChart.write(chartDiv);

}

function displayColoredPositionsRiskReturnBubbles(chartDiv, portfolioX, portfolioY, marketX, marketY, positionsX, positionsY, positionsName, positionsColor) {
    // alert("a");
    // alert(chartDiv);
    var minX = positionsX.getMin();
    if (portfolioX != -1) {
        minX = Math.min(minX, portfolioX);
    }
    minX = Math.min(minX, 0);
    minX = scaleMin(minX);
    var minY = positionsY.getMin();
    if (portfolioY != -1) {
        minY = Math.min(minY, portfolioY);
    }
    minY = Math.min(minY, 0);
    minY = scaleMin(minY);
    var maxX = positionsX.getMax();
    if (portfolioX != -1) {
        maxX = Math.max(maxX, portfolioX);
    }
    maxX = maxX * 1.1;
    var maxY = positionsY.getMax();
    if (portfolioY != -1) {
        maxY = Math.max(maxY, portfolioY);
    }
    if (maxY < .2) {
        maxY = maxY * 1.3;
    } else {
        maxY = maxY * 1.1;
    }
    var chartData = [{
            portfolio_x: portfolioX,
            portfolio_y: portfolioY,
            color: "#3B5998",
            description: "Portfolio"
        },
        {
            market_x: marketX,
            market_y: marketY,
            color: "#FE642E",
            description: "Market"
        },
        {
            riskFree_x: 0,
            riskFree_y: 0.01,
            color: "#cccccc",
            description: "Risk Free Investment"
        }
    ];
    var size = positionsX.length;
    for (var i = 0; i < size; i++) {
        var x = positionsX[i];
        var y = positionsY[i];
        var color = positionsColor[i];
        var desc = positionsName[i];
        // alert(desc);
        chartData.push({
            position_x: x,
            position_y: y,
            color: color,
            description: desc
        });
    }
    pushMinMaxData(chartData, minX, minY, maxX, maxY);

        positionRiskReturnChart = new AmCharts.AmXYChart();
        var chartCursor = new AmCharts.ChartCursor();
        decorateCursor(chartCursor);
        positionRiskReturnChart.addChartCursor(chartCursor);
        // chartCursor.bulletsEnabled=true;
        // chartCursor.cursorColor="#000000";
        // chartCursor.cursorAlpha="0.2";
        // positionRiskReturnChart.pathToImages = "/images/charts/";
        positionRiskReturnChart.dataProvider = chartData;
        positionRiskReturnChart.startDuration = 0;
        setUpLineMargings(positionRiskReturnChart);
        positionRiskReturnChart.mask = false;
        positionRiskReturnChart.negativeFillColors = "[#E42217]";
        positionRiskReturnChart.negativeFillAlphas = 0.5;
        positionRiskReturnChart.hoverBrightness = 100;
        decorateBalloon(positionRiskReturnChart.balloon);
        var xAxis = new AmCharts.ValueAxis();
        decorateCompareBubbleXAxis(xAxis, false);
        positionRiskReturnChart.addValueAxis(xAxis);
        var yAxis = new AmCharts.ValueAxis();
        decorateCompareBubbleYAxis(yAxis, false);
        positionRiskReturnChart.addValueAxis(yAxis);
        var riskFreeGraph = new AmCharts.AmGraph();
        decorateRiskFreeRateRiskReturnBubbles(riskFreeGraph);
        positionRiskReturnChart.addGraph(riskFreeGraph);
        var minGraph = new AmCharts.AmGraph();
        decorateCompareMinBubble(minGraph);
        positionRiskReturnChart.addGraph(minGraph);
        var maxGraph = new AmCharts.AmGraph();
        decorateCompareMaxBubble(maxGraph);
        positionRiskReturnChart.addGraph(maxGraph);
        var marketGraph = new AmCharts.AmGraph();
        decorateMarketRiskReturnBubbles(marketGraph);
        positionRiskReturnChart.addGraph(marketGraph);
        var positionsGraph = new AmCharts.AmGraph();
        //positionsGraph.addListener("clickGraphItem", handleBubbleCompareClick);
        decorateColoredPositionsRiskReturnBubbles(positionsGraph);
        positionRiskReturnChart.addGraph(positionsGraph);
        if (portfolioX != -1 && portfolioY != -1) {
            var portfolioGraph = new AmCharts.AmGraph();
            decoratePortfolioRiskReturnBubbles(portfolioGraph);
            positionRiskReturnChart.addGraph(portfolioGraph);
        }
        positionRiskReturnChart.exportConfig = buildExportConfig(chartDiv);
        positionRiskReturnChart.write(chartDiv);

}

function displayPortfolioWithFrontierBubbles(chartDiv, portfolioX, portfolioY, marketX, marketY, frontierX, frontierY) {
    var minX = frontierX.getMin();
    if (portfolioX != -1) {
        minX = Math.min(minX, portfolioX);
    }
    minX = 0;
    // minX = scaleMin(minX);
    var minY = frontierY.getMin();
    if (portfolioY != -1) {
        minY = Math.min(minY, portfolioY);
    }
    minY = Math.min(minY, 0);
    minY = scaleMin(minY);
    var maxX = frontierX.getMax();
    var maxY = frontierY.getMax();
    if (portfolioX != -1 && portfolioY != -1) {
        // maxX = Math.max(maxX,portfolioX);
        // maxX = maxX*1.1;
        maxY = Math.max(maxY, portfolioY);
        // maxY = maxY*1.1;
    }
    // alert(maxX);
    var chartData = [];
    // alert(frontierX);
    var fsize = frontierX.length;
    for (var f = 0; f < fsize; f++) {
        var x = frontierX[f];
        var y = frontierY[f];
        var color = "#dddddd";
        var desc = "Frontier";
        if (x == marketX) {
            // alert(marketY);
            chartData.push({
                marketY: marketY,
                risk: marketX,
                color: "#E84319",
                description: "Market",
                bullet: "round",
                bulletSize: 60
            });
        } else if (x == portfolioX) {
            // alert(portfolioY);
            chartData.push({
                portfolioY: portfolioY,
                risk: portfolioX,
                color: "blue",
                description: "Portfolio",
                bullet: "round",
                bulletSize: 60
            });
        } else {
            chartData.push({
                risk: x,
                frontier_y: y,
                color: color,
                description: desc
            });
        }
    }
    // alert(chartData);
    // pushMinMaxData(chartData,minX,minY,maxX,maxY);
    positionRiskReturnChart = new AmCharts.AmSerialChart();
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor);
    positionRiskReturnChart.addChartCursor(chartCursor);
    positionRiskReturnChart.dataProvider = chartData;
    positionRiskReturnChart.categoryField = "risk";
    positionRiskReturnChart.startDuration = 0;
    setUpLineMargings(positionRiskReturnChart);
    positionRiskReturnChart.negativeFillColors = "[#E42217]";
    positionRiskReturnChart.negativeFillAlphas = 0.5;
    positionRiskReturnChart.hoverBrightness = 100;
    decorateBalloon(positionRiskReturnChart.balloon);
    //
    var xAxis = new AmCharts.ValueAxis();
    decorateCompareBubbleXAxis(xAxis, false);
    // xAxis.gridCount=5;
    // xAxis.logarithmic = true;
    // xAxis.autoGridCount=false;
    positionRiskReturnChart.addValueAxis(xAxis);
    //		
    var categoryAxis = positionRiskReturnChart.categoryAxis;
    categoryAxis.gridAlpha = 0;
    categoryAxis.axisAlpha = 0;
    categoryAxis.startOnAxis = true;
    categoryAxis.color = "#3b5998";
    categoryAxis.gridCount = 2;
    categoryAxis.autoGridCount = false;
    categoryAxis.fillAlpha = 0;
    categoryAxis.fillColor = "#3b5998";
    // var riskFreeGraph = new AmCharts.AmGraph();
    // decorateRiskFreeRateRiskReturnBubbles(riskFreeGraph);
    // positionRiskReturnChart.addGraph(riskFreeGraph);
    var minGraph = new AmCharts.AmGraph();
    decorateCompareMinBubble(minGraph);
    positionRiskReturnChart.addGraph(minGraph);
    var maxGraph = new AmCharts.AmGraph();
    decorateCompareMaxBubble(maxGraph);
    positionRiskReturnChart.addGraph(maxGraph);
    var marketGraph = new AmCharts.AmGraph();
    decorateMarketRiskReturnBubbles(marketGraph);
    marketGraph.valueField = "marketY";
    marketGraph.bulletSize = 62;
    marketGraph.fontSize = 10;
    positionRiskReturnChart.addGraph(marketGraph);
    var frontierGraph = new AmCharts.AmGraph();
    frontierGraph.type = "smoothedLine";
    frontierGraph.lineColor = "green";
    frontierGraph.lineAlpha = 0.3;
    frontierGraph.fillAlphas = 0.1;
    frontierGraph.lineThickness = 1;
    frontierGraph.valueField = "frontier_y";
    // frontierGraph.descriptionField = "description";
    // frontierGraph.labelText="[[description]]";
    frontierGraph.color = "#0000000";
    frontierGraph.fontSize = 10;
    // graph
    positionRiskReturnChart.addGraph(frontierGraph);
    if (portfolioY != -1 && portfolioX != -1) {
        var portfolioGraph = new AmCharts.AmGraph();
        decoratePortfolioRiskReturnBubbles(portfolioGraph);
        portfolioGraph.bulletSize = 66;
        portfolioGraph.fontSize = 10;
        portfolioGraph.valueField = "portfolioY";
        // if (isOptimal) {
        // alert(isOptimal);
        // portfolioGraph.bulletColor='green';
        // }
        positionRiskReturnChart.addGraph(portfolioGraph);
    }
    // positionRiskReturnChart.addLabel(0,5,"Macroaxis
    // Charts","center",12,"#aaaaaa",0,0.5,false,"http://www.macroaxis.com");
    addChartWaterMark(positionRiskReturnChart);
    suggestionChart.addGraph(suggestionsGraph);
    positionRiskReturnChart.exportConfig = buildExportConfig(chartDiv);
    positionRiskReturnChart.write(chartDiv);
    // })
}

function displayPositionsRiskReturnBubbles(chartDiv, portfolioX, portfolioY, marketX, marketY, positionsX, positionsY, positionsName) {
    // alert(frontierX);
    var minX = positionsX.getMin();
    if (portfolioX != -1) {
        minX = Math.min(minX, portfolioX);
    }
    minX = Math.min(minX, 0);
    minX = scaleMin(minX);
    var minY = positionsY.getMin();
    if (portfolioY != -1) {
        minY = Math.min(minY, portfolioY);
    }
    minY = Math.min(minY, 0);
    minY = scaleMin(minY);
    var maxX = positionsX.getMax();
    var maxY = positionsY.getMax();
    if (portfolioX != -1 && portfolioY != -1) {
        maxX = Math.max(maxX, portfolioX);
        maxX = maxX * 1.1;
        maxY = Math.max(maxY, portfolioY);
        maxY = maxY * 1.1;
    }
    maxX = maxX * 1.1;
    maxY = maxY * 1.1;
    var chartData = [{
            portfolio_x: portfolioX,
            portfolio_y: portfolioY,
            color: "#3B5998",
            description: "Portfolio"
        },
        {
            market_x: marketX,
            market_y: marketY,
            color: "#FE642E",
            description: "Market"
        },
        {
            riskFree_x: 0,
            riskFree_y: 0.01,
            color: "#cccccc",
            description: "Risk Free Investment"
        }
    ];
    var size = positionsX.length;
    for (var i = 0; i < size; i++) {
        var x = positionsX[i];
        var y = positionsY[i];
        var color = "#dddddd";
        var desc = positionsName[i];
        // alert(desc);
        chartData.push({
            position_x: x,
            position_y: y,
            color: color,
            description: desc
        });
    }
    pushMinMaxData(chartData, minX, minY, maxX, maxY);
    positionRiskReturnChart = new AmCharts.AmXYChart();
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor);
    positionRiskReturnChart.addChartCursor(chartCursor);
    // positionRiskReturnChart.pathToImages = "/images/charts/";
    positionRiskReturnChart.dataProvider = chartData;
    setUpLineMargings(positionRiskReturnChart);
    positionRiskReturnChart.hoverBrightness = 100;
    decorateBalloon(positionRiskReturnChart.balloon);
    var yAxis = new AmCharts.ValueAxis();
    decorateCompareBubbleYAxis(yAxis, false);
    positionRiskReturnChart.addValueAxis(yAxis);
    var xAxis = new AmCharts.ValueAxis();
    decorateCompareBubbleXAxis(xAxis, false);
    positionRiskReturnChart.addValueAxis(xAxis);
    var riskFreeGraph = new AmCharts.AmGraph();
    decorateRiskFreeRateRiskReturnBubbles(riskFreeGraph);
    positionRiskReturnChart.addGraph(riskFreeGraph);
    var minGraph = new AmCharts.AmGraph();
    decorateCompareMinBubble(minGraph);
    positionRiskReturnChart.addGraph(minGraph);
    var maxGraph = new AmCharts.AmGraph();
    decorateCompareMaxBubble(maxGraph);
    positionRiskReturnChart.addGraph(maxGraph);
    var marketGraph = new AmCharts.AmGraph();
    decorateMarketRiskReturnBubbles(marketGraph);
    positionRiskReturnChart.addGraph(marketGraph);
    var positionsGraph = new AmCharts.AmGraph();
    //positionsGraph.addListener("clickGraphItem", handleBubbleCompareClick);
    decoratePositionsRiskReturnBubbles(positionsGraph);
    positionsGraph.bulletColor = "#8b9dc3";
    positionsGraph.lineColor = "#8b9dc3";
    positionsGraph.bulletAlpha = 0.5;
    positionsGraph.lineAlpha = 0;
    positionsGraph.color = "black";
    // positionsGraph.bulletBorderColor='#bbbbbb';
    positionRiskReturnChart.addGraph(positionsGraph);
    // alert(positionsGraph);
    if (portfolioY != -1 && portfolioX != -1) {
        var portfolioGraph = new AmCharts.AmGraph();
        decoratePortfolioRiskReturnBubbles(portfolioGraph);
        // if (isOptimal) {
        // alert(isOptimal);
        // portfolioGraph.bulletColor='green';
        // }
        positionRiskReturnChart.addGraph(portfolioGraph);
    }
    // positionRiskReturnChart.exportConfig = buildExportConfig(chartDiv);
    // addChartWaterMark(positionRiskReturnChart);
    setLegendForBubbleChart(positionRiskReturnChart);
    positionRiskReturnChart.write(chartDiv);
}

function decorateMarketPositionsRiskReturnBubbles(positionsGraph) {
    // alert(positionsGraph);
    decoratePositionsRiskReturnBubbles(positionsGraph);
    positionsGraph.balloonText = "[[description]]";
    positionsGraph.labelText = "[[description]]";
    positionsGraph.bulletSize = 70;
    positionsGraph.bulletAlpha = 0.6
    positionsGraph.bulletBorderColor = '#cccccc';
    positionsGraph.labelPosition = "middle";
    positionsGraph.color = "#3B5998";
    positionsGraph.bulletBorderColor = '#3B5998';
    positionsGraph.bulletBorderAlpha = 0.45;
    positionsGraph.bulletBorderThickness = 2;
    positionsGraph.bulletSize = 85;
}

function displayOnePositionRiskReturnBubbles(chartDiv, positionX, positionY, marketX, marketY, positionName) {
    // alert(chartDiv);
    // alert(positionsX);
    var minX = positionX;
    minX = Math.min(minX, marketX);
    minX = Math.min(minX, 0);
    minX = scaleMin(minX);
    var minY = positionY;
    minY = Math.min(minY, marketY);
    minY = Math.min(minY, 0);
    minY = scaleMin(minY);
    var maxX = positionX;
    maxX = Math.max(maxX, marketX);
    maxX = maxX * 1.1;
    var maxY = positionY;
    maxY = Math.max(maxY, marketY);
    maxY = maxY * 1.1;
    var chartData = [{
            position_x: positionX,
            position_y: positionY,
            color: "#3B5998",
            description: positionName
        },
        {
            market_x: marketX,
            market_y: marketY,
            color: "#f44336",
            description: "Market"
        },
        {
            riskFree_x: 0,
            riskFree_y: 0.01,
            color: "#cccccc",
            description: "Risk Free Investment"
        },
        {
            min_x: minX,
            min_y: minY,
            color: "#ffffff",
            description: ""
        },
        {
            max_x: maxX,
            max_y: maxY,
            color: "#ffffff",
            description: ""
        }
    ];

        positionRiskReturnChart = new AmCharts.AmXYChart();
        setUpLineMargings(positionRiskReturnChart);
        // positionRiskReturnChart.pathToImages = "/images/charts/";
        positionRiskReturnChart.dataProvider = chartData;
        positionRiskReturnChart.startDuration = 0;
        positionRiskReturnChart.mask = false;
        positionRiskReturnChart.negativeFillColors = "[#E42217]";
        positionRiskReturnChart.negativeFillAlphas = 0.5;
        positionRiskReturnChart.hoverBrightness = 100;
        decorateBalloon(positionRiskReturnChart.balloon);
        var xAxis = new AmCharts.ValueAxis();
        decorateCompareBubbleXAxis(xAxis, false);
        positionRiskReturnChart.addValueAxis(xAxis);
        var yAxis = new AmCharts.ValueAxis();
        decorateCompareBubbleYAxis(yAxis, false);
        positionRiskReturnChart.addValueAxis(yAxis);
        var riskFreeGraph = new AmCharts.AmGraph();
        decorateRiskFreeRateRiskReturnBubbles(riskFreeGraph);
        positionRiskReturnChart.addGraph(riskFreeGraph);
        var minGraph = new AmCharts.AmGraph();
        decorateCompareMinBubble(minGraph);
        positionRiskReturnChart.addGraph(minGraph);
        var maxGraph = new AmCharts.AmGraph();
        decorateCompareMaxBubble(maxGraph);
        positionRiskReturnChart.addGraph(maxGraph);
        var marketGraph = new AmCharts.AmGraph();
        decorateMarketRiskReturnBubbles(marketGraph);
        positionRiskReturnChart.addGraph(marketGraph);
        var positionsGraph = new AmCharts.AmGraph();
        positionsGraph.addListener("clickGraphItem", handleBubbleCompareClick);
        decorateOnePositionRiskReturnBubbles(positionsGraph);
        positionRiskReturnChart.addGraph(positionsGraph);
        positionRiskReturnChart.exportConfig = buildExportConfig(chartDiv);
        var chartCursor = new AmCharts.ChartCursor();
        decorateCursor(chartCursor);
        positionRiskReturnChart.addChartCursor(chartCursor);
        positionRiskReturnChart.exportConfig = buildExportConfig(chartDiv);
        addChartWaterMark(positionRiskReturnChart);
        positionRiskReturnChart.write(chartDiv);

}

function decorateOnePositionRiskReturnBubbles(positionsGraph) {
    decoratePositionsRiskReturnBubbles(positionsGraph);
    positionsGraph.balloonText = "[[description]]</br>Risk: [[position_x]]</br>Expected Return: [[position_y]]";
    positionsGraph.labelText = "[[description]]";
    positionsGraph.color = "#ffffff";
    positionsGraph.bulletColor = "#3B5998";
    positionsGraph.bulletBorderColor = '#3B5998';
    positionsGraph.bulletBorderThickness = 0;
    positionsGraph.fontSize = 10;
    positionsGraph.bulletSize = 85;
    positionsGraph.bulletAlpha = 1;
    positionsGraph.bullet = "round";
    positionsGraph.bulletBorderAlpha = 0.5;
    positionsGraph.bulletBorderThickness = 0;
}

function decorateColoredPositionsRiskReturnBubbles(positionsGraph) {
    decoratePositionsRiskReturnBubbles(positionsGraph);
    positionsGraph.balloonText = "[[description]]";
    positionsGraph.labelText = "";
    positionsGraph.bulletSize = 35;
    positionsGraph.bulletAlpha = 0.7
    positionsGraph.lineColorField = "color";
    // positionsGraph.bulletBorderColor='#ffffff';
}

function decoratePositionsRiskReturnBubbles(positionsGraph) {
    positionsGraph.xField = "position_x";
    positionsGraph.yField = "position_y";
    positionsGraph.urlField = "url";
    positionsGraph.descriptionField = "description";
    // positionsGraph.colorField = "color";
    positionsGraph.bulletAlpha = 0.4;
    positionsGraph.lineAlpha = 0;
    positionsGraph.title = "Positions";
    positionsGraph.bulletColor = "#8b9dc3";
    positionsGraph.lineColor = "#3B5998";
    positionsGraph.bullet = "round";
    positionsGraph.fontSize = 8;
    positionsGraph.balloonText = "[[description]]</br>Risk: [[position_x]]</br>Expected Return: [[position_y]]";
    positionsGraph.labelText = "[[description]]";
    positionsGraph.labelPosition = "middle";
    positionsGraph.color = "#3B5998";
    positionsGraph.bulletBorderColor = '#3B5998';
    positionsGraph.bulletBorderAlpha = 0.35;
    positionsGraph.bulletBorderThickness = 0;
    positionsGraph.bulletSize = 65;
    // positionsGraph.cursorBulletAlpha=0.5;
    // decorateCompareBubbleGridFill(positionsGraph);
}

function decorateRiskFreeRateRiskReturnBubbles(riskFreeGraph) {
    riskFreeGraph.xField = "riskFree_x";
    riskFreeGraph.yField = "riskFree_y";
    riskFreeGraph.colorField = "url";
    riskFreeGraph.descriptionField = "description";
    // riskFreeGraph.colorField = "color";
    riskFreeGraph.title = "Your Savings Account";
    riskFreeGraph.lineColor = "#aaaaaa";
    riskFreeGraph.bulletColor = "#aaaaaa";
    riskFreeGraph.color = "gray";
    riskFreeGraph.bulletAlpha = 0.8;
    riskFreeGraph.lineAlpha = 1;
    riskFreeGraph.bullet = "round";
    riskFreeGraph.balloonText = "[[description]]</br>Risk: [[riskFree_x]]</br>Expected Return: [[riskFree_y]]";
    riskFreeGraph.labelText = "CASH";
    riskFreeGraph.fontSize = 12;
    riskFreeGraph.labelPosition = "center";
    // riskFreeGraph.color = "#ffffff";
    riskFreeGraph.bulletBorderColor = 'gray';
    riskFreeGraph.bulletBorderAlpha = 0.7;
    riskFreeGraph.bulletBorderThickness = 0;
    riskFreeGraph.bulletSize = 105;
    // decorateBalloon(riskFreeGraph);
    decorateCompareBubbleGridFill(riskFreeGraph);
}

function decorateMarketRiskReturnBubbles(marketGraph, marketName) {
    marketGraph.xField = "market_x";
    marketGraph.yField = "market_y";
    marketGraph.colorField = "url";
    marketGraph.descriptionField = "description";
    // marketGraph.colorField = "color";
    if (marketName) {
        marketGraph.title = marketName;
    } else {
        marketGraph.title = "Market";
    }
    // marketGraph.title="[[description]]";
    marketGraph.fontSize = 12;
    marketGraph.lineColor = "#f44336";
    marketGraph.bulletColor = "#f44336";
    marketGraph.bulletAlpha = .7;
    marketGraph.lineAlpha = .7;
    marketGraph.bullet = "round";
    marketGraph.balloonText = "[[description]]</br>Risk: [[market_x]]</br>Expected Return: [[market_y]]";
    marketGraph.labelText = "[[description]]";
    marketGraph.labelPosition = "middle";
    marketGraph.color = "#8B0000";
    marketGraph.bulletBorderColor = '#f44336';
    marketGraph.bulletBorderThickness = 0;
    marketGraph.bulletBorderAlpha = .9;
    marketGraph.bulletSize = 135;
    decorateCompareBubbleGridFill(marketGraph);
}

function decoratePortfolioRiskReturnBubbles(portfolioGraph) {
    portfolioGraph.xField = "portfolio_x";
    portfolioGraph.yField = "portfolio_y";
    portfolioGraph.descriptionField = "description";
    portfolioGraph.lineAlpha = 0;
    portfolioGraph.bullet = "round";
    portfolioGraph.bulletAlpha = 0.7;
    portfolioGraph.lineAlpha = 1;
    portfolioGraph.title = "Portfolio";
    portfolioGraph.bulletColor = "#3B5998";
    portfolioGraph.lineColor = "#3B5998";
    portfolioGraph.fontSize = 12;
    portfolioGraph.balloonText = "[[description]]</br>Risk: [[portfolio_x]]</br>Expected Return: [[portfolio_y]]";
    portfolioGraph.labelText = "[[description]]";
    portfolioGraph.labelPosition = "middle";
    portfolioGraph.color = "#191B20";
    portfolioGraph.bulletBorderColor = '#3B5998';
    portfolioGraph.bulletColor = '#3B5998';
    portfolioGraph.bulletBorderColor = '#3B5998';
    portfolioGraph.bulletBorderThickness = 0;
    portfolioGraph.bulletBorderAlpha = 0.9;
    portfolioGraph.bulletSize = 125;
    decorateCompareBubbleGridFill(portfolioGraph);
}

function exportPositionsRiskReturnChart(f, name) {
    positionRiskReturnChart.AmExport.output({
        format: f,
        fileName: name
    });
}
var currentSymbol;
var hiddenTip;
var lastBigButton;
var lastMidButton;
var extraButton;
var sentimentIncrementer;
var currentRiskLevel;
var currentDayRange;
var quote_lag1 = 0;
var quote_lag2 = 0;
var quote_lag3 = 0;
var quote_lag4 = 0;
var quote_lag5 = 0;
var popping_up = false;
var updateLiveFlag = false;

function RemoteRequest(url, method, postData, handler
    /*
     * , (optional)
     * failureHandler
     */
) {
    this.url = url;
    this.method = method;
    this.postData = postData;
    this.handler = handler;
    if (arguments.length == 5) {
        this.failureHandler = arguments[4];
    }
    this.xmlhttp = getXMLHTTP();
    var rscHandler = this.getRSChangeFunction(this);
    this.xmlhttp.onreadystatechange = rscHandler;
}
RemoteRequest.prototype.getRSChangeFunction = function(remoteRequest) {
    return (function() {
        if (remoteRequest.xmlhttp.readyState == 4) {
            if (remoteRequest.responseIsSuccess()) {
                remoteRequest.handler(remoteRequest);
            } else if (remoteRequest.failureHandler) {
                remoteRequest.failureHandler(remoteRequest);
            }
        }
    });
}
/**
 * Sends the requester's source as an aynchronous request.
 */
RemoteRequest.prototype.request = function() {
    if (this.xmlhttp) {
        this.xmlhttp.open(this.method, this.url, true);
        this.xmlhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        this.xmlhttp.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        this.xmlhttp.send(this.postData);
    }
    // If no xmlhttp will do nothing gracefully
}
RemoteRequest.prototype.responseIsSuccess = function() {
    return this.xmlhttp.status == undefined ||
        this.xmlhttp.status == 0 ||
        (this.xmlhttp.status >= 200 && this.xmlhttp.status < 300);
}
RemoteRequest.prototype.responseIsFailure = function() {
    return !this.responseIsSuccess();
}

function RemoteUpdater(url, method, containerId, postData, mode) {
    this.url = url;
    this.method = method;
    this.postData = postData;
    this.mode = mode;
    this.xmlhttp = getXMLHTTP();
    if (!isValidObject(document.getElementById(containerId)))
        this.container = document.body;
    else
        this.container = document.getElementById(containerId);
    var rsChangeFunction = this.getRSChangeFunction(this);
    this.xmlhttp.onreadystatechange = rsChangeFunction;
};
// *************************************************************************************
// REMOTE UPDATER OBJECT static variables
// *************************************************************************************
/**
 * Resolve mode: preserve the exisiting content of the container and update only
 * the elements for which we detect a change
 * 
 * @type String
 */
RemoteUpdater.prototype.RESOLVE = new String("Resolve");
/**
 * Clobber mode: replace existing content of the container
 * 
 * @type String
 */
RemoteUpdater.prototype.CLOBBER = new String("Clobber");
/**
 * Redirect mode: we are not interested in the updater's response text, we just
 * want to perform the server operation, then do a JS redirect to the specified
 * url. Typical use case is when we want to perform a manual post from within JS
 * 
 * @type String
 */
RemoteUpdater.prototype.REDIRECT = new String("Redirect");
// *************************************************************************************
// REMOTE UPDATER OBJECT instance variables
// *************************************************************************************
/**
 * The URL on which to make the remote request
 * 
 * @type String
 */
RemoteUpdater.prototype.url = null;
/**
 * The type of request - get or post
 * 
 * @type String
 */
RemoteUpdater.prototype.method = null;
/**
 * Post data to be submitted - if any
 * 
 * @type String
 */
RemoteUpdater.prototype.postData = null;
/**
 * Updater mode - how should we update the container
 * 
 * @type String
 */
RemoteUpdater.prototype.mode = null;
/**
 * The instance of XmlHttpRequest which we will use to communicate with the
 * server
 * 
 * @type XMLHttpRequest
 */
RemoteUpdater.prototype.xmlhttp = null;
/**
 * The HTML elem which we are attempting to update
 * 
 * @type String
 */
RemoteUpdater.prototype.container = null;
/**
 * Script to be evaluated after updater has recieved a response
 * 
 * @type String
 */
RemoteUpdater.prototype.postResponseAction = null;
// *************************************************************************************
// REMOTE UPDATER OBJECT instance methods
// *************************************************************************************
/**
 * The returned function gets fired when the server has a response to the
 * updater's request. By encapsulating the function within a function we can
 * bind the implementation to a specific instance (specified in the constructor)
 * and so ensure that the response is handled by the same updater instance that
 * sent it.
 * 
 * @param updater -
 *            the instance of RemoteUpdater to embed in thereturned function
 * @return the function to be fired by onreadystatechange event
 */
RemoteUpdater.prototype.getRSChangeFunction = function(updater) {
    return (function() {
        if (updater.xmlhttp.readyState == 4) {
            if (updater.mode == RemoteUpdater.prototype.CLOBBER)
                updater.addContent();
            else if (updater.mode == RemoteUpdater.prototype.RESOLVE)
                updater.resolveContent();
            else if (updater.mode == RemoteUpdater.prototype.REDIRECT)
                updater.redirect();
            // execute post-response code, if any
            if (updater.postResponseAction)
                updater.postResponseAction(updater);
        }
    });
}
/**
 * Sends the updater's source as an aynchronous request with the intention of
 * refreshing the updater's container.
 */
RemoteUpdater.prototype.update = function() {
    if (this.xmlhttp) {
        this.xmlhttp.open(this.method, this.url, true);
        this.xmlhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        this.xmlhttp.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        this.xmlhttp.send(this.postData);
    }
    // If no xmlhttp will do nothing gracefully
}
/**
 * Compare and resolve the DOM of the returned response with the current DOM
 */
RemoteUpdater.prototype.resolveContent = function() {
    // before resolving DOM, see what element has focus so we can restore focus
    // to it after
    // var currentFocus = null;
    // if (document.activeElement) { // document.activeElement is IE only
    // currentFocus = document.activeElement;
    // }
    // var tempContainer = document.createElement("DIV");
    var responseTxt = this.xmlhttp.responseText;
    RemoteScriptingLogger.log(responseTxt);
    this.container.innerHTML = responseTxt;
    // if (document) {
    // document.focus();
    // }
    setTimeout("", 10);
}

function replaceContainer(container, newContainer) {
    var childrens = newContainer.all;
    var count = 0;
    while (count < childrens.length) {
        var child = childrens[count];
        if (child.id == container.id) {
            // alert(child.id);
            // alert(container.innerHTML);
            // alert(child.innerHTML);
            container.innerHTML = child.innerHTML;
        }
        count++;
    }
}
/**
 * Clobber old content - don't compare just dump it all in
 */
RemoteUpdater.prototype.addContent = function() {
    var tempContainer = document.createElement("DIV");
    var responseTxt = this.xmlhttp.responseText;
    // alert(responseTxt)
    RemoteScriptingLogger.log(responseTxt);
    tempContainer.innerHTML = responseTxt;
    var newContainer = tempContainer.getElementById("container");
    // alert(newContainer.innerHTML)
    this.container.innerHTML = newContainer.innerHTML;
}
/**
 * Ignore response text, just redirect to specified URL
 */
RemoteUpdater.prototype.redirect = function() {
    document.location.href = this.url;
}
/**
 * Set the post update callback function
 * 
 * @param f -
 *            a javascript function
 */
RemoteUpdater.prototype.setPostResponseAction = function(f) {
    this.postResponseAction = f;
}
// *************************************************************************************
// DOM RECONCILER OBJECT
// *************************************************************************************
/**
 * @class Compares two DOM models, yourDOM and theirDom Merge theirDom to
 *        yourDom by invoking this.resolve() If there are unresolved differences
 *        error will be true and resolveIssues will be populated with issues
 * @constructor
 * @param yourDOM -
 *            local HTML DOM model to merge to
 * @param theirDOM -
 *            incoming DOM model to be merged from
 * @return a new DomReconciler instance
 */
function DomReconciler(yourDom, theirDom) {
    this.yourDom = yourDom;
    this.theirDom = theirDom;
    this.pendingDiffs = new Array();
    this.resolveSafetyLevel = DomReconciler.prototype.RESOLVE_CAUTION_MEDIUM;
    this.resolveIssues = new Array();
    this.error = false;
}
// *************************************************************************************
// DOM RECONCILER OBJECT static variables
// *************************************************************************************
/**
 * Safest Resolve: throw an error if the resolution is not obvious
 * 
 * @type String
 */
DomReconciler.prototype.RESOLVE_CAUTION_HIGH = new String("ResolveCautionHigh");
/**
 * Safe Resolve: For nodes without obvious resolution clobber all your children
 * with their children
 * 
 * @type String
 */
DomReconciler.prototype.RESOLVE_CAUTION_MEDIUM = new String("ResolveCautionMedium");
/**
 * Aggressive Resolve: Always try to be clever
 * 
 * @type String
 */
DomReconciler.prototype.RESOLVE_CAUTION_LOW = new String("ResolveCautionLow");
// *************************************************************************************
// DOM RECONCILER OBJECT instance variables
// *************************************************************************************
/**
 * local HTML DOM model to merge to
 * 
 * @type Array
 */
DomReconciler.prototype.yourDom = null;
/**
 * incoming HTML DOM model to merge from
 * 
 * @type Array
 */
DomReconciler.prototype.theirDom = null;
/**
 * all identified DOM diffs
 * 
 * @type Array
 */
DomReconciler.prototype.pendingDiffs = new Array();
/**
 * how cautious should the resolve methodology be
 * 
 * @type String
 */
DomReconciler.prototype.resolveSafetyLevel = DomReconciler.prototype.RESOLVE_CAUTION_MEDIUM;
/**
 * all unreconcilabe issues
 * 
 * @type Array
 */
DomReconciler.prototype.resolveIssues = new Array();
/**
 * were there any unreconcilable issues
 * 
 * @type boolean
 */
DomReconciler.prototype.error = false;
// *************************************************************************************
// DOM RECONCILER OBJECT instance methods
// *************************************************************************************
/**
 * Compare your DOM model with their DOM model
 */
DomReconciler.prototype.compare = function() {
    this.compareChildren(this.yourDom, this.theirDom);
}
//
// HTML element equality test
//
function htmlElementEquals(el1, el2) {
    var result = true;
    if ((el1.all.length <= 1 || el2.all.length <= 1) && (el1.innerText != el2.innerText)) {
        return false;
    } else {
        return sameTypes(el1, el2) && (el1.children.length == el2.children.length) &&
            (el1.style.display == el2.style.display) &&
            ((el1.value) ? (el1.value == el2.value) : !el2.value) &&
            ((el1.nodeName.toLowerCase() == "a") ? (el1.href == el2.href) : true);
    }
}
/**
 * Compare children of your DOM node with children of their DOM node
 * 
 * @param yours -
 *            your DOM node
 * @param theirs -
 *            their DOM node
 */
DomReconciler.prototype.compareChildren = function(yours, theirs) {
    var yourChildren = yours.children;
    var theirChildren = theirs.children;
    var needsSorting = false;
    var yourCount = 0;
    var theirCount = 0;
    while (yourCount < yourChildren.length || theirCount < theirChildren.length) {
        var yourChild = yourChildren[yourCount];
        var theirChild = theirChildren[theirCount];
        // give elems a sequence in case we need to sort later
        if (yourChild) yourChild.seq = theirCount; // (intentionally using
        // theirCount here)
        if (theirChild) theirChild.seq = theirCount;
        // if no original elem then we have added something
        if (!yourChild) {
            this.appendAdded(theirChild, yours);
            theirCount++;
            continue;
        }
        // if no new elem then we have removed something
        if (!theirChild) {
            this.appendRemoved(yourChild, yours);
            yourCount++;
            continue;
        }
        // did we change something OR did the sibling sequence get messed up
        if (!htmlElementEquals(yourChild, theirChild) || needsSorting) {
            if (sameTypes(yourChild, theirChild)) {
                // easy to resolve
                this.appendChanged(yourChild, theirChild, yours);
                yourCount++;
                theirCount++;
            } else {
                if (this.resolveSafetyLevel == DomReconciler.prototype.RESOLVE_CAUTION_LOW) {
                    needsSorting = this.aggressiveResolve(yourChild, theirChild, yourCount, theirCount);
                } else if (this.resolveSafetyLevel == DomReconciler.prototype.RESOLVE_CAUTION_MEDIUM) {
                    // children differ enough to justify replacing your parent
                    // with theirs
                    this.appendChanged(yours, theirs, yours.parent);
                    break; // ignore remaining siblings
                } else if (this.resolveSafetyLevel == DomReconciler.prototype.RESOLVE_CAUTION_HIGH) {
                    // cannot resolve - add issue
                    this.error = true;
                    this.appendIssue(yourChild, theirChild);
                }
            }
            continue; // elements differed don't drill further
        }
        // drill to next level if we are still comparing like with like
        if (sameTypes(yourChild, theirChild))
            this.compareChildren(yourChild, theirChild);
        // next
        yourCount++;
        theirCount++;
    }
    if (needsSorting)
        this.appendSort(yours);
}

function sameTypes(elem1, elem2) {
    return elem1.nodeName == elem2.nodeName;
}

function sameAttributes(elem1, elem2) {
    attArray1 = elem1.attributes;
    attArray2 = elem2.attributes;
    // if no attributes, elements are the same
    if (attArray1 == null && attArray2 == null) return true;
    if (attArray1 && attArray2 && attArray1.length != attArray2.length) return false;
    for (i = 0; i < attArray1.length; i++) {
        if (attArray1[i].specified) {
            if (attArray1[i].nodeName != attArray2[i].nodeName || attArray1[i].nodeValue != attArray2[i].nodeValue) {
                return false;
            }
        }
    }
    return true;
}
/**
 * Attempt resolution of conflicting nodes in an aggressive manner
 * 
 * @param yourChild -
 *            your DOM child node
 * @param theirChild -
 *            their DOM child node
 * @param yourCount -
 *            the index of your DOM child within it's parent collection
 * @param theirCount -
 *            the index of their DOM child within it's parent collection
 * @return boolean - true if your siblings need resorting
 */
DomReconciler.prototype.aggressiveResolve = function(yourChild, theirChild, yourCount, theirCount) {
    // look ahead at your siblings for the nearest type match
    var yourMatchingSiblingGap = 9999;
    for (var yourCheck = yourCount + 1; yourCheck < yourChildren.length; yourCheck++) {
        yourChildCheck = yourChildren[yourCheck];
        if (sameTypes(yourChildCheck, theirChild)) {
            yourMatchingSiblingGap = yourCheck - yourCount;
            break;
        }
    }
    // look ahead at their siblings for the nearest type match
    var theirMatchingSiblingGap = 9999;
    for (var theirCheck = theirCount + 1; theirCheck < theirChildren.length; theirCheck++) {
        theirChildCheck = theirChildren[theirCheck];
        if (sameTypes(theirChildCheck, yourChild)) {
            theirMatchingSiblingGap = theirCheck - theirCount;
            break;
        }
    }
    if (theirMatchingSiblingGap != 9999 || yourMatchingSiblingGap != 9999) {
        // find which siblings have the nearset match and shift to it
        // adding or removing (as appropriate) non matching siblings on the way
        if (theirMatchingSiblingGap <= yourMatchingSiblingGap) {
            var oldTCount = theirCount;
            for (theirCount; theirCount < oldTCount + theirMatchingSiblingGap; theirCount++) {
                theirChildren[theirCount].seq = theirCount;
                this.appendAdded(theirChildren[theirCount], yours);
            }
        } else {
            var oldYCount = yourCount;
            for (yourCount; yourCount < oldYCount + yourMatchingSiblingGap; yourCount++)
                this.appendRemoved(yourChildren[yourCount], yours);
        }
    } else {
        // no matches in site in either sibling site so resolve by brute force
        this.appendRemoved(yourChild, yours);
        this.appendAdded(theirChild, yours);
        yourCount++;
        theirCount++;
    }
    // either way we may have messed with the sequence - notify re-sort
    needsSorting = true;
}
/**
 * Attempts to efficiently merge their DOM model to your DOM model
 * 
 * @return - boolean - did this work?
 */
DomReconciler.prototype.resolve = function() {
    this.resolvePending();
    return !this.error;
}
/**
 * Resolve each identified DOM difference
 */
DomReconciler.prototype.resolvePending = function() {
    for (var i = 0; i < this.pendingDiffs.length; i++) {
        var type = this.pendingDiffs[i].type;
        if (type == Difference.prototype.CHANGE) {
            var originalElem = this.pendingDiffs[i].yours;
            var changedElem = this.pendingDiffs[i].theirs;
            var thisParent = this.pendingDiffs[i].parent;
            this.resolveChange(originalElem, changedElem, thisParent)
        } else if (type == Difference.prototype.ADD) {
            var addedElem = this.pendingDiffs[i].theirs;
            var thisParent = this.pendingDiffs[i].parent;
            this.resolveAdd(addedElem, thisParent);
        } else if (type == Difference.prototype.REMOVE) {
            var removedElem = this.pendingDiffs[i].yours;
            var thisParent = this.pendingDiffs[i].parent;
            this.resolveRemove(removedElem, thisParent);
        } else if (type == Difference.prototype.SORT_CHILDREN) {
            var thisParent = this.pendingDiffs[i].parent;
            this.sortChildren(thisParent);
        }
    }
}
/**
 * Resolve a CHANGE type difference
 * 
 * @param yourElem -
 *            the Element from your DOM
 * @param theirElem -
 *            the Element from their DOM
 * @param theParent -
 *            the parent of yourElem
 */
DomReconciler.prototype.resolveChange = function(yourElem, theirElem, theParent) {
    yourElem.replaceNode(theirElem);
}
/**
 * Resolve an ADD type difference
 * 
 * @param theirElem -
 *            the Element from their DOM to be added
 * @param theParent -
 *            the element from your DOM which will be the new parent of
 *            theirElem
 */
DomReconciler.prototype.resolveAdd = function(theirElem, theParent) {
    if (theParent.appendChild)
        theParent.appendChild(theirElem);
    else if (thisParent.add)
        theParent.add(theirElem);
}
/**
 * Resolve a REMOVE type difference
 * 
 * @param removedElem -
 *            the Element from your DOM to be removed
 * @param theParent -
 *            the parent of yourElem
 */
DomReconciler.prototype.resolveRemove = function(yourElem, theParent) {
    if (theParent.removeChild)
        theParent.removeChild(yourElem);
    else if (theParent.remove)
        theParent.remove(yourElem);
}
/**
 * Sort the children of the specified parent according to seq attribute
 * 
 * @param theParent -
 *            the parent whose children we are sorting
 */
DomReconciler.prototype.sortChildren = function(theParent) {
    // the children of an HTML element is an array - but the API is much more
    // restricted than a conventional
    // JS Array - hence we must endure the following rigmarole
    oldChildren = theParent.children;
    var flexibleArray = new Array(oldChildren.length);
    for (var i = flexibleArray.length - 1; i > -1; i--) {
        flexibleArray[i] = oldChildren[i];
        theParent.removeChild(oldChildren[i]);
    }
    flexibleArray.sort(this.sortBySequence);
    for (var i = 0; i < flexibleArray.length; i++) {
        theParent.appendChild(flexibleArray[i]);
    }
}
/**
 * define sort by seq attribute
 * 
 * @param a -
 *            first comparee
 * @param b -
 *            second comparee
 * @return int - for the sort result
 */
DomReconciler.prototype.sortBySequence = function(a, b) {
    if (a.seq > b.seq)
        return 1;
    if (a.seq < b.seq)
        return -1;
    return 0;
}
/**
 * Add a CHANGE difference to the list of all differences
 * 
 * @param yourChild -
 *            the child node from your DOM tree
 * @param theirChild -
 *            the child node from their DOM tree
 * @param theParent -
 *            the parent of yourChild
 */
DomReconciler.prototype.appendChanged = function(yourChild, theirChild, theParent) {
    this.pendingDiffs[this.pendingDiffs.length] = new Difference(Difference.prototype.CHANGE, yourChild, theirChild, theParent);
}
/**
 * Add an ADD difference to the list of all differences
 * 
 * @param theirElem -
 *            the node to be added
 * @param theParent -
 *            the node from your DOM which will be the new parent of theirElem
 */
DomReconciler.prototype.appendAdded = function(elem, theParent) {
    this.pendingDiffs[this.pendingDiffs.length] = new Difference(Difference.prototype.ADD, '', elem, theParent);
}
/**
 * Add a REMOVE difference to the list of all differences
 * 
 * @param yourElem -
 *            the node to be removed
 * @param theParent -
 *            the parent of yourElem
 */
DomReconciler.prototype.appendRemoved = function(elem, theParent) {
    this.pendingDiffs[this.pendingDiffs.length] = new Difference(Difference.prototype.REMOVE, elem, '', theParent);
}
/**
 * Add a SORT difference to the list of all differences
 * 
 * @param theParent -
 *            the parent of the elements to be sorted
 */
DomReconciler.prototype.appendSort = function(theParent) {
    this.pendingDiffs[this.pendingDiffs.length] = new Difference(Difference.prototype.SORT_CHILDREN, '', '', theParent);
}
/**
 * Add an issue indicating that a difference could not be resolved
 * 
 * @param theParent -
 *            the parent of the elements to be sorted
 * @param yourChild -
 *            the child node from your DOM tree
 * @param theirChild -
 *            the child node from their DOM tree
 */
DomReconciler.prototype.appendIssue = function(yourChild, theirChild) {
    this.resolveIssues[this.resolveIssues.length] = new Array(yourChild, theirChild);
}
// *************************************************************************************
// DIFFERENCE OBJECT
// *************************************************************************************
/**
 * @class Represents a difference between your DOM model and their DOM model
 *        that must be reconciled
 * @constructor
 * @param type -
 *            the type of the difference (change, add, remove or sort)
 * @param yours -
 *            the value of your element
 * @param theirs -
 *            the value of their element
 * @param parent -
 *            the parent of your element
 * @return a new Difference instance
 */
function Difference(type, yours, theirs, parent) {
    this.type = type;
    this.yours = yours;
    this.theirs = theirs;
    this.parent = parent;
}
// *************************************************************************************
// DIFFERENCE OBJECT static variables
// *************************************************************************************
/**
 * Change type: element to be changed
 * 
 * @type String
 */
Difference.prototype.CHANGE = new String("Change");
/**
 * Add type: element to be added
 * 
 * @type String
 */
Difference.prototype.ADD = new String("Add");
/**
 * Remove type: element to be removed
 * 
 * @type String
 */
Difference.prototype.REMOVE = new String("Remove");
/**
 * Sort type: children of this parent need sorting
 * 
 * @type String
 */
Difference.prototype.SORT_CHILDREN = new String("SortChildren");
// *************************************************************************************
// DIFFERENCE OBJECT instance variables
// *************************************************************************************
/**
 * type of difference to be resolved
 * 
 * @type String
 */
Difference.prototype.type;
/**
 * your element
 * 
 * @type Node
 */
Difference.prototype.yours;
/**
 * their element
 * 
 * @type Node
 */
Difference.prototype.theirs;
/**
 * the parent of your element
 * 
 * @type Node
 */
Difference.prototype.parent;
// *************************************************************************************
// DIFFERENCE OBJECT instance variables
// *************************************************************************************
/**
 * type of difference to be resolved
 * 
 * @type String
 */
Difference.prototype.type = null;
/**
 * your element
 * 
 * @type Array
 */
Difference.prototype.yours = null;
/**
 * their element
 * 
 * @type Array
 */
Difference.prototype.theirs = null;
/**
 * the parent of your element
 * 
 * @type Array
 */
Difference.prototype.parent = null;
// *************************************************************************************
// CONVENIENCE METHODS INVOKING REMOTE UPDATER
// *************************************************************************************
/**
 * Dynamically repaint the form specified by the containerId, triggering any
 * componentActions which are observed by the changed param
 * 
 * @param url -
 *            url to post to
 * @param formId -
 *            id of form we are posting to
 * @param containerId -
 *            id of panel to repaint
 * @param changedElemName -
 *            name of form element that triggered this update
 * @param changedParamName -
 *            name of param which triggered this update
 */
function updatePage(url, formId, containerId, changedElemName, changedParamName) {
    // if we were going to submit anyway do nothing
    if (window.event) {
        toElem = window.event.toElement
        if (isValidObject(toElem)) {
            if (toElem.type == "submit")
                return;
        }
    }
    // build post data form input values (user values, not
    // buttons/submits/hiddens)...
    postData = getFormData(document.getElementById(formId), false);
    // simulate an "update" button being pressed so as to trigger the
    // appropriate action/command (also indicates which param changed)
    postData = postData + 'updatePage_ButtonOK=' + changedParamName;
    updater = new RemoteUpdater(url, 'POST', containerId, postData, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function isValidObject(objToTest) {
    if (null == objToTest) {
        return false;
    }
    if ("undefined" == typeof(objToTest)) {
        return false;
    }
    return true;
}
/**
 * Dynamically repaint the form specified by the containerId, triggering any
 * componentActions which are observed by the cahnged param
 * 
 * @param url -
 *            url to post to
 * @param formId -
 *            id of form we are posting to
 * @param containerId -
 *            id of panel to repaint
 * @param changedParamName -
 *            name of param which triggered this update
 */
function updateFragment(url, formId, containerId, triggerActionName, triggerActionValue) {
    // alert(triggerActionValue);
    // if we were going to submit anyway do nothing
    if (window.event) {
        toElem = window.event.toElement
        if (isValidObject(toElem)) {
            if (toElem.type == "submit")
                return;
        }
    }
    // build post data form input values (user values, not
    // buttons/submits/hiddens)...
    postData = postData = getFormData(document.getElementById(formId), false);
    // simulate an "update" button being pressed so as to trigger the
    // appropriate action/command (also indicates which param changed)
    postData = postData + 'actn=' + triggerActionName + '&' + 'actv=' + triggerActionValue;
    // alert("postData=" + postData);
    // alert("containerId=" + containerId);
    // alert("url=" + url);
    updater = new RemoteUpdater(url, 'POST', containerId, postData, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}
/**
 * Dynamically update contents of a target container based on the response to a
 * call to the given url. Convenience method for RemoteUpdater using GET with no
 * POST data.
 * 
 * @param url -
 *            url to post to
 * @param containerId -
 *            id of panel to repaint
 * @param mode -
 *            (optional) update mode. Options are Resolve, Clobber, Redirect.
 *            Defaults to Resolve if none present.
 */
function updateContainer(url, containerId) {
    // mode is RESOLVE by default
    var mode = RemoteUpdater.prototype.RESOLVE;
    if (arguments.length == 3)
        mode = arguments[2];
    var updater = new RemoteUpdater(url, 'GET', containerId, null, mode);
    updater.update();
}
/**
 * Sets focus on the next form field. Because RemoteUpdater updates entire form
 * panels, focus doesn't transition along the sequence of form fields as usual.
 * This inspects the form for the field after the given field and sets focus on
 * it.
 * 
 * @param formId -
 *            id of the form
 * @param elemName -
 *            name (not id) of the source form field
 */
function setFocusOnNextField(formId, elemName) {
    var formElem = document.getElementById(formId);
    var field = formElem.elements[elemName]; // by default, use source field
    // as next field
    var fields = formElem.elements;
    for (var i = 0; i < fields.length; i++) {
        // alert('checking ' + fields[i].name);
        if (fields[i].name == elemName) {
            if (i + 1 < fields.length) {
                field = fields[i + 1];
                // alert("setting focus on " + field.name);
                break;
            }
        }
    }
    // add a slight delay before setting field focus
    // put the focus in try/catch in case we're trying to set focus on something
    // that doesn't accept focus (is hidden, for example)
    setTimeout((function() {
        try {
            field.focus()
        } catch (e) {}
    }), 15);
}

function setFocus(id) {
    try {
        document.getElementById(id).focus();
    } catch (e) {}
}
// *************************************************************************************
// XMLHTTP builder
// *************************************************************************************
/**
 * initializes xmlhttp object for remote scripting
 * 
 * @return the new xmlhttp object
 */
function getXMLHTTP() {
    var alerted;
    var xmlhttp;
    /* @cc_on @ */
    /*
     * @if (@_jscript_version >= 5) // JScript gives us Conditional compilation,
     * we can cope with old IE versions. try { xmlhttp=new
     * ActiveXObject("Msxml2.XMLHTTP") } catch (e) { try { xmlhttp=new
     * ActiveXObject("Microsoft.XMLHTTP") } catch (E) { alert("You must have
     * Microsofts XML parsers available") } } @else alert("You must have JScript
     * version 5 or above.") xmlhttp=false alerted=true @end @
     */
    if (!xmlhttp && !alerted) {
        // Non ECMAScript Ed. 3 will error here (IE<5 ok), nothing I can
        // realistically do about it, blame the w3c or ECMA for not
        // having a working versioning capability in <SCRIPT> or
        // ECMAScript.
        try {
            xmlhttp = new XMLHttpRequest();
        } catch (e) {
            alert("You need a browser which supports an XMLHttpRequest Object.\nMozilla build 0.9.5 has this Object and IE5 and above, others may do, I don't know, any info jim@jibbering.com")
        }
    }
    return xmlhttp
}
// *************************************************************************************
// TESTING
// *************************************************************************************
function testRemoteWorkflowNav(url) {
    var updater = new RemoteUpdater(url, 'GET', 'all', null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}
// *************************************************************************************
// MAPS
// *************************************************************************************
// *************************************************************************************
// LOGGING
// *************************************************************************************
var RemoteScriptingLogger = {
    debug: false,
    log: function(message) {
        if (RemoteScriptingLogger.debug && document.getElementById("_jsDebugConsole")) {
            document.getElementById("_jsDebugConsole").value = trim(message);
        }
    }
}

function pitchletProgress() {
    // window.scrollBy(0,0);
    var newContainer = document.getElementById("container");
    newContainer.innerHTML = "<br/><br/><div style='text-align:center;'>" +
        "<i class='fal fa-sync fa-spin c-gray fa-5x fa-fw m-25'></i><br><br><b>Processing</b>...<br>" +
        "We are processing your request. " +
        "Please allow few seconds to initialize all required analytics.</div>";
}

function progress() {
    var newContainer = document.getElementById("container");
    newContainer.innerHTML = "<div class='progress'><img alt='macroaxis progress' src='/images/progress/smallCircle.gif' border='0'>&nbsp;Processing...</div>";
}

function marketPopUpProgress() {
    var newContainer = document.getElementById("symbolUpdate");
    setTimeout("", 100);
    // newContainer.appendChild(document.createTextNode("Processing...<img
    // src='/images/progress.gif'>"));
    newContainer.innerHTML = "<div class='marketProgress'><img src='/images/progress/progress/smallCircle.gif' align='baseline' border='0'>&nbsp;Processing...</div>";
}

function symbolBoxProgress() {
    var newContainer = document.getElementById("symbolBox");
    // newContainer.appendChild(document.createTextNode("Processing...<img
    // src='/images/progress.gif'>"));
    newContainer.innerHTML = "<div class='symbolBoxProgress'>Loading &nbsp;<img src='/images/progress/flatStraight.gif' align='baseline' border='0'></div>";
}

function searchPopUpProgressMain() {
    var newContainer = document.getElementById("searchBoxResultMain");
    if (newContainer) {
        newContainer.innerHTML = "<div class='searchProgress'><img src='/images/progress/flatStraight.gif' align='baseline' border='0'></div>";
    }
}

function searchPopUpProgress() {
    var newContainer = document.getElementById("searchBoxResult");
    // newContainer.appendChild(document.createTextNode("Processing...<img
    // src='/images/ajax-loader'>"));
    newContainer.innerHTML = "<div class='searchProgress'><img src='/images/progress/flatStraight.gif' align='baseline' border='0'></div>";
}

function updatePitchletContainer(command) {
    postData = "/" + command + ".jsp";
    pitchletProgress();
    updater = new RemoteUpdater(postData, 'POST', "container", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function openDiscussion(symbol) {
    url = "";
    var el = document.getElementById("partnerContent");
    // var bel = document.getElementById("bigPartnerContent");
    // var pel = document.getElementById("partnerSearch");
    if (!el) {
        url = "/?pitch=symbolViewLookUp&ssd=" + symbol + "&s=" + symbol + "&main=true&type=symbolChat";
        openPage(url);
    } else {
        url = "/?pitch=symbolViewLookUp&ssd=" + symbol + "&s=" + symbol + "&main=true&type=symbolChat";
        top.location.href = url;
    }
}

function viewAdvisor(aid, name) {
    var pel = document.getElementById("partnerSearch");
    var bel = document.getElementById("bigPartnerContent");
    if (bel) {
        // alert(bel);
        postData = "/partnerAdviserInfo.jsp?aid=" + aid + "&nm=" + name;
        genericProgress(bel);
        updater = new RemoteUpdater(postData, 'POST', "bigPartnerContent", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    } else if (pel) {
        postData = "/?pitch=adviserInfo&aid=" + aid + "&nm=" + name;
        top.location.href = postData;
    } else {
        postData = "/?pitch=adviserInfo&aid=" + aid + "&nm=" + name;
        openPage(postData);
    }
}

function viewNegotiation(uid, isAdviser, name) {
    if (isAdviser) {
        postData = "/?pitch=adviserInfo&zd=" + uid + "&nm=" + name;
    } else {
        postData = "/?pitch=negotiatedPortfolio&zd=" + uid + "&nm=" + name;
    }
    openPage(postData);
}
/**
 * Dynamically repaint the form specified by the containerId, triggering any
 * componentActions which are observed by the cahnged param
 * 
 * @param url -
 *            url to post to
 * @param formId -
 *            id of form we are posting to
 * @param containerId -
 *            id of panel to repaint
 * @param changedParamName -
 *            name of param which triggered this update
 */
function viewMainSymbolAndAddLookup(symbol) {
    var n = document.getElementById("numberOfShares");
    if (n) {
        numberOfShares = n.value;
    }
    postData = "/symbolViewLookUp.jsp?s=" + symbol + "&main=true&action=add&n=" + numberOfShares;
    pitchletProgress();
    updater = new RemoteUpdater(postData, 'POST', "container", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}
/**
 * Dynamically repaint the form specified by the containerId, triggering any
 * componentActions which are observed by the cahnged param
 * 
 * @param url -
 *            url to post to
 * @param formId -
 *            id of form we are posting to
 * @param containerId -
 *            id of panel to repaint
 * @param changedParamName -
 *            name of param which triggered this update
 */
function updateBodyContainer(command) {
    // build post data form input values (user values, not
    // buttons/submits/hiddens)...
    postData = "/" + command + ".jsp";
    // postData = "?pitch="+command;
    // simulate an "update" button being pressed so as to trigger the
    // appropriate action/command (also indicates which param changed)
    // alert(url);
    progress();
    updater = new RemoteUpdater(postData, 'POST', "container", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function updateDirectContainer(url) {
    // build post data form input values (user values, not
    // buttons/submits/hiddens)...
    postData = url;
    // postData = "?pitch="+command;
    // simulate an "update" button being pressed so as to trigger the
    // appropriate action/command (also indicates which param changed)
    // alert(url);
    progress();
    updater = new RemoteUpdater(postData, 'POST', "container", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function updateBodyContainerFromPanel(command, formId, divToPut) {
    // alert(formId);
    scroll(0, 0);
    var formVar = document.getElementById(formId);
    updateBodyContainerFromForm(command, formVar, divToPut);
}

function updateBodyContainerFromForm(command, formElement, divToPut) {
    if (!divToPut) {
        divToPut = "container";
    }
    postData = "/" + command + ".jsp";
    // alert(postData);
    var formElements = formElement.elements;
    if (formElements.length > 0) {
        postData = postData + '?';
        for (i = 0; i < formElements.length; i++) {
            elem = formElements[i];
            if (elem.type != "button" && elem.type != "submit" && elem.type != "hidden") {
                if (elem.type == "radio" || elem.type == "checkbox") {
                    if (elem.checked)
                        postData = postData + elem.name + "=" + elem.value + '&';
                } else {
                    var value = elem.value;
                    if (value != null) {
                        var reNewLines = /[\n\r]/g;
                        value = value.replace(reNewLines, "@");
                        elem.value = value;
                        var name = elem.name;
                        if (!name || name == null || name == "") {
                            name = elem.id;
                        }
                        postData = postData + name + "=" + elem.value + '&';
                    }
                }
            } else {
                if (elem.type == "hidden") {
                    var sufix = "EnumInput";
                    var enumName = elem.id;
                    var enumName = enumName.substring(0, enumName.length - sufix.length);
                    if (!enumName || enumName == null || enumName == "") {
                        continue;
                    }
                    // alert(name);
                    postData = postData + enumName + "=" + elem.value + '&';
                }
            }
        }
    }
    portIdEl = document.getElementById('pid');
    if (portIdEl) {
        pid = portIdEl.value;
        if (pid) {
            postData = postData + "xd=" + pid;
        }
    }
    pitchletProgress();
    var url = postData;
    // alert(url);
    $.ajax(url).done((function(data) {
        // alert("done");
        $("#" + divToPut).html(data);
        // alert($("#"+divToPut));
        $("#" + divToPut).fadeOut(0).fadeIn(2500);
        displayPostGenericPieChart('opt0');
        displayPostGenericPieChart('cur0');
        displayPostGenericPieChart('0');
        displayPostGenericFunnelChart('0');
        displayPostExpectedOptimizationBarsChart();
        displayPostOptimizationRiskReturnBubbles(0);
        return;
        // executeDivScripts(divToPut);
    }));
    // alert(url);
    // alert(postData);
}

function updateModelFromForm(command, formElement, divToPut) {
    postData = "/" + command + ".jsp";
    var formElements = formElement.elements;
    if (formElements.length > 0) {
        postData = postData + '?';
        for (i = 0; i < formElements.length; i++) {
            elem = formElements[i];
            if (elem.type != "button" && elem.type != "submit" && elem.type != "hidden" && elem.name.indexOf('_display') == -1) {
                if (elem.type == "radio" || elem.type == "checkbox") {
                    if (elem.checked)
                        postData = postData + elem.name + "=" + elem.value + '&';
                } else {
                    var value = elem.value;
                    if (value != null) {
                        var reNewLines = /[\n\r]/g;
                        value = value.replace(reNewLines, "@");
                        elem.value = value;
                        var name = elem.name;
                        if (!name) {
                            name = elem.id;
                        }
                        postData = postData + name + "=" + elem.value + '&';
                    }
                }
            }
        }
    }
    portIdEl = document.getElementById('pid');
    if (portIdEl) {
        pid = portIdEl.value;
        if (pid) {
            postData = postData + "xd=" + pid;
        }
    }
    pitchletProgress();
    updater = new RemoteUpdater(postData, 'POST', divToPut, null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}
/**
 * Dynamically repaint the form specified by the containerId, triggering any
 * componentActions which are observed by the cahnged param
 * 
 * @param url -
 *            url to post to
 * @param formId -
 *            id of form we are posting to
 * @param containerId -
 *            id of panel to repaint
 * @param changedParamName -
 *            name of param which triggered this update
 */
function updateModelContainer(command) {
    // build post data form input values (user values, not
    // buttons/submits/hiddens)...
    postData = "/" + command + ".jsp";
    // postData = "?pitch="+command;
    // simulate an "update" button being pressed so as to trigger the
    // appropriate action/command (also indicates which param changed)
    // alert(url);
    pitchletProgress();
    updater = new RemoteUpdater(postData, 'POST', "container", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}
/**
 * Dynamically repaint the form specified by the containerId, triggering any
 * componentActions which are observed by the cahnged param
 * 
 * @param url -
 *            url to post to
 * @param formId -
 *            id of form we are posting to
 * @param containerId -
 *            id of panel to repaint
 * @param changedParamName -
 *            name of param which triggered this update
 */
function updateBasicContainer(command) {
    // build post data form input values (user values, not
    // buttons/submits/hiddens)...
    postData = "/" + command + ".jsp";
    progress();
    updater = new RemoteUpdater(postData, 'POST', "container", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}
/**
 * Dynamically repaint the form specified by the containerId, triggering any
 * componentActions which are observed by the cahnged param
 * 
 * @param url -
 *            url to post to
 * @param formId -
 *            id of form we are posting to
 * @param containerId -
 *            id of panel to repaint
 * @param changedParamName -
 *            name of param which triggered this update
 */
function updatePortfolioSymbolLookUp(symbol) {
    // build post data form input values (user values, not
    // buttons/submits/hiddens)...
    postData = "/portfolioCompanyLookUp.jsp" + "?s=" + symbol;
    setTimeout("", 10);
    // marketPopUpProgress();
    normalizeSymbolUpdateDiv();
    updater = new RemoteUpdater(postData, 'POST', "symbolUpdate", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}
/**
 * Dynamically repaint the form specified by the containerId, triggering any
 * componentActions which are observed by the cahnged param
 * 
 * @param url -
 *            url to post to
 * @param formId -
 *            id of form we are posting to
 * @param containerId -
 *            id of panel to repaint
 * @param changedParamName -
 *            name of param which triggered this update
 */
function updateCompareSymbolLookUp(symbol) {
    postData = "/compareSymbolLookUp.jsp" + "?search=" + symbol;
    postData = addDatesToPost(postData);
    setTimeout("", 100);
    searchPopUpProgress();
    updater = new RemoteUpdater(postData, 'POST', "searchBoxResult", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}
/**
 * Dynamically repaint the form specified by the containerId, triggering any
 * componentActions which are observed by the cahnged param
 * 
 * @param url -
 *            url to post to
 * @param formId -
 *            id of form we are posting to
 * @param containerId -
 *            id of panel to repaint
 * @param changedParamName -
 *            name of param which triggered this update
 */
function updatePlotterSymbolLookUp(symbol) {
    postData = "/plotSymbolLookUp.jsp" + "?search=" + symbol;
    postData = addDatesToPost(postData);
    setTimeout("", 100);
    searchPopUpProgress();
    updater = new RemoteUpdater(postData, 'POST', "searchBoxResult", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}
/**
 * Dynamically repaint the form specified by the containerId, triggering any
 * componentActions which are observed by the cahnged param
 * 
 * @param url -
 *            url to post to
 * @param formId -
 *            id of form we are posting to
 * @param containerId -
 *            id of panel to repaint
 * @param changedParamName -
 *            name of param which triggered this update
 */
function updateVolatilitySymbolLookUp(symbol) {
    postData = "/volatilitySymbolLookUp.jsp" + "?search=" + symbol;
    postData = addDatesToPost(postData);
    setTimeout("", 100);
    searchPopUpProgress();
    updater = new RemoteUpdater(postData, 'POST', "searchBoxResult", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}
/**
 * Dynamically repaint the form specified by the containerId, triggering any
 * componentActions which are observed by the cahnged param
 * 
 * @param url -
 *            url to post to
 * @param formId -
 *            id of form we are posting to
 * @param containerId -
 *            id of panel to repaint
 * @param changedParamName -
 *            name of param which triggered this update
 */
function updateFundamentalsSymbolLookUp(symbol) {
    var sup = document.getElementById('userPicksSearch');
    if (sup) {
        updateUserPicksStandardFilterFromForm(symbol);
    } else {
        postData = "/fundamentalsSymbolLookUp.jsp" + "?search=" + symbol;
        setTimeout("", 100);
        searchPopUpProgress();
        updater = new RemoteUpdater(postData, 'POST', "searchBoxResult", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
}

function updateUserPicksStandardFilterFromForm(symbol) {
    var postData = "/userPicksStandardSymbolLookUp.jsp?search=" + symbol;
    userPicksSearchProgress();
    updater = new RemoteUpdater(postData, 'POST', "userPicksSearch", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function createEfficientPortfolio(postData) {
    swal.queue([{
        title: "Create new portfolio?",
        confirmButtonText: 'Yes, Create it!',
        confirmButtonColor: "green",
        showCancelButton: true,
        showConfirmButton: true,
        allowEscapeKey: false,
        allowOutsideClick: false,
        cancelButtonColor: "#aaa",
        type: "question",
        footer: "This will not change your existing portfolio",
        showLoaderOnConfirm: true,
        preConfirm: function() {
            return new Promise(function(resolve) {
                $.get(postData)
                    .done((function(data) {
                        if (data == "error") {
                            Swal.fire({
                                title: "Error!",
                                text: "The portfolio not been added. Please check the orinal positions!",
                                type: "error",
                                showConfirmButton: false,
                                allowOutsideClick: true,
                                timer: 3500
                            })
                        } else if (data == "genericError") {
                            Swal.fire({
                                title: "Error!",
                                text: "The portfolio not been added. Please check the orinal positions!",
                                type: "error",
                                showConfirmButton: false,
                                allowOutsideClick: true,
                                timer: 3500
                            })
                        } else if (data == "activationError") {
                            activateMessage();
                        } else if (data == "maxError") {
                            maxPortfolio();
                        } else if (data == "holdingsError") {
                            Swal.fire({
                                title: "Error!",
                                text: "The portfolio not been added. Please check the orinal positions!",
                                type: "error",
                                showConfirmButton: false,
                                allowOutsideClick: true,
                                timer: 3500
                            })
                        } else {
                            Swal.fire({
                                title: " Done!",
                                footer: "The new portfolio has been created.",
                                type: "success",
                                allowEscapeKey: false,
                                allowOutsideClick: false,
                                // cancelButtonText: "OK",
                                showCancelButton: false,
                                confirmButtonText: "View Portfolio",
                                confirmButtonColor: "green"
                            }).then((result) => {
                                goToNewPortfolio(data, result.value);
                            })
                        }
                    }))
            })
        }
    }]).catch(swal.noop);
}

function createSuggestedPortfolio(pid, symbolicId) {
    // document.location.href = "#";
    // alert(pid);
    var holding = document.getElementById("opid_" + symbolicId);
    var risk = document.getElementById("risk_" + symbolicId);
    var ret = document.getElementById("ret_" + symbolicId);
    var sharpe = document.getElementById("sharpe_" + symbolicId);
    // alert(sharpe);
    var sname = document.getElementById("suggestPortfolioName_" + symbolicId);
    var postData = "/act.ma?action=sgAdd&xd=" + pid +
        "&nm=" + sname.value +
        "&opid=" + holding.value +
        "&risk=" + risk.value +
        "&ret=" + ret.value +
        "&sharpe=" + sharpe.value;
    createEfficientPortfolio(postData);
}

function backtestOptimalPortfolio(symbolicId) {
    // alert(postData);
    setTimeout("", 100);
    if (symbolicId) {
        var holding = document.getElementById("opid_" + symbolicId);
    } else {
        var holding = document.getElementById("opid_0");
    }
    postData = "/myPortfolioBacktestingInclude.jsp?t=7&s=" + holding.value;
    // alert(postData);
    // alert(postData);
    popUpBacktestingDialog(postData);
    // alert(postData);
    // openPage(postData);
    // updater = new RemoteUpdater(postData, 'POST', "NOcontainer", null,
    // RemoteUpdater.prototype.RESOLVE);
    // updater.update();
}

function createOptimalPortfolio(pid) {
    var holding = document.getElementById("opid_0");
    var risk = document.getElementById("risk_0");
    var ret = document.getElementById("ret_0");
    var sharpe = document.getElementById("sharpe_0");
    if (!holding) {
        holding = document.getElementById("opid_idea");
    }
    if (!ret) {
        ret = document.getElementById("ret_idea");
    }
    if (!risk) {
        risk = document.getElementById("risk_idea");
    }
    if (!sharpe) {
        sharpe = document.getElementById("sharpe_idea");
    }
    postData = "/act.ma?action=rAdd&xd=" + pid +
        "&opid=" + holding.value +
        "&risk=" + risk.value +
        "&ret=" + ret.value +
        "&sharpe=" + sharpe.value;
    createEfficientPortfolio(postData);
    // updater = new RemoteUpdater(postData, 'POST', "NOcontainer", null,
    // RemoteUpdater.prototype.RESOLVE);
    // updater.update();
}

function submitNickName(name) {
    postData = "/act.ma?action=nickAdd&nickName=" + name;
    setTimeout("", 100);
    updater = new RemoteUpdater(postData, 'POST', "nick", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        $("button").button();
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function replaceEfficientPortfolioWithOptimal() {
    postData = "/Optimization_ModelPitchlet.jsp?action=replaceWithOptimal&pitch='Optimization_ModelPitchlet'";
    setTimeout("", 100);
    pitchletProgress();
    updater = new RemoteUpdater(postData, 'POST', "container", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}
/**
 * Dynamically repaint the form specified by the containerId, triggering any
 * componentActions which are observed by the cahnged param
 * 
 * @param url -
 *            url to post to
 * @param formId -
 *            id of form we are posting to
 * @param containerId -
 *            id of panel to repaint
 * @param changedParamName -
 *            name of param which triggered this update
 */
function updateCompareGraph(symbol) {
    if (symbol == "setDates") {
        updateDateRangeFromForm("/marketCompanyLookUp.jsp");
    } else {
        postData = "/marketCompanyLookUp.jsp" + "?s=" + symbol + "&view=spc";
        // marketPopUpProgress();
        setTimeout("", 100);
        normalizeSymbolUpdateDiv();
        updater = new RemoteUpdater(postData, 'POST', "symbolUpdate", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
}
/**
 * Dynamically repaint the form specified by the containerId, triggering any
 * componentActions which are observed by the cahnged param
 * 
 * @param url -
 *            url to post to
 * @param formId -
 *            id of form we are posting to
 * @param containerId -
 *            id of panel to repaint
 * @param changedParamName -
 *            name of param which triggered this update
 */
function updatePlotterGraph(symbol) {
    if (symbol == "setDates") {
        updateDateRangeFromForm("/marketCompanyLookUp.jsp");
    } else {
        postData = "/marketCompanyLookUp.jsp" + "?s=" + symbol + "&view=spp";
        postData = addDatesToPost(postData);
        // marketPopUpProgress();
        setTimeout("", 100);
        normalizeSymbolUpdateDiv();
        updater = new RemoteUpdater(postData, 'POST', "symbolUpdate", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
}
/**
 * Dynamically repaint the form specified by the containerId, triggering any
 * componentActions which are observed by the cahnged param
 * 
 * @param url -
 *            url to post to
 * @param formId -
 *            id of form we are posting to
 * @param containerId -
 *            id of panel to repaint
 * @param changedParamName -
 *            name of param which triggered this update
 */
function updateVolatilityGraph(symbol) {
    if (symbol == "setDates") {
        updateDateRangeFromForm("/marketCompanyLookUp.jsp");
    } else {
        postData = "/marketCompanyLookUp.jsp" + "?s=" + symbol + "&view=spv";
        postData = addDatesToPost(postData);
        // marketPopUpProgress();
        setTimeout("", 100);
        normalizeSymbolUpdateDiv();
        updater = new RemoteUpdater(postData, 'POST', "symbolUpdate", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
}

function displaysPortfolio() {
    var p = document.getElementById("portfolioInput");
    if (p) {
        // alert(p);
        return true;
    } else {
        // alert(p);
        return false;
    }
}

function displaysTotalPortfolioValue() {
    var p = document.getElementById("totalPortfolioValue");
    if (p) {
        // alert(p);
        return true;
    } else {
        // alert(p);
        return false;
    }
}

function displaysMyPortfolio() {
    var p = document.getElementById("myPortfolioInput");
    if (p) {
        // alert(p);
        return true;
    } else {
        // alert(p);
        return false;
    }
}

function displaysGooglePortfolio() {
    var p = document.getElementById("googlePortfolioInput");
    if (p) {
        // alert(p);
        return true;
    } else {
        // alert(p);
        return false;
    }
}

function displaysQuoteInfo() {
    var p = document.getElementById("quoteSummary");
    if (p) {
        // alert(p);
        return true;
    } else {
        // alert(p);
        return false;
    }
}

function isAfterHours() {
    var afterHourId = document.getElementById("ahr");
    var afterHour = "";
    if (afterHourId != null) {
        afterHour = afterHourId.value;
        if (afterHour == 'true') {
            return true;
        }
    }
    return false;
}

function changePortfolioDisplayMode(mode) {
    var modeElementid = document.getElementById("pViewId");
    if (modeElementid != null) {
        modeElementid.value = mode;
    }
    var afterHourId = document.getElementById("ahr");
    if (afterHourId != null) {
        afterHourId.value = 'xdes';
    }
    updatePortfolio();
}

function changeDashboardMode(mode) {
    var helpDiv = document.getElementById("x");
    helpDiv.innerHTML = "<div class='symbolBoxProgress'><b>Loading...</b> &nbsp;<img src='/images/progress/flatStraight.gif' align='baseline' border='0'></div><br>";
    postData = "/dashBoard.jsp?mode=" + mode;
    postData = addPortfolioHomeAttributesToUrl(postData);
    updater = new RemoteUpdater(postData, 'POST', "dashboard", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        drawTinyIntradaySymbolCharts();
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function changeReturnMode(mode) {
    var helpDiv = document.getElementById("x");
    helpDiv.innerHTML = "<div class='symbolBoxProgress'><b>Loading...</b> &nbsp;<img src='/images/progress/flatStraight.gif' align='baseline' border='0'></div><br>";
    postData = "/act.ma?action=pReturns&mode=" + mode;
    postData = addPortfolioHomeAttributesToUrl(postData);
    updater = new RemoteUpdater(postData, 'POST', "dashboard", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function changeScoreMode(mode) {
    var helpDiv = document.getElementById("x");
    helpDiv.innerHTML = "<div class='symbolBoxProgress'><b>Loading...</b> &nbsp;<img src='/images/progress/flatStraight.gif' align='baseline' border='0'></div><br>";
    postData = "/act.ma?action=pAnalysis&mode=" + mode;
    postData = addPortfolioHomeAttributesToUrl(postData);
    updater = new RemoteUpdater(postData, 'POST', "dashboard", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function changeEfficientFrontierMode(mode) {
    displayEfficientFrontier(mode);
}

function updateBear() {
    if (isAfterHours()) {
        return;
    }
    setTimeout("updateBear()", 60000);
    postData = "/partnerBearOfTheDayInclude.jsp";
    updater = new RemoteUpdater(postData, 'POST', "bearOfTheDay", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function updateUserSentiment() {
    var usp = document.getElementById("userSentiment");
    // alert(usp);
    if (!usp) {
        setTimeout("updateUserSentiment()", 3000);
        return;
    }
    var sn = document.getElementById("sentimentNumber");
    var vsn = 3;
    if (sn) {
        vsn = sn.value;
    }
    var isBigE = document.getElementById("isBig");
    var isBig = false;
    if (isBigE) {
        isBig = true;
    }
    // alert(isBig);
    if (!sentimentIncrementer) {
        sentimentIncrementer = 0;
    }
    if (sentimentIncrementer > 20) {
        sentimentIncrementer = 1;
    }
    sentimentIncrementer++;
    setTimeout("updateUserSentiment()", 45000);
    postData = "/userSentimentInclude.jsp?move=" + sentimentIncrementer + "&n=" + vsn + "&isBig=" + isBig;
    var postAction = function() {
        options = {};
        $("#effect").effect("highlight", options, 1500, sentimentCallBack);
    };
    updater = new RemoteUpdater(postData, 'POST', "userSentiment", null, RemoteUpdater.prototype.RESOLVE);
    updater.setPostResponseAction(postAction);
    updater.update();
}

function sentimentCallBack() {
    setTimeout((function() {
        $("#effect:hidden").removeAttr('style').hide().fadeIn();
    }), 6000);
}

function updateBull() {
    if (isAfterHours()) {
        return;
    }
    setTimeout("updateBull()", 60000);
    postData = "/widgets/partnerBullOfTheDayInclude.jsp";
    updater = new RemoteUpdater(postData, 'POST', "bullOfTheDay", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function updateBears() {
    if (isAfterHours()) {
        return;
    }
    setTimeout("updateBears()", 60000);
    postData = "/widgets/partnerBearsOfTheDayInclude.jsp";
    updater = new RemoteUpdater(postData, 'POST', "bearOfTheDay", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function updateBulls() {
    if (isAfterHours()) {
        return;
    }
    setTimeout("updateBulls()", 60000);
    postData = "/widgets/partnerBullsOfTheDayInclude.jsp";
    updater = new RemoteUpdater(postData, 'POST', "bullOfTheDay", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function updateCars() {
    if (isAfterHours()) {
        return;
    }
    setTimeout("updateCars()", 30000);
    postData = "/partnerCarSectorInclude.jsp";
    updater = new RemoteUpdater(postData, 'POST', "cars", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function updateSymbolPageQuoteBlock() {
    if (!updateLiveFlag) {
        return;
    }
    // alert('b');
    setTimeout("updateSymbolPageQuoteBlock()", 15000);
    var symbolPageQuoteBlock = document.getElementById("symbolPageQuoteBlock");
    if (symbolPageQuoteBlock != null) {
        var symbolEl = document.getElementById("toUpdateSymbol");
        symbol = symbolEl.value;
    }
    if (symbol) {
        var postData = "/act.ma?action=updateSymbolBlock&s=" + symbol;
        $.post(postData, (function(data) {
            $("#symbolPageQuoteBlock").html(data).show();
            $("#symbolQuoteValueFlat").fadeOut(0).fadeIn(2500);
            // drowHiLowSymbolSparklines();
        }));
    }
}

function updatePortfolioLive() {
    if (!updateLiveFlag) {
        // alert("not updating");
        return;
    }
    // alert("updating");
    setTimeout("updatePortfolioLive()", 15000);
    updatePortfolio();
    $(document).ready((function() {
        $('.symbolUpdated').each((function() {
            // alert(this);
            // $(this).fadeIn( "slow", function() {
            // $(this).animate({color: '#000000'; backgroundColor: '#000000'},
            // 'slow');
            $(this).fadeTo(0.1, "slow", (function() {
                $(this).css("background-color", "#eeeeee");
            }));
            // $(this).animate({ opacity: 1 }, 3000);
            // });
            // $(this).css("background-color", "#8b9dc3");
            // $(this).fadeOut("slow");
            // $(this).fadeIn("slow");
        }));
    }));
}

function updatePortfolio() {
    // alert(updateLiveFlag);
    var pElementid = document.getElementById("pid");
    var pid = "";
    if (pElementid != null) {
        pid = pElementid.value;
    }
    if (displaysPortfolio()) {
        // postData = "/act.ma?action=portUpd&ptm=t&xd="+pid;
        postData = "/portfolio.jsp" + "?action=update&mini=y&xd=" + pid;
        // alert(postData);
        updater = new RemoteUpdater(postData, 'POST', "portfolioInput", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    } else if (displaysMyPortfolio()) {
        var modeElementid = document.getElementById("pViewId");
        var mid = "0";
        if (modeElementid != null) {
            mid = modeElementid.value;
        }
        postData = "/act.ma?action=portUpd&ptm=f&xd=" + pid + "&xm=" + mid;
        // alert(postData);
        updater = new RemoteUpdater(postData, 'POST', "myPortfolioInput", null, RemoteUpdater.prototype.RESOLVE);
        var postAction = function() {
            drawColumnSparklineFromHiddenStringsTiny();
            updateThemeToolTips();
        };
        updater.setPostResponseAction(postAction);
        updater.update();
    }
}

function deleteAllPortfolios(backToPage) {
    var postData = "/act.ma?action=pDelAll";
    // postData = addPortfolioHomeAttributesToUrl(postData);
    // alert(backToPage);
    // setTimeout("", 100);
    updater = new RemoteUpdater(postData, 'POST', "processDiv", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        document.location.href = "/invest/" + backToPage; // allPortfoliosDashboard";
        // portfolioDashboard";
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function deletePortfolioAndUpdate(id, undo, backToPage) {
    var postData = "/act.ma?action=pDel&xd=" + id;
    postData = addPortfolioHomeAttributesToUrl(postData);
    updater = new RemoteUpdater(postData, 'POST', "processDiv", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        document.location.href = "/invest/" + backToPage; // allPortfoliosDashboard";
        // portfolioDashboard";
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function updatePerformanceBars() {
    newContainer = document.getElementById("performanceBars");
    if (newContainer) {
        var pageNumber = 0;
        var pEl = document.getElementById('ps');
        if (pEl) {
            pageNumber = pEl.value;
        }
        postData = "/userPortfoliosPerformanceBarsFrame.jsp?ps=" + pageNumber;
        updater = new RemoteUpdater(postData, 'POST', "performanceBars", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
}

function deleteTransactionAndUpdate(id, pid, undo) {
    var postData = "/act.ma?action=tDel&yd=" + id + "&xd=" + pid + "&udd=" + undo;
    var symbolId = document.getElementById("symbolId");
    var symbol = symbolId.value;
    postData = postData + "&s=" + symbol;
    setTimeout("", 100);
    updater = new RemoteUpdater(postData, 'POST', "tHomeBlock", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}
// This will be used to update stocks where mini portfolio appears
function addSymbolAndUpdate(symbol, numberOfShares, pid, price, pDate, tradeType) {
    var postData = "/act.ma?action=sAdd&ptm=t&s=" + symbol + "&xd=" + pid + "&spd=" + price + "&add=" + pDate + "&pta=" + tradeType + "&xm=0";
    // alert(postData);
    if (numberOfShares) {
        postData += "&n=" + numberOfShares;
    }
    setTimeout("", 100);
    updater = new RemoteUpdater(postData, 'POST', "PortfolioInput", null, RemoteUpdater.prototype.RESOLVE);
    var action = function() {
        var helpDiv = document.getElementById("equityTransactionBlock");
        helpDiv.innerHTML = "";
        // resetSliders();
        updatePortfolioTotal();
    };
    updater.setPostResponseAction(action);
    updater.update();
}

function rebalancePortfolio(symbol, weight) {
    var portId = document.getElementById("pid");
    var pid = portId.value;
    var postData = "/act.ma?action=rebalance&s=" + symbol + "&xd=" + pid + "&swd=" + weight + "&xm=3";
    setTimeout("", 100);
    updater = new RemoteUpdater(postData, 'POST', "myPortfolioBuilderInput", null, RemoteUpdater.prototype.RESOLVE);
    var action = function() {
        // resetSliders();
        // var postData = "/myPortfolioBuilderRiskReturnFrame.jsp?xd="+pid;
        // v = document.getElementById( "myPortfolioBuilderPie");
        // if (v) {
        // alert(v);
        genericProgress(v);
        // updater = new RemoteUpdater(postData, 'POST',
        // "myPortfolioBuilderPie", null, RemoteUpdater.prototype.RESOLVE);
        // updater.update();
        scorePortfolio(pid, true);
        // }
    };
    updater.setPostResponseAction(action);
    updater.update();
}
// This will be used to update stocks on portfolio detailed page
function addSymbolAndUpdateCalendar(symbol, numberOfShares, pid, price, pDate, tradeType, mode) {
    showProgressDialog();
    var postData = "/act.ma?action=sAddCalendar&s=" + symbol + "&xd=" + pid + "&spd=" + price + "&add=" + pDate + "&pta=" + tradeType + "&xm=" + mode;
    if (numberOfShares) {
        postData += "&n=" + numberOfShares;
    }
    openPage(postData);
}
// This will be used to update stocks on portfolio detailed page
function addMySymbolAndUpdate(symbol, numberOfShares, pid, price, pDate, tradeType, mode) {
    // alert(numberOfShares);
    if (!numberOfShares || numberOfShares == 0) {
        Swal.fire({
            type: 'error',
            title: 'Oops...',
            footer: 'Please specify number of shares!'
        })
        return;
    }
    if (symbol) {
        symbol = symbol.toUpperCase();
    }
    var postData = "/act.ma?action=sAdd&s=" + symbol + "&xd=" + pid + "&spd=" + price + "&add=" + pDate + "&pta=" + tradeType + "&xm=" + mode;
    if (numberOfShares) {
        postData += "&n=" + numberOfShares;
    }
    // alert(postData);
    symbol = symbol.replaceAll(",", ", ");
    var tText = "This will " + tradeType + " " + numberOfShares + " shares of " + " " + symbol + " ";
    if ("$CASH" == symbol) {
        if ("BUY" == tradeType) {
            tText = "This will deposit cash amounted to " + numberOfShares + " to your portfolio";
        } else if ("SELL" == tradeType) {
            tText = "This will withdraw cash amounted to " + numberOfShares + " from your portfolio";
        } else {
            tText = "This will update cash amounted to " + numberOfShares + " in your portfolio";
        }
    }
    swal.queue([{
        title: "You are updating this portfolio",
        confirmButtonText: 'Yes, Update it!',
        confirmButtonColor: "green",
        showCancelButton: true,
        showConfirmButton: true,
        allowEscapeKey: false,
        allowOutsideClick: false,
        cancelButtonColor: "#aaa",
        type: "question",
        footer: tText,
        showLoaderOnConfirm: true,
        preConfirm: function() {
            return new Promise(function(resolve) {
                $.get(postData)
                    .done((function(data) {
                        if (data == "added") {
                            Swal.fire({
                                title: "Added!",
                                footer: "The position has been added.",
                                type: "success",
                                allowEscapeKey: false,
                                showCancelButton: true,
                                allowOutsideClick: false,
                                confirmButtonText: "View Portfolio",
                                cancelButtonText: "Continue Editing",
                                confirmButtonColor: "green",
                            }).then((result) => {
                                goToPortfolioManager(result.value);
                            })
                        } else if (data == "sold") {
                            Swal.fire({
                                title: "Sold!",
                                footer: "The position has been updated.",
                                type: "success",
                                allowEscapeKey: false,
                                showCancelButton: true,
                                allowOutsideClick: false,
                                confirmButtonText: "View Portfolio",
                                cancelButtonText: "Continue Editing",
                                confirmButtonColor: "green",
                            }).then((result) => {
                                goToPortfolioManager(result.value);
                            })
                        } else if (data == "updated") {
                            Swal.fire({
                                title: "Updated!",
                                footer: "The position has been updated.",
                                type: "success",
                                allowEscapeKey: false,
                                allowOutsideClick: false,
                                showCancelButton: true,
                                confirmButtonText: "View Portfolio",
                                cancelButtonText: "Continue Editing",
                                confirmButtonColor: "green",
                            }).then((result) => {
                                goToPortfolioManager(result.value);
                            })
                        } else if (data == "completed") {
                            Swal.fire({
                                title: "Updated!",
                                footer: "The position has been updated.",
                                type: "success",
                                allowEscapeKey: false,
                                allowOutsideClick: false,
                                showCancelButton: true,
                                confirmButtonText: "View Portfolio",
                                cancelButtonText: "Continue Editing",
                                confirmButtonColor: "green",
                            }).then((result) => {
                                goToPortfolioManager(result.value);
                            })
                        } else if (data == "invalid") {
                            Swal.fire({
                                title: "Error!",
                                text: "The position has not been added. Please check the symbol and quantity and try again!",
                                type: "error",
                                showConfirmButton: false,
                                allowOutsideClick: true,
                                timer: 6500
                            })
                        } else {
                            Swal.fire({
                                title: "Error!",
                                html: data,
                                type: "error",
                                showConfirmButton: false,
                                allowOutsideClick: true,
                                timer: 6500
                            })
                        }
                    }))
            })
        }
    }]).catch(swal.noop);
}

function updateTransactionStatus(pid) {
    var errorMsg = document.getElementById("errorHint");
    var infoMsg = document.getElementById("infoHint");
    if (errorMsg) {
        // hideProgressDialog();
        checkErrorMessageDialog("Transaction Failed", errorMsg.innerHTML);
    }
    if (infoMsg) {
        // hideErrorDialog();
        // updateProgressDialog(infoMsg.innerHTML);
    }
    if (errorMsg) {
        return false;
    }
}

function updatePortfolioPitchOverview(pid) {
    displayPostGenericPieChart('0', true);
    displayPostGenericFunnelChart('0');
    displayPostGenericBarsChart('0');
    displayPostGenericBarsChart('mcpitch');
    displayPostGenericBarsChart('spitch');
    displayPostGenericBarsChart('itpitch');
    displayPostGenericBarsChart('indpitch');
}

function updatePortfolioOverview(pid) {
    displayPostGenericPieChart('0', true);
    displayPostGenericFunnelChart('0');
    displayPostGenericBarsChart('0');
    displayPostGenericBarsChart('mc');
    displayPostGenericBarsChart('s');
    displayPostGenericBarsChart('it');
    displayPostGenericBarsChart('ind');
}
jQuery.fn.redirect = function(url) {
    window.location.href = url;
}

function goToNewPortfolio(pid, result) {
    // alert(pid+" | "+result);
    var post = "/invest/myPortfolio?xd=" + pid;
    jQuery(window).redirect(post);
}

function goToQuickPortfolioManager(pid) {
    // alert(pid);
    jQuery(window).redirect("/invest/myPortfolio?xd=" + pid);
}

function goToPortfolioManager(pid) {
    var errorMsg = document.getElementById("errorHint");
    if (errorMsg) {
        alert(errorMsg);
        return;
    }
    var pidS = $('#xd').val();
    if (!pidS) {
        pidS = $('#pid').val();
    }
    // alert(pid +" "+pidS);
    if (!pidS) {
        if (pid) {
            pidS = pid;
        }
        var post = "/invest/myPortfolio?xd=" + pidS;
        jQuery(window).redirect(post);
        return;
    }
    var ul = window.location.href;
    // alert(ul);
    if (pid == true) {
        var post = "/invest/myPortfolio?xd=" + pidS;
        jQuery(window).redirect(post);
    } else {
        if (ul.indexOf("addStockToPortfolio") == -1) {
            window.location.reload();
        } else {
            var to = "/invest/addStockToPortfolio?xd=" + pidS
            // alert(to);
            // jQuery(window).redirect(to);
            jQuery(window).redirect(to);
            // jQuery(window).redirect(to);
        }
    }
    // } else {
    // if (ul.indexOf("addStockToPortfolio") == -1) {
    // jQuery(window).redirect("/invest/addStockToPortfolio?xd="+pidS);
    // } else {
    // window.location.reload();
    // }
    // }
}

function updateAddPortfolioBlock(pid) {
    var errorMsg = document.getElementById("errorHint");
    if (errorMsg) {
        alert(errorMsg);
        return;
    }
    // alert(pid);
    if (pid) {
        window.location.reload();
    } else {
        pid = $('#xd').val();
        var post = "/invest/addStockToPortfolio?xd=" + pid;
        jQuery(window).redirect(post);
        // jQuery(window).redirect(window.location.href);
        // window.location.reload();
    }
}

function showsActivationError() {
    var msg = document.getElementById("smallError");
    // alert(msg);
    if (msg) {
        return true;
    } else {
        return false;
    }
}

function addMySymbolAndUpdateBuilder(symbol, numberOfShares, pid, price, pDate, tradeType, mode) {
    var postData = "/act.ma?action=sAdd&s=" + symbol + "&xd=" + pid + "&spd=" + price + "&add=" + pDate + "&pta=" + tradeType + "&xm=" + mode;
    // alert(postData);
    if (numberOfShares) {
        postData += "&n=" + numberOfShares;
    }
    // setTimeout("", 100);
    updater = new RemoteUpdater(postData, 'POST', "myPortfolioBuilderInput", null, RemoteUpdater.prototype.RESOLVE);
    var action = function() {
        // updateTransactionStatus();
        // var helpDiv = document.getElementById("equityTransactionBlock");
        // helpDiv.innerHTML="";
        var errorMsg = document.getElementById("errorHint");
        if (!errorMsg) {
            // if (!showsActivationError()) {
            scorePortfolio(pid);
            // } else {
            // alert(errorMsg);
            // }
        } else {
            updateTransactionStatus();
            // alert(errorMsg);
        }
        // hideProgressDialog();
    };
    updater.setPostResponseAction(action);
    updater.update();
}

function displayPortfolioPie() {
    postData = "/portfolioPie.jsp" + "?action=x";
    marketPopUpProgress();
    setTimeout("", 100);
    normalizeSymbolUpdateDiv();
    updater = new RemoteUpdater(postData, 'POST', "symbolUpdate", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function removeAllSymbolsAndUpdate() {
    postData = "/portfolio.jsp" + "?action=removeAll";
    setTimeout("", 100);
    updater = new RemoteUpdater(postData, 'POST', "portfolioInput", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function removeSymbolAndUpdate(symbol) {
    var pElementid = document.getElementById("pid");
    var pid = "";
    if (pElementid != null) {
        pid = pElementid.value;
    }
    postData = "/act.ma?action=remove&s=" + symbol + "&xd=" + pid + "&xm=" + 0;
    $.get(postData)
        .done((function(data) {
            if (data == "removed") {
                Swal.fire({
                    title: "Removed!",
                    text: "The position has been removed.",
                    type: "success",
                    allowEscapeKey: false,
                    allowOutsideClick: false,
                    confirmButtonText: "View Portfolio",
                    confirmButtonColor: "red",
                    cancelButtonText: "Continue Editing",
                    showCancelButton: true,
                }).then((result) => {
                    goToPortfolioManager(result.value);
                })
            } else if (data == "complete") {
                Swal.fire({
                    title: "Updated!",
                    footer: "The position has been updated.",
                    type: "success",
                    allowEscapeKey: false,
                    allowOutsideClick: false,
                    cancelButtonText: "Continue Editing",
                    showCancelButton: true,
                    confirmButtonText: "View Portfolio",
                    confirmButtonColor: "red",
                }).then((result) => {
                    goToPortfolioManager(result.value);
                })
            }
        }))
}

function updateDateRangeFromForm(jspName) {
    postData = jspName + "?search=setDates&";
    elem = document.getElementById("periodStartDate");
    postData = postData + elem.name + "=" + elem.value + '&';
    elem = document.getElementById("periodEndDate");
    postData = postData + elem.name + "=" + elem.value;
    setTimeout("", 100);
    // marketPopUpProgress();
    normalizeSymbolUpdateDiv();
    updater = new RemoteUpdater(postData, 'POST', "symbolUpdate", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function showPartnerTradeBlock(symbol, tradeType, pid) {
    postData = "/partners/addPartnerStockToPortfolio.jsp" + "?s=" + symbol + "&pta=" + Type + "&xd=" + pid;
    setTimeout("", 100);
    updater = new RemoteUpdater(postData, 'POST', "equityTransactionBlock", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
    // NLBfadeBg('popupWindowId','#ffffff','#F0F3F7','2000');
}

function clickDigitalTradeSymbol(symbol, tradeType, pid) {
    var needsLogginEl = document.getElementById("needsLogin");
    // alert(needsLogginEl);
    if (needsLogginEl) {
        popErrorMessageDialog("Add To Portfolio: " + symbol, "Please&nbsp;<a href='/?pitch=login'>login</a>&nbsp;to your account " +
            "to add positions to your portfolios", "");
        return;
    }
    postData = "/invest/addStockToPortfolio" + "?s=" + symbol + "&pta=" + tradeType + "&xd=" + pid + "&isDigital=true";
    openPage(postData);
    // $.ajax({async:false, url:postData}).done(function(data){
    // Swal.fire({
    // title: "",
    // html: data,
    // width: 600,
    // showCancelButton: true,
    // confirmButtonText: "Submit",
    // allowEscapeKey:true,
    // allowOutsideClick: false,
    // confirmButtonColor: "green"
    // }).then(function (result) {
    // if (result.value) {
    // addSymbol();
    // }
    // });
    // });
    // $("#pdate").datepicker({maxDate: '0',beforeShowDay: $.datepicker.noWeekends
    // });
    // updateFilters();
}

function switchTransactionType(symbol, transactionType, pid) {
    // var isCryptoEl = document.getElementById("isCrypto")
    // if (isCryptoEl) {
    // isCryptoEl.value ="no";
    // }
    showTradeBlock(symbol, transactionType, pid);
}

function clickTradeSymbol(symbol, transactionType, pid) {
    var isCryptoEl = document.getElementById("isCrypto")
    // if (isCryptoEl) {
    // isCryptoEl.value ="no";
    // }
    showTradeBlock(symbol, transactionType, pid);
}

function showTradeBlock(symbol, tradeType, pid) {
    var needsLogginEl = document.getElementById("needsLogin");
    var isCryptoEl = document.getElementById("isCrypto")
    // if (isCryptoEl) {
    // alert(isCryptoEl.value);
    // }
    // alert(needsLogginEl);
    if (needsLogginEl) {
        popErrorMessageDialog("Add To Portfolio: " + symbol, "Please&nbsp;<a href='/?pitch=login'>login</a>&nbsp;to your account " +
            "to add positions to your portfolios", "");
        return;
    }
    var color = "lightblue";
    // alert("here");
    if (isCryptoEl && (isCryptoEl.value == "yes" || isCryptoEl.value == "true")) {
        postData = "/invest/addStockToPortfolio?xd=" + pid + "&pta=" + tradeType + "&isDigital=true&s=" + symbol;
    } else {
        postData = "/invest/addStockToPortfolio?xd=" + pid + "&pta=" + tradeType + "&s=" + symbol;
    }
    // alert(postData);
    // $( "#container" ).load( postData );
    openPage(postData);
    // $("#pdate").datepicker({maxDate: '0',beforeShowDay:
    // $.datepicker.noWeekends });
    // updateFilters();
}

function fireCryptoTemplate(templateType, pid) {
    postData = "/act.ma?action=fireCryptoTemplate&template=" + templateType + "&xd=" + pid;
    getProgressDialogIdeaPortfoio("Building your crypto portfolio", "");
    $.post(postData, (function(data) {
        openPage("/invest/myPortfolio?xd=" + pid);
    }));
}

function showAddPortfolioSimpleBlock(pid, isDashboard) {
    postData = "/addPortfolioSimple.jsp" + "?xd=" + pid + "&isDashboard=" + isDashboard;
    var postAction = function() {
        updateFilters();
    };
    updater = new RemoteUpdater(postData, 'POST', "portfolioTransactionBlock", null, RemoteUpdater.prototype.RESOLVE);
    updater.setPostResponseAction(postAction);
    updater.update();
}

function showAddModelPortfolioBlock(pid, isDashboard) {
    // alert(pid);
    postData = "/addModelPortfolio.jsp" + "?xd=" + pid + "&isDashboard=" + isDashboard;
    // closePortfolioHeader();
    updater = new RemoteUpdater(postData, 'POST', "portfolioTransactionBlock", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        // alert('a');
        initializePortfolioSlider();
        updateFilters();
        // alert('b');
    };
    updater.setPostResponseAction(postAction);
    updater.update();
    // NLBfadeBg('popupWindowId','#fffeee','#ffffff','2000');
}

function showAddPortfolioBlock(pid, isDashboard) {
    // alert(pid);
    postData = "/addPortfolio.jsp" + "?xd=" + pid + "&isDashboard=" + isDashboard;
    // closePortfolioHeader();
    updater = new RemoteUpdater(postData, 'POST', "portfolioTransactionBlock", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        initializePortfolioSlider();
        updateFilters();
    };
    updater.setPostResponseAction(postAction);
    updater.update();
    // NLBfadeBg('popupWindowId','#fffeee','#ffffff','2000');
}

function showAddPartnerPortfolioBlock(pid) {
    postData = "/partners/addPartnerPortfolio.jsp" + "?xd=" + pid;
    setTimeout("", 100);
    updater = new RemoteUpdater(postData, 'POST', "equityTransactionBlock", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
    // NLBfadeBg('popupWindowId','#fffeee','#ffffff','2000');
}

function showChangePortfolioBlock(pid) {
    postData = "/changePortfolio.jsp" + "?xd=" + pid;
    var postAction = function() {
        updateFilters();
        // alert('showChangePortfolioBlock');
    };
    updater = new RemoteUpdater(postData, 'POST', "equityTransactionBlock", null, RemoteUpdater.prototype.RESOLVE);
    updater.setPostResponseAction(postAction);
    updater.update();
}

function showFilterPortfoliosBlock() {
    postData = "/filterPortfolios.jsp";
    var v = document.getElementById("refreshView");
    var refreshView = "portfolioDashboard";
    if (v) {
        refreshView = v.value;
    }
    var postAction = function() {
        updateFilters();
        // alert('showFilterPortfoliosBlock');
    };
    postData = postData + "?refreshView=" + refreshView;
    updater = new RemoteUpdater(postData, 'POST', "filterDialogBlock", null, RemoteUpdater.prototype.RESOLVE);
    updater.setPostResponseAction(postAction);
    updater.update();
}

function showSharePortfolioBlock(pid) {
    postData = "sharePortfolio.jsp?xd=" + pid;
    setTimeout("", 100);
    updater = new RemoteUpdater(postData, 'POST', "shareEquityBlock", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function compareEquities(s) {
    // alert(s);
    $("#modal-content-compare").load("/compareEquitiesPopUp.jsp?s=" + s);
    $('#modalCompare').attr('data-modal-color', "lightblue");
    $('#modalCompare').modal('show');
}

function sharePortfolio(pid) {
    openPage("/invest/sharePortfolio?xd=" + pid);
}

function updateSharingUrl(pid, access, out) {
    var helpDiv = document.getElementById('share_loading');
    helpDiv.src = "/images/progress/smallCircle.gif";
    postData = "/feed/?action=url&a=" + access + "&xd=" + pid + "&o=" + out;
    updater = new RemoteUpdater(postData, 'POST', "share_code", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        var helpDiv2 = document.getElementById('share_loading');
        helpDiv2.src = "/images/0SmallStars.gif";
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function compose(block) {
    postData = "/mail/compose.jsp";
    setTimeout("", 100);
    updater = new RemoteUpdater(postData, 'POST', block, null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
    // NLBfadeBg('popupWindowId','#FFFFCC','#E5E5E5','10000');
}

function composeShareLink(block) {
    postData = "/mail/composeShareLink.jsp";
    setTimeout("", 100);
    updater = new RemoteUpdater(postData, 'POST', block, null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
    // NLBfadeBg('popupWindowId','#FFFFCC','#E5E5E5','10000');
}

function composeContact(aid, name) {
    postData = "/mail/composeAdviserContact.jsp?aid=" + aid + "&nm=" + name;
    setTimeout("", 100);
    updater = new RemoteUpdater(postData, 'POST', 'container', null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
    // NLBfadeBg('popupWindowId','#FFFFCC','#E5E5E5','10000');
}

function updateUserPicksFilterFromForm(jspName) {
    var postData = jspName + "?search=_advancedFilter&";
    var searchForm = document.getElementById("advancedFilterId");
    var searchElements = searchForm.getElementsByTagName("INPUT");
    if (searchElements.length > 0) {
        for (i = 0; i < searchElements.length; i++) {
            elem = searchElements[i];
            // alert(elem.value);
            if (elem.value != "on") {
                postData = postData + elem.name + "=" + elem.value + '&';
            }
        }
    }
    userPicksSearchProgress();
    updater = new RemoteUpdater(postData, 'POST', "userPicksSearch", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function userPicksSearchProgress() {
    var newContainer = document.getElementById("userPicksSearch");
    // alert(newContainer);
    newContainer.innerHTML = "<div id='performanceProgress' ><br><div class='performenceProgress'>" +
        "<i class='fa fa-refresh fa-spin fa-5x fa-fw m-25'></i><br><br>..." +
        "Generating search results</div></div>";
}

function updateCustomFilterSearchFromForm(jspName) {
    var postData = jspName + "?search=_advancedFilter&";
    var searchForm = document.getElementById("advancedFilterId");
    // alert(searchForm);
    var searchElements = searchForm.getElementsByTagName("INPUT");
    if (searchElements.length > 0) {
        for (i = 0; i < searchElements.length; i++) {
            elem = searchElements[i];
            // alert(elem.value);
            if (elem.value != "on") {
                postData = postData + elem.name + "=" + elem.value + '&';
            }
        }
    }
    searchPopUpProgress();
    // alert(postData);
    updater = new RemoteUpdater(postData, 'POST', "searchBoxResult", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
    resultsDiv.style.visibility = "visible";
}

function updateScoreSearchLookUpMain(symbol, resultDiv, searchMethod) {
    var atype = 'clickOnSearch';
    if (resultDiv == 'selectSearchBoxResult') {
        atype = 'clickToSelect';
    }
    postData = "/investorSearchLookUp.jsp?q=" + symbol + "&actionType=" + atype + "&searchType=" + searchMethod;
    setTimeout("", 100);
    searchPopUpProgressMain();
    updater = new RemoteUpdater(postData, 'POST', resultDiv, null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function updateInvestorSearchLookUpMain(symbol, resultDiv) {
    var atype = 'clickOnSearch';
    if (resultDiv == 'selectSearchBoxResult') {
        atype = 'clickToSelect';
    }
    pEl = document.getElementById("partnerSearch");
    postData = "/investorSearchLookUp.jsp?q=" + symbol + "&actionType=" + atype + "&searchType=investor";
    if (pEl) {
        postData += "&limited=true";
    }
    setTimeout("", 1000);
    searchPopUpProgressMain();
    updater = new RemoteUpdater(postData, 'POST', resultDiv, null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function switchCountry(country, flag) {
    postData = "/act.ma?action=changeCountry&pcd=" + country;
    openPage(postData);
}

function switchPortfolio(pid, flag, refreshView) {
    var menuM = "pitchletHome";
    if (!refreshView) {
        var v = document.getElementById("refreshView");
        if (v) {
            refreshView = v.value;
            if (refreshView == "suggestPortfolio" || refreshView == "optimizePortfolio") {
                menuM = "portfolioHome";
            }
        }
    }
    postData = "/invest/" + refreshView + "?xd=" + pid;
    // alert(postData);
    openPage(postData);
}

function updateSearchLookUpDigital(symbol, resultDiv, country, pid) {
    var atype = 'clickOnSearch';
    if (resultDiv == 'selectSearchBoxResult') {
        atype = 'clickToSelect';
    }
    if (pid == 'undefined' || pid == '') {
        pid = '-1';
    }
    symbol = escape(symbol);
    postData = "/symbolSearchLookUp.jsp?q=" + symbol + "&actionType=" + atype + "&country=" + country + "&equityType=Crypto&xd=" + pid;
    $.post(postData, (function(data) {
        $('#' + resultDiv).html(data).slideDown();
    }));
    // updater = new RemoteUpdater(postData, 'POST', resultDiv, null,
    // RemoteUpdater.prototype.RESOLVE);
    // updater.update();
}

function updateSearchLookUpMain(symbol, resultDiv, country, equityType, currentDisplayType, pid) {
    // alert(country);
    var atype = 'clickOnSearch';
    if (resultDiv == 'selectSearchBoxResult') {
        atype = 'clickToSelect';
    }
    if (pid == 'undefined' || pid == '') {
        pid = '-1';
    }
    if (currentDisplayType == 'undefined' || currentDisplayType == '') {
        currentDisplayType = '0';
    }
    var sec = document.getElementById("sec");
    // alert(equityType);
    pEl = document.getElementById("partnerSearch");
    var isCompare = resultDiv == 'selectCompareBoxResult';
    var isSEC = sec != null;
    // if (isSEC) {
    // atype = "clickToSelectSEC";
    // }
    symbol = escape(symbol);
    postData = "/symbolSearchLookUp.jsp?q=" + symbol + "&actionType=" + atype + "&country=" + country + "&equityType=" + equityType + "&xd=" + pid + "&dt=" + currentDisplayType + "&compare=" + isCompare + "&isSEC=" + isSEC;
    // alert(postData);
    if (pEl) {
        postData += "&limited=true";
    }
    // setTimeout("", 100);
    // searchPopUpProgressMain();
    // var jsp = "/portfolioBacktestingPerformanceChart.jsp";
    $.post(postData, (function(data) {
        $('#' + resultDiv).html(data).slideDown();
    }));
    // updater = new RemoteUpdater(postData, 'POST', resultDiv, null,
    // RemoteUpdater.prototype.RESOLVE);
    // updater.update();
}
/**
 * Dynamically repaint the form specified by the containerId, triggering any
 * componentActions which are observed by the cahnged param
 * 
 * @param url -
 *            url to post to
 * @param formId -
 *            id of form we are posting to
 * @param containerId -
 *            id of panel to repaint
 * @param changedParamName -
 *            name of param which triggered this update
 */
function updateSearchLookUp(symbol) {
    // build post data form input values (user values, not
    // buttons/submits/hiddens)...
    postData = "/quickSymbolSearchLookUp.jsp" + "?search=" + symbol;
    // alert(postData);
    setTimeout("", 100);
    searchPopUpProgress();
    updater = new RemoteUpdater(postData, 'POST', "searchBoxResult", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function updateProfileGraph(symbol, canAdd) {
    // build post data form input values (user values, not
    // buttons/submits/hiddens)...
    postData = "/marketCompanyLookUp.jsp" + "?s=" + symbol + "&view=spf";
    if (canAdd) {
        postData = postData + "&canAdd=" + canAdd;
    }
    marketPopUpProgress();
    setTimeout("", 100);
    normalizeSymbolUpdateDiv();
    updater = new RemoteUpdater(postData, 'POST', "symbolUpdate", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function initializeDetailsView(symbol, canAdd) {
    // build post data form input values (user values, not
    // buttons/submits/hiddens)...
    postData = "/marketCompanyLookUp.jsp" + "?s=" + symbol;
    if (canAdd) {
        postData = postData + "&canAdd=" + canAdd;
    }
    marketPopUpProgress();
    setTimeout("", 100);
    normalizeSymbolUpdateDiv();
    updater = new RemoteUpdater(postData, 'POST', "symbolUpdate", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function addDatesToPost(postString) {
    var ret = postString;
    var startDate = document.getElementById('startDate');
    if (startDate) {
        var startDateValue = startDate.value;
        ret = ret + "&startDate" + "=" + startDateValue;
    }
    var endDate = document.getElementById('endDate');
    if (endDate) {
        var endDateValue = endDate.value;
        ret = ret + "&endDate" + "=" + endDateValue;
    }
    return ret;
}

function addSuggestionDataToPost(postString) {
    var ret = postString;
    // alert(ret);
    var constraint = document.getElementById('constraint');
    if (constraint != null) {
        var sconstraintValue = constraint.value;
        ret = ret + "&constraint" + "=" + sconstraintValue;
    }
    var riskLevel = document.getElementById('riskLevel');
    if (riskLevel != null) {
        var riskLevelValue = riskLevel.value;
        if (ret.indexOf("?") > -1) {
            ret = ret + "&riskLevel" + "=" + riskLevelValue;
        } else {
            ret = ret + "?riskLevel" + "=" + riskLevelValue;
        }
    }
    var dayRange = document.getElementById('dayRange');
    if (dayRange != null) {
        var dayRangeValue = dayRange.value;
        dayRangeValue = getLicensedHorizonRange(dayRangeValue);
        // alert(ret);
        if (ret.indexOf("?") > -1) {
            ret = ret + "&dayRange" + "=" + dayRangeValue;
        } else {
            ret = ret + "?dayRange" + "=" + dayRangeValue;
        }
        // alert(ret);
    }
    var budget = document.getElementById("budget");
    if (budget != null) {
        var budgetValue = budget.value;
        if (budgetValue) {
            ret = ret + "&budget" + "=" + budgetValue;
        }
    }
    var maxConstraint = document.getElementById('maxConstraint');
    if (maxConstraint != null) {
        var maxConstraintValue = maxConstraint.value;
        ret = ret + "&maxConstraint" + "=" + maxConstraintValue;
    }
    // alert(ret);
    var riskFreeRate = document.getElementById('riskFreeRate');
    if (riskFreeRate != null) {
        var riskFreeRateValue = riskFreeRate.value;
        ret = ret + "&riskFreeRate" + "=" + riskFreeRateValue;
    }
    var equityFilterPerformance = document.getElementById('equityFilterPerformance');
    if (equityFilterPerformance != null) {
        var equityFilterPerformanceValue = equityFilterPerformance.value;
        ret = ret + "&equityFilterPerformance" + "=" + equityFilterPerformanceValue;
    }
    var equityFilterDistress = document.getElementById('equityFilterDistress');
    if (equityFilterDistress != null) {
        var equityFilterDistressValue = equityFilterDistress.value;
        ret = ret + "&equityFilterDistress" + "=" + equityFilterDistressValue;
    }
    var backtestEndDate = document.getElementById('backtestEndDate');
    if (backtestEndDate != null) {
        var backtestEndDateValue = backtestEndDate.value;
        ret = ret + "&backtestEndDate" + "=" + backtestEndDateValue;
    }
    var ci = document.getElementById('ci');
    if (ci != null) {
        var ciValue = ci.value;
        ret = ret + "&ci" + "=" + ciValue;
    }
    var minimumReturn = document.getElementById('minimumReturn');
    if (minimumReturn != null) {
        var minimumReturnValue = minimumReturn.value;
        ret = ret + "&minimumReturn" + "=" + minimumReturnValue;
    }
    var cashUsage = document.getElementById('cashUsage');
    if (cashUsage != null) {
        var cashUsageValue = cashUsage.value;
        ret = ret + "&cashUsage" + "=" + cashUsageValue;
    }
    var theme = document.getElementById('themeCombo');
    // alert(theme);
    if (theme == null) {
        theme = document.getElementById('theme');
    }
    if (theme == null) {
        theme = document.getElementById('themePortfolio');
    }
    if (theme == null) {
        theme = document.getElementById('themePortfolioCombo');
    }
    var equityFilterThemes = document.getElementById('equityFilterThemes');
    if (equityFilterThemes != null) {
        var equityFilterThemesV = equityFilterThemes.value;
        if (equityFilterThemesV) {
            equityFilterThemesV = equityFilterThemesV.replace(" ", "-");
            ret = ret + "&equityFilterThemes" + "=" + equityFilterThemesV;
        } else {
            ret = ret + "&equityFilterThemes=";
        }
    }
    var equityFilterTypes = document.getElementById('equityFilterTypes');
    if (equityFilterTypes != null) {
        var equityFilterTypesV = equityFilterTypes.value;
        if (equityFilterTypesV) {
            ret = ret + "&equityFilterTypes" + "=" + equityFilterTypesV;
        } else {
            ret = ret + "&equityFilterTypes=";
        }
    }
    // alert(theme);
    if (theme != null) {
        var themeValue = theme.value;
        if (themeValue) {
            themeValue.replace(" ", "-");
        }
        ret = ret + "/" + themeValue;
        var rmBlock = document.getElementById("themeModelCheck");
        // alert(rmBlock);
        if (rmBlock) {
            var rmBlockStyle = rmBlock.checked;
            // alert(rmBlockStyle);
            if (rmBlockStyle) {
                ret = ret + "&modelTheme" + "=" + themeValue;
            } else {
                ret = ret + "&modelTheme" + "=";
            }
            var maxModelPositions = document.getElementById('maxModelPositions');
            if (maxModelPositions != null) {
                var maxModelPositionsValue = maxModelPositions.value;
                ret = ret + "&maxModelPositions" + "=" + maxModelPositionsValue;
            }
        }
    }
    var shortSellLevel = document.getElementById('modelInput_shortSellLevel');
    // alert(shortSellLevel);
    if (shortSellLevel != null) {
        // var shortSellLevelValue = shortSellLevel.value;
        var shortSellLevelValue = null;
        var shortSellLevel0 = document.getElementById('shortSellLevel0');
        var shortSellLevel1 = document.getElementById('shortSellLevel1');
        if (shortSellLevel0.checked) {
            shortSellLevelValue = "0";
        } else if (shortSellLevel1.checked) {
            shortSellLevelValue = "1";
        }
        ret = ret + "&shortSellLevel" + "=" + shortSellLevelValue;
    }
    var valueTypeLevel = document.getElementById('modelInput_valueType');
    if (valueTypeLevel != null) {
        var valueTypeLevelValue = null;
        var valueTypeLevel0 = document.getElementById('valueType0');
        var valueTypeLevel1 = document.getElementById('valueType1');
        alert(valueTypeLevel0);
        alert(valueTypeLevel1);
        if (valueTypeLevel0.checked) {
            valueTypeLevelValue = "0";
        } else if (valueTypeLevel1.checked) {
            valueTypeLevelValue = "1";
        }
        ret = ret + "&valueType" + "=" + valueTypeLevelValue;
    }
    var s2Check = document.getElementById('suggestion2');
    var s3Check = document.getElementById('suggestion3');
    var s4Check = document.getElementById('suggestion4');
    // alert(modelPortfolioCheck != null);
    if (s2Check != null) {
        var s2CheckValue = s2Check.value;
        // alert(modelPortfolioCheckValue);
        if (s2Check.checked) {
            ret = ret + "&suggestion2=true";
        }
    }
    if (s3Check != null) {
        var s3CheckValue = s3Check.value;
        // alert(modelPortfolioCheckValue);
        if (s3Check.checked) {
            ret = ret + "&suggestion3=true";
        }
    }
    if (s4Check != null) {
        var s4CheckValue = s4Check.value;
        // alert(modelPortfolioCheckValue);
        if (s4Check.checked) {
            ret = ret + "&suggestion4=true";
        }
    }
    // alert(document.getElementById('modelPortfolioCheck'));
    var modelPortfolioCheck = document.getElementById('modelPortfolioCheck');
    // alert(modelPortfolioCheck != null);
    if (modelPortfolioCheck != null) {
        var modelPortfolioCheckValue = modelPortfolioCheck.value;
        // alert(modelPortfolioCheckValue);
        if (modelPortfolioCheck.checked) {
            // alert("Checked");
            modelPortfolioInput = document.getElementById('modelPortfolio');
            if (modelPortfolioInput) {
                var modelPortfolioInputValue = modelPortfolioInput.value;
                ret = ret + "&modelPortfolio" + "=" + modelPortfolioInputValue;
            }
        } else {
            ret = ret + "&modelPortfolio" + "=";
        }
    }
    return ret;
}

function updateUserPicksSectorFromForm(symbol) {
    var postData = "/userPicksSectorBox.jsp" + "?s=" + symbol;
    userPicksSearchProgress();
    updater = new RemoteUpdater(postData, 'POST', "userPicksSearch", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function updateUserPicksETFFromForm(symbol) {
    var postData = "/userPicksEtfBox.jsp" + "?s=" + symbol;
    userPicksSearchProgress();
    updater = new RemoteUpdater(postData, 'POST', "userPicksSearch", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function startGraphView(symbol, viewType) {
    var sup = document.getElementById('userPicksSearch');
    if (sup) {
        updateUserPicksETFFromForm(symbol);
    } else {
        postData = "/marketCompanyLookUp.jsp" + "?s=" + symbol + "&view=" + viewType;
        postData = addDatesToPost(postData)
        marketPopUpProgress();
        setTimeout("", 100);
        normalizeSymbolUpdateDiv();
        updater = new RemoteUpdater(postData, 'POST', "symbolUpdate", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
}

function updateFundumentalsGraph(symbol, canAdd) {
    // build post data form input values (user values, not
    // buttons/submits/hiddens)...
    postData = "/marketCompanyLookUp.jsp" + "?s=" + symbol + "&view=qpf";
    postData = addDatesToPost(postData);
    if (canAdd) {
        postData = postData + "&canAdd=" + canAdd;
    }
    marketPopUpProgress();
    setTimeout("", 100);
    normalizeSymbolUpdateDiv();
    updater = new RemoteUpdater(postData, 'POST', "symbolUpdate", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function updateNewsGraph(symbol) {
    postData = "/marketCompanyLookUp.jsp" + "?s=" + symbol + "&view=spn";
    postData = addDatesToPost(postData);
    marketPopUpProgress();
    setTimeout("", 100);
    normalizeSymbolUpdateDiv();
    updater = new RemoteUpdater(postData, 'POST', "symbolUpdate", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function updateUserPicksFundFromForm(symbol) {
    var postData = "/userPicksfundBox.jsp" + "?f=" + symbol;
    userPicksSearchProgress();
    updater = new RemoteUpdater(postData, 'POST', "userPicksSearch", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function updateFundBox(symbol) {
    var sup = document.getElementById('userPicksSearch');
    if (sup) {
        updateUserPicksFundFromForm(symbol);
    } else {
        // build post data form input values (user values, not
        // buttons/submits/hiddens)...
        postData = "/fundBox.jsp" + "?f=" + symbol;
        setTimeout("", 1000);
        symbolBoxProgress();
        // alert("test");
        setTimeout("", 1000);
        // normalizeSymbolBoxDiv();
        updater = new RemoteUpdater(postData, 'POST', "symbolBox", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
}

function updateSymbolBox(symbol) {
    // build post data form input values (user values, not
    // buttons/submits/hiddens)...
    postData = "/symbolBox.jsp" + "?s=" + symbol;
    symbolBoxProgress();
    setTimeout("", 100);
    normalizeSymbolBoxDiv();
    updater = new RemoteUpdater(postData, 'POST', "symbolBox", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function updateIndustryGraph(symbol, isMain) {
    // alert(symbol);
    var sup = document.getElementById('userPicksSearch');
    if (sup) {
        updateUserPicksSectorFromForm(symbol);
    } else {
        postData = "/marketCompanyLookUp.jsp" + "?s=" + symbol + "&view=ipf";
        // alert(isMain);
        if (isMain == "true") {
            postData += "&main=true";
        }
        postData = addDatesToPost(postData);
        // alert(postData);
        marketPopUpProgress();
        setTimeout("", 100);
        normalizeSymbolUpdateDiv();
        updater = new RemoteUpdater(postData, 'POST', "symbolUpdate", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
}

function updateMarketSymbolLookUp(symbol) {
    // build post data form input values (user values, not
    // buttons/submits/hiddens)...
    postData = "/marketCompanyLookUp.jsp" + "?s=" + symbol + "&view=qpf";
    postData = addDatesToPost(postData);
    marketPopUpProgress();
    normalizeSymbolUpdateDiv();
    updater = new RemoteUpdater(postData, 'POST', "symbolUpdate", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function displayToolTip(evt, sourceElem, toolTipSymbol) {
    if (hiddenTip) {
        return;
    }
    currentSymbol = toolTipSymbol;
    postData = "s=" + currentSymbol;
    var action = function(updater) {
        var content = updater.xmlhttp.responseText;
        showToolTip(evt, sourceElem, content);
    };
    var rr = new RemoteRequest("/symbolToolTip.jsp", 'POST', postData, action);
    rr.request();
    hiddenTip = true;
}

function displayDayRangePopUp(sourceElem, popUpEvent, currentDayRange, currentCallBack) {
    postData = "action=" + "dayRange&currentValue=" + currentDayRange + "&currentCallBack=" + currentCallBack;
    var action = function(updater) {
        var content = updater.xmlhttp.responseText;
        showPopUpPanel(sourceElem, content);
    };
    var rr = new RemoteRequest("/popUpPanel.jsp", 'POST', postData, action);
    rr.request();
}

function displayFundumentalPopUp(sourceElemId, popUpEvent, currentFundumental, currentCallBack, isMain) {
    // alert(sourceElemId);
    var elem = document.getElementById(sourceElemId);
    postData = "action=" + "fundumental&currentValue=" + currentFundumental + "&currentCallBack=" + currentCallBack;
    // alert(isMain);
    if (isMain == 'true') {
        postData += "&main=true";
    }
    var action = function(updater) {
        var content = updater.xmlhttp.responseText;
        showPopUpBox(null, elem, content, -109, -25);
    };
    var rr = new RemoteRequest("/popUpPanel.jsp", 'POST', postData, action);
    rr.request();
}

function displaySymbolBoxFundumentalPopUp(sourceElemId, popUpEvent, currentFundumental, currentCallBack) {
    postData = "action=" + "fundumental&currentValue=" + currentFundumental + "&currentCallBack=" + currentCallBack;
    var action = function(updater) {
        var content = updater.xmlhttp.responseText;
        var sourceElem = document.getElementById(sourceElemId);
        // showPopUpPanel(sourceElem, content, -85, -1);
        showPopUpBox(popUpEvent, sourceElem, content, -109, -25);
    };
    var rr = new RemoteRequest("/popUpPanel.jsp", 'POST', postData, action);
    rr.request();
}

function displayFundBoxFundumentalPopUp(sourceElemId, popUpEvent, currentFundumental, currentCallBack) {
    postData = "action=" + "fundFundumental&currentValue=" + currentFundumental + "&currentCallBack=" + currentCallBack;
    var action = function(updater) {
        var content = updater.xmlhttp.responseText;
        var sourceElem = document.getElementById(sourceElemId);
        // showPopUpPanel(sourceElem, content, -85, -1);
        showPopUpBox(popUpEvent, sourceElem, content, -109, -25);
    };
    var rr = new RemoteRequest("/popUpPanel.jsp", 'POST', postData, action);
    rr.request();
}

function hideCompareToolTip(evt, block) {
    hiddenTip = true;
    postData = "s=hide";
    var action = function(updater) {};
    positiontiponly(evt);
    var rr = new RemoteRequest("/symbolToolTip.jsp", 'POST', postData, action);
    rr.request();
}

function displayCompareToolTip(evt, block, symbol1, symbol2) {
    // if (hiddenTip) {
    // return;
    // }
    postData = "s1=" + symbol1 + "&s2=" + symbol2 + "&value=" + block.innerHTML;
    var action = function(updater) {
        var content = updater.xmlhttp.responseText;
        if (content == "null") {
            // alert(content);
        } else {
            content = "<div class='ToolTipBox' style='font-size: 1em; line-height: 1.2em; padding:4px;'>" + content + "</div>";
            showPopUpPanel(block, content);
            hiddenTip = false;
        }
    };
    // positiontiponly(evt);
    var rr = new RemoteRequest("/symbolToolTip.jsp", 'POST', postData, action);
    rr.request();
    hiddenTip = true;
}

function normalizeSymbolBoxDiv() {
    var helpDiv = document.getElementById("symbolBox");
    helpDiv.style.background = 'transparent';
    helpDiv.style.padding = '0px';
}

function normalizeSymbolUpdateDiv() {
    var helpDiv = document.getElementById("symbolUpdate");
    helpDiv.style.background = 'transparent';
    helpDiv.style.padding = '0px';
}

function performanceProgressBlock() {
    var newContainer = document.getElementById("performanceProgress");
    // alert(newContainer);
    newContainer.innerHTML = "<div class='performenceProgress'><br/>" +
        "<i class='fa fa-refresh fa-spin fa-5x fa-fw m-25'></i><br><b>Processing</b>..." +
        "Generating performance</div>";
}

function performanceProgress() {
    var newContainer = document.getElementById("performanceGraph");
    // alert(newContainer);
    newContainer.innerHTML = "<div id='performanceProgress'><br><div class='performenceProgress'>" +
        "<i class='fa fa-refresh fa-spin fa-5x fa-fw m-25'></i><br><b>Processing</b>..." +
        "Generating performance</div></div>";
}

function randomBubbleProgress() {
    var newContainer = document.getElementById("randomPortfolioBubbles");
    // alert(newContainer);
    newContainer.innerHTML = "<div id='performanceProgress'><br><div class='performenceProgress'>" +
        "<br/><br/><b>Processing</b>..." +
        "<br/>Generating sector performance</div></div>";
}

function indexHistoryProgress() {
    var newContainer = document.getElementById("singleIndexChart");
    newContainer.innerHTML = "<div id='performanceProgress'><br><div class='performenceProgress'>" +
        "<i class='fa fa-refresh fa-spin fa-5x fa-fw m-25'></i><br><b>Processing</b>..." +
        "Generating sector performance</div></div>";
}

function toggleMarketTab(type) {
    // alert(type);
    var btm = document.getElementById('index0');
    btm.className = "tabberinactive";
    indexHistoryProgress();
    chartDiv = document.getElementById("singleIndexChart");
    if (chartDiv) {
        jsp = "/singleIndexHistoryFrame.jsp?itype=" + type;
    }
    updater = new RemoteUpdater(jsp, 'POST', "singleIndexChart", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        if (lastBigButton) {
            lastBigButton.className = "tabberinactive";
        } else {}
        lastBigButton = document.getElementById("index" + type);
        lastBigButton.className = "tabberactive";
        setTimeout("", 100);
        var newContainer = document.getElementById("performanceProgress");
        if (newContainer) {
            newContainer.innerHTML = "";
        }
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function togglePartnerSector(type) {
    // alert(type);
    var btm = document.getElementById('0');
    btm.className = "tabberinactive";
    // alert(btm);
    randomBubbleProgress();
    partner = document.getElementById("partnerContent");
    if (!partner) {
        jsp = "/randomPortfolioRiskReturn.jsp?btype=" + type;
    } else {
        jsp = "/randomSectorsFrame.jsp?btype=" + type;
    }
    // alert(jsp);
    updater = new RemoteUpdater(jsp, 'POST', "randomPortfolioBubbles", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        if (lastButton) {
            lastButton.className = "tabberinactive";
        } else {}
        lastButton = document.getElementById(type);
        lastButton.className = "tabberactive";
        setTimeout("", 100);
        var newContainer = document.getElementById("performanceProgress");
        if (newContainer) {
            newContainer.innerHTML = "";
        }
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function toggleRandomBubbleGraph(type) {
    // alert(type);
    var btm = document.getElementById('-1');
    btm.className = "tabberinactive";
    randomBubbleProgress();
    partner = document.getElementById("partnerContent");
    if (!partner) {
        jsp = "/randomPortfolioRiskReturn.jsp?btype=" + type;
    } else {
        jsp = "/randomSectorsFrame.jsp?btype=" + type;
    }
    // alert(jsp);
    updater = new RemoteUpdater(jsp, 'POST', "randomPortfolioBubbles", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        if (lastButton) {
            lastButton.className = "tabberinactive";
        } else {}
        lastButton = document.getElementById(type);
        lastButton.className = "tabberactive";
        setTimeout("", 100);
        var newContainer = document.getElementById("performanceProgress");
        if (newContainer) {
            newContainer.innerHTML = "";
        }
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function toggleCoolSectorGraph(type) {
    var btm = document.getElementById('-1');
    btm.className = "toggleLeftTab";
    randomBubbleProgress();
    partner = document.getElementById("partnerContent");
    jsp = "/widgets/sectorsSentimentFrame.jsp?btype=" + type;
    updater = new RemoteUpdater(jsp, 'POST', "randomPortfolioBubbles", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        if (lastButton) {
            lastButton.className = "toggleLeftTab";
        } else {}
        lastButton = document.getElementById(type);
        lastButton.className = "toggleLeftTabSelected";
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function togglePartnerRandomBubbleGraph(type) {
    // alert(type);
    var btm = document.getElementById('-1');
    btm.className = "toggleLeftTab";
    randomBubbleProgress();
    partner = document.getElementById("partnerContent");
    jsp = "/randomPartnerSectorsFrame.jsp?btype=" + type;
    updater = new RemoteUpdater(jsp, 'POST', "randomPortfolioBubbles", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        if (lastButton) {
            lastButton.className = "toggleLeftTab";
        } else {}
        lastButton = document.getElementById(type);
        lastButton.className = "toggleLeftTabSelected";
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function userPicksProgress() {
    var newContainer = document.getElementById("marketScreenerBody");
    // alert(newContainer);
    newContainer.innerHTML = "<div id='performanceProgress'><br><div class='performenceProgress'>" +
        "<i class='fa fa-refresh fa-spin fa-5x fa-fw m-25'></i><br><br><b>Processing</b>..." +
        "Generating requested info</div></div>";
}

function toggleMarketScreener(type) {
    // //var btm = document.getElementById('type33');
    // //btm.className = "tabberactive";
    //	
    // userPicksProgress();
    //	
    // if (type == "market") {
    // type="37";
    // jsp = "/marketSummaryInclude.jsp?type="+type;
    // }else {
    // jsp = "/userPicksInclude.jsp?type="+type;
    // }
    //	
    //
    // updater = new RemoteUpdater(jsp, 'POST', "marketScreenerBody", null,
    // RemoteUpdater.prototype.RESOLVE);
    // var postAction = function() {
    //		
    // if (lastButton) {
    // lastButton.className = "tabberinactive";
    //		
    // } else {
    //			
    // }
    //		
    // lastButton = document.getElementById("type"+type);
    // lastButton.className = "tabberactive";
    //		
    // if (type == 37) {
    // var btm = document.getElementById('type33');
    // btm.className = "tabberinactive";
    // newContainer = document.getElementById("marketActivity");
    // if (newContainer) {
    //			
    // postData = "/marketActivity.jsp";
    // updater = new RemoteUpdater(postData, 'POST', "marketActivity", null,
    // RemoteUpdater.prototype.RESOLVE);
    // updater.update();
    // }
    // }
    // if(type == 34) {
    //			
    //			
    // updater = new RemoteUpdater("/etfTree.jsp", 'POST', "etfTree", null,
    // RemoteUpdater.prototype.RESOLVE);
    // var postAction = function() {
    // var marketTree = new Zapatec.Tree('sybmolTree', { dynamic: true });
    // // marketTreeStyle.display = "block";
    // // setTimeout("toggleMarketTree()",2000)
    // }
    // updater.setPostResponseAction(postAction);
    // updater.update();
    //			
    // }
    //		
    // if(type == 35) {
    //			
    //			
    // updater = new RemoteUpdater("/fundTree.jsp", 'POST', "fundTree", null,
    // RemoteUpdater.prototype.RESOLVE);
    // var postAction = function() {
    // var marketTree = new Zapatec.Tree('sybmolTree', { dynamic: true });
    // // marketTreeStyle.display = "block";
    // // setTimeout("toggleMarketTree()",2000)
    // }
    // updater.setPostResponseAction(postAction);
    // updater.update();
    //			
    // }
    //		
    // if(type == 36) {
    //			
    //			
    // updater = new RemoteUpdater("/industryTree.jsp", 'POST', "sectorTree", null,
    // RemoteUpdater.prototype.RESOLVE);
    // var postAction = function() {
    // var marketTree = new Zapatec.Tree('sybmolTree', { dynamic: true });
    // // marketTreeStyle.display = "block";
    // // setTimeout("toggleMarketTree()",2000)
    // }
    // updater.setPostResponseAction(postAction);
    // updater.update();
    //			
    // }
    //		
    //		
    // };
    // updater.setPostResponseAction(postAction);
    // updater.update();
}

function showEtfScreener() {
    // updater = new RemoteUpdater("/etfTree.jsp", 'POST', "etfTree", null,
    // RemoteUpdater.prototype.RESOLVE);
    // var postAction = function() {
    // var marketTree = new Zapatec.Tree('sybmolTree', { dynamic: true });
    // }
    // updater.setPostResponseAction(postAction);
    // updater.update();
}

function showSectorScreener() {
    // updater = new RemoteUpdater("/industryTree.jsp", 'POST', "marketTree", null,
    // RemoteUpdater.prototype.RESOLVE);
    // var postAction = function() {
    // var marketTree = new Zapatec.Tree('sybmolTree', { dynamic: true });
    // }
    // updater.setPostResponseAction(postAction);
    // updater.update();
}

function showFundScreener() {
    // updater = new RemoteUpdater("/fundTree.jsp", 'POST', "fundTree", null,
    // RemoteUpdater.prototype.RESOLVE);
    // var postAction = function() {
    // var marketTree = new Zapatec.Tree('sybmolTree', { dynamic: true });
    // }
    // updater.setPostResponseAction(postAction);
    // updater.update();
}

function toggleWatchListMarket(index) {
    var type = "oneMonth";
    // alert(index);
    var btm = document.getElementById('oneMonth');
    if (btm.className == "tabberactive") {
        type = "oneMonth";
    }
    btm = document.getElementById('threeMonths');
    if (btm.className == "tabberactive") {
        type = "threeMonths";
    }
    btm = document.getElementById('sixMonths');
    if (btm.className == "tabberactive") {
        type = "sixMonths";
    }
    btm = document.getElementById('oneYear');
    if (btm.className == "tabberactive") {
        type = "oneYear";
    }
    performanceProgressBlock();
    if (type == "oneWeek") {
        jsp = "/myWatchListPerformanceFrame.jsp?type=" + type + "&index=" + index;
    } else if (type == "oneMonth") {
        jsp = "/myWatchListPerformanceFrame.jsp?type=" + type + "&index=" + index;
    } else if (type == "threeMonths") {
        jsp = "/myWatchListPerformanceFrame.jsp?type=" + type + "&index=" + index;
    } else if (type == "sixMonths") {
        jsp = "/myWatchListPerformanceFrame.jsp?type=" + type + "&index=" + index;
    } else if (type == "oneYear") {
        jsp = "/myWatchListPerformanceFrame.jsp?type=" + type + "&index=" + index;
    }
    // alert(jsp);
    updater = new RemoteUpdater(jsp, 'POST', "performanceGraph", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        var newContainer = document.getElementById("performanceProgress");
        if (newContainer) {
            newContainer.innerHTML = "";
        }
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function togglePortfolioMarket(pid, index) {
    // alert(index);
    var type = "oneMonth";
    var btm = document.getElementById('oneMonth');
    if (btm.className == "tabberactive") {
        type = "oneMonth";
    }
    btm = document.getElementById('threeMonths');
    if (btm.className == "tabberactive") {
        type = "threeMonths";
    }
    btm = document.getElementById('sixMonths');
    if (btm.className == "tabberactive") {
        type = "sixMonths";
    }
    btm = document.getElementById('oneYear');
    if (btm.className == "tabberactive") {
        type = "oneYear";
    }
    performanceProgress();
    if (type == "life") {
        jsp = "/myPortfolioLive.jsp?xd=" + pid + "&type=" + type + "&index=" + index;
    } else if (type == "oneWeek") {
        jsp = "/myPortfolioPerformanceGraph.jsp?xd=" + pid + "&type=" + type + "&index=" + index;
    } else if (type == "oneMonth") {
        jsp = "/myPortfolioPerformanceGraph.jsp?xd=" + pid + "&type=" + type + "&index=" + index;
    } else if (type == "threeMonths") {
        jsp = "/myPortfolioPerformanceGraph.jsp?xd=" + pid + "&type=" + type + "&index=" + index;
    } else if (type == "sixMonths") {
        jsp = "/myPortfolioPerformanceGraph.jsp?xd=" + pid + "&type=" + type + "&index=" + index;
    } else if (type == "oneYear") {
        jsp = "/myPortfolioPerformanceGraph.jsp?xd=" + pid + "&type=" + type + "&index=" + index;
    }
    updater = new RemoteUpdater(jsp, 'POST', "performanceGraph", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        var newContainer = document.getElementById("performanceProgress");
        // alert(newContainer);
        if (newContainer) {
            newContainer.innerHTML = "";
        }
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function toggleWatchListPerformanceGraph(type) {
    var index = "0";
    // alert(type);
    var indexElm = document.getElementById("index1");
    if (index.value == "1") {
        index = "1";
    }
    indexElm = document.getElementById("index2");
    if (index.value == "2") {
        index = "2";
    }
    var btm = document.getElementById('oneMonth');
    btm.className = "tabberinactive";
    jsp = "";
    performanceProgress();
    if (type == "oneWeek") {
        jsp = "/myWatchListPerformanceFrame.jsp?type=" + type + "&index=" + index;
    } else if (type == "oneMonth") {
        jsp = "/myWatchListPerformanceFrame.jsp?type=" + type + "&index=" + index;
    } else if (type == "threeMonths") {
        jsp = "/myWatchListPerformanceFrame.jsp?type=" + type + "&index=" + index;
    } else if (type == "sixMonths") {
        jsp = "/myWatchListPerformanceFrame.jsp?type=" + type + "&index=" + index;
    } else if (type == "oneYear") {
        jsp = "/myWatchListPerformanceFrame.jsp?type=" + type + "&index=" + index;
    }
    updater = new RemoteUpdater(jsp, 'POST', "performanceGraph", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        if (lastButton) {
            lastButton.className = "tabberinactive";
        } else {}
        lastButton = document.getElementById(type);
        lastButton.className = "tabberactive";
        setTimeout("", 100);
        var newContainer = document.getElementById("performanceProgress");
        if (newContainer) {
            newContainer.innerHTML = "";
        }
        // alert(newContainer);
        // alert(newContainer.innerHTML);
    };
    updater.setPostResponseAction(postAction);
    updater.update();
    // var button = document.getElementById("type");
    // button.style.background="url('../images/barPositive_selected.jpg')";
}

function togglePortfolioPerformanceGraph(type, pid) {
    var index = "0";
    // alert(type)
    var indexElm = document.getElementById("index1");
    if (index.value == "1") {
        index = "1";
    }
    indexElm = document.getElementById("index2");
    if (index.value == "2") {
        index = "2";
    }
    var btm = document.getElementById('oneMonth');
    btm.className = "tabberinactive";
    jsp = "";
    if (type == "life") {
        jsp = "/myPortfolioLive.jsp?xd=" + pid + "&type=" + type + "&index=" + index;
    } else if (type == "oneWeek") {
        jsp = "/myPortfolioPerformanceFrame.jsp?xd=" + pid + "&type=" + type + "&index=" + index;
    } else if (type == "oneMonth") {
        jsp = "/myPortfolioPerformanceFrame.jsp?xd=" + pid + "&type=" + type + "&index=" + index;
    } else if (type == "threeMonths") {
        jsp = "/myPortfolioPerformanceFrame.jsp?xd=" + pid + "&type=" + type + "&index=" + index;
    } else if (type == "sixMonths") {
        jsp = "/myPortfolioPerformanceFrame.jsp?xd=" + pid + "&type=" + type + "&index=" + index;
    } else if (type == "oneYear") {
        jsp = "/myPortfolioPerformanceFrame.jsp?xd=" + pid + "&type=" + type + "&index=" + index;
    } else if (type == "twoYear") {
        jsp = "/myPortfolioPerformanceFrame.jsp?xd=" + pid + "&type=" + type + "&index=" + index;
    } else if (type == "threeYear") {
        jsp = "/myPortfolioPerformanceFrame.jsp?xd=" + pid + "&type=" + type + "&index=" + index;
    }
    updater = new RemoteUpdater(jsp, 'POST', "performanceGraph", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        if (lastButton) {
            lastButton.className = "tabberinactive";
        } else {}
        lastButton = document.getElementById(type);
        lastButton.className = "tabberactive";
        setTimeout("", 100);
        var newContainer = document.getElementById("performanceProgress");
        if (newContainer) {
            newContainer.innerHTML = "";
        }
        // alert(newContainer);
        // alert(newContainer.innerHTML);
    };
    updater.setPostResponseAction(postAction);
    updater.update();
    // var button = document.getElementById("type");
    // button.style.background="url('../images/barPositive_selected.jpg')";
}

function displayEfficientFrontier(mode) {
    postData = "/efficientFrontierGraph.jsp?type=" + mode;
    updater = new RemoteUpdater(postData, 'POST', "efficientFrontier", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function effectCallback() {}

function updateDivProgressJS(div) {
    var dv = document.getElementById(div + "Value");
    // alert(dv);
    var nv = 0;
    if (dv != null) {
        nv = dv.value;
        // alert(nv);
    }
    naivProgress("#" + div, nv);
}

function updateProgressJS() {
    // updateDivProgressJS("dayProgressbar");
    // updateDivProgressJS("yearProgressbar");
    // updateDivProgressJS("retScoreProgress");
    // updateDivProgressJS("riskScoreProgress");
}

function naivProgress(divId, value) {
    // this is becouse jquery does not seem to recognize the vars
    if (value < 5) {
        $(divId).progressbar({
            value: 5
        });
    } else if (value < 10) {
        $(divId).progressbar({
            value: 10
        });
    } else if (value < 20) {
        $(divId).progressbar({
            value: 20
        });
    } else if (value < 30) {
        $(divId).progressbar({
            value: 30
        });
    } else if (value < 40) {
        $(divId).progressbar({
            value: 40
        });
    } else if (value < 45) {
        $(divId).progressbar({
            value: 45
        });
    } else if (value <= 50) {
        $(divId).progressbar({
            value: 50
        });
    } else if (value < 55) {
        $(divId).progressbar({
            value: 55
        });
    } else if (value < 60) {
        $(divId).progressbar({
            value: 60
        });
    } else if (value < 70) {
        $(divId).progressbar({
            value: 70
        });
    } else if (value < 80) {
        $(divId).progressbar({
            value: 80
        });
    } else if (value < 90) {
        $(divId).progressbar({
            value: 90
        });
    } else if (value <= 95) {
        $(divId).progressbar({
            value: 95
        });
    } else if (value <= 100) {
        $(divId).progressbar({
            value: 98
        });
    }
}

function makeCorners() {
    $('#subMenu').corner("3px");
    $('#filterMenu').corner("3px");
}

function loadImages() {
    var imgDefer = document.getElementsByTagName('img');
    // alert(imgDefer);
    for (var i = 0; i < imgDefer.length; i++) {
        if (imgDefer[i].getAttribute('data-src')) {
            // alert(imgDefer[i]);
            imgDefer[i].setAttribute('src', imgDefer[i].getAttribute('data-src'));
        }
    }
}

function setUpTiles() {
    // loadImages()
    $("html").mouseover((function() {
        $("html").getNiceScroll().resize();
    }));
    if (portIdEl) {
        var pid = portIdEl.value;
        if (!pid) {
            pid = -1;
        }
    }
    var portIdEl = document.getElementById('pid');
    if (portIdEl) {
        var pid = portIdEl.value;
        if (!pid) {
            pid = -1;
        }
    }
    var cEl = document.getElementById('ch');
    if (cEl != null) {
        drawIntradaySymbolChart();
    }
    var portIdEl = document.getElementById('pid');
    if (portIdEl) {
        var pid = portIdEl.value;
        if (!pid) {
            pid = -1;
        }
    }
    var pageNumber = 0;
    var pEl = document.getElementById('ps');
    if (pEl) {
        pageNumber = pEl.value;
    }
    var adviserIdEl = document.getElementById('aid');
    if (adviserIdEl) {
        var aid = adviserIdEl.value;
        if (!aid) {
            aid = -1;
        }
    }
    newContainer = document.getElementById("pAnalysisBlock");
    if (newContainer) {
        postData = "/act.ma?action=pAnalysis&ps=-1";
        updater = new RemoteUpdater(postData, 'POST', "pAnalysisBlock", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
    newContainer = document.getElementById("efficientFrontier");
    if (newContainer) {
        setTimeout("displayEfficientFrontier(500)", 500);
    }
    newContainer = document.getElementById("pTotalBlock");
    if (newContainer) {
        postData = "/portfolioSummaryFooter.jsp";
        updater = new RemoteUpdater(postData, 'POST', "pTotalBlock", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
    newContainer = document.getElementById("selectPortfolio");
    if (newContainer) {
        postData = "/selectPortfolioGraph.jsp?" + "xd=" + pid;
        updater = new RemoteUpdater(postData, 'POST', "selectPortfolio", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
    newContainer = document.getElementById("refreshPortfolioPie");
    newContainer = document.getElementById("myPortfolioOverviewInput");
    if (newContainer) {
        updatePortfolioOverview(pid);
    }
    newContainer = document.getElementById("userAnalysisBlock");
    if (newContainer) {
        postData = "/userAnalysisBlockInclude.jsp";
        updater = new RemoteUpdater(postData, 'POST', "userAnalysisBlock", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
    newContainer = document.getElementById("allSearchResults");
    if (newContainer) {
        // alert(newContainer);
        var argsElement = document.getElementById("allSearchResultsArgs");
        // alert(argsElement);
        // alert(argsElement.value);
        if (argsElement) {
            postData = "/allSearchResultsIncludeNoTitle.jsp?" + argsElement.value;
            updater = new RemoteUpdater(postData, 'POST', "allSearchResults", null, RemoteUpdater.prototype.RESOLVE);
            updater.update();
        }
    }
    newContainer = document.getElementById("adviserLocation");
    if (newContainer) {
        // alert(newContainer);
        // argsElement = document.getElementById("allSearchResultsArgs");
        // alert(argsElement);
        postData = "/adviserLocationInfoFrame.jsp?aid=" + aid;
        updater = new RemoteUpdater(postData, 'POST', "adviserLocation", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
    updatePortfolioTotal();
    // increementNumber('symbolQuoteValue');
}

function toggleTailMarket(tailType) {
    var btm = document.getElementById("tmtype17");
    if (btm) {
        btm.className = "tabberinactive";
    }
    chartDiv = document.getElementById("tailMarketBody");
    if (chartDiv) {
        genericProgress(chartDiv);
        postData = "/allSearchResultsIncludeNoTitle.jsp?&q=100&n=20&searchType=" + tailType + "&showMore=false";
    }
    updater = new RemoteUpdater(postData, 'POST', "tailMarketBody", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        if (extraButton) {
            extraButton.className = "tabberinactive";
        } else {}
        extraButton = document.getElementById("tmtype" + tailType);
        extraButton.className = "tabberactive";
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function toggleTailFinal(tailType) {
    var btm = document.getElementById("ttype10");
    if (btm) {
        btm.className = "toggleTab";
    } else {
        btm = document.getElementById("ttype1");
        btm.className = "toggleTab";
    }
    chartDiv = document.getElementById("tailBody");
    if (chartDiv) {
        genericProgress(chartDiv);
        postData = "/allSearchResultsIncludeNoTitle.jsp?&q=100&n=20&searchType=" + tailType + "&showMore=false";
    }
    updater = new RemoteUpdater(postData, 'POST', "tailBody", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        if (lastButton) {
            lastButton.className = "toggleTab";
        } else {}
        lastButton = document.getElementById("ttype" + tailType);
        lastButton.className = "toggleTabSelected";
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function toggleTailRank(tailType) {
    var btm = document.getElementById("ttype1");
    if (btm) {
        btm.className = "tabberinactive";
    }
    chartDiv = document.getElementById("tailBody");
    if (chartDiv) {
        genericProgress(chartDiv);
        postData = "/allSearchResultsIncludeNoTitle.jsp?&q=100&n=20&searchType=" + tailType + "&showMore=false";
    }
    updater = new RemoteUpdater(postData, 'POST', "tailBody", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        if (lastMidButton) {
            lastMidButton.className = "tabberinactive";
        } else {}
        lastMidButton = document.getElementById("ttype" + tailType);
        lastMidButton.className = "tabberactive";
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function toggleTail(tailType) {
    newContainer = document.getElementById("tailBody");
    if (newContainer) {
        genericProgress(newContainer);
        postData = "/allSearchResultsInclude.jsp?&q=100&n=20&searchType=" + tailType;
        updater = new RemoteUpdater(postData, 'POST', "tailBody", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
}

function submitUserVote(userId, rating, updateDiv) {
    // alert(userId);
    var url = "/act.ma?action=rVoteUser&r=" + rating + "&aid=" + userId;
    // alert(url);
    newContainer = document.getElementById(updateDiv);
    if (newContainer) {
        updater = new RemoteUpdater(url, 'POST', updateDiv, null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
}

function skipModule(module, updateDiv) {
    // var url ="/act.ma?action=rSkipCompany&s="+symbol;
    var url = "/act.ma?action=rSkipModule&m=" + module;
    $.ajax(url).done((function(data) {
        $("#" + updateDiv).hide("slide", {
            direction: "right"
        }, 400);
        $("#" + updateDiv).html(data);
        $("#" + updateDiv).show("slide", {
            direction: "left"
        }, 100);
    }));
}

function skipTheme(module, updateDiv) {
    // var url ="/act.ma?action=rSkipCompany&s="+symbol;
    var url = "/act.ma?action=rSkipTheme&t=" + module;
    $.ajax(url).done((function(data) {
        $("#" + updateDiv).hide("slide", {
            direction: "right"
        }, 400);
        $("#" + updateDiv).html(data);
        $("#" + updateDiv).show("slide", {
            direction: "left"
        }, 100);
    }));
}

function skipEquity(s, updateDiv) {
    // var url ="/act.ma?action=rSkipCompany&s="+symbol;
    var url = "/act.ma?action=rSkipEquity&s=" + s;
    $.ajax(url).done((function(data) {
        $("#" + updateDiv).hide("slide", {
            direction: "right"
        }, 400);
        $("#" + updateDiv).html(data);
        $("#" + updateDiv).show("slide", {
            direction: "left"
        }, 100);
        increementNumber('symbolQuoteValue');
    }));
}

function closeModule(module, updateDiv) {
    var url = "/act.ma?action=rCloseModule&m=" + module;
    $.ajax(url).done((function(data) {
        $("#" + updateDiv).slideUp();
    }));
}

function skipCompanyVote(symbol, updateDiv) {
    // var url ="/act.ma?action=rSkipCompany&s="+symbol;
    var url = "/act.ma?action=rSkipCompany&s=" + symbol;
    $.ajax(url).done((function(data) {
        $("#" + updateDiv).hide("slide", {
            direction: "right"
        }, 400);
        $("#" + updateDiv).html(data);
        $("#" + updateDiv).show("slide", {
            direction: "left"
        }, 100);
    }));
}

function closeCompanyVote(symbol, updateDiv) {
    var url = "/act.ma?action=rCloseCompany&s=" + symbol;
    $.ajax(url).done((function(data) {
        $("#" + updateDiv).slideUp();
    }));
}

function submitCompanyVote(companyId, symbol, rating, updateDiv) {
    var url = "/act.ma?action=rVoteCompany&r=" + rating + "&ssd=" + companyId + "&s=" + symbol;
    // alert(url);
    // alert(url);
    newContainer = document.getElementById(updateDiv);
    if (newContainer) {
        updater = new RemoteUpdater(url, 'POST', updateDiv, null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
}

function updateNextSummary(pageNumber) {
    var viewBlcokId = "pHomeBlock";
    var viewBlcokUrl = "/act.ma?action=pRepaint&ps=" + pageNumber;
    var viewBlock = document.getElementById('viewId');
    if (viewBlock) {
        viewBlcokId = viewBlock.value;
    }
    var modeId = "1";
    var vMode = document.getElementById('mode');
    // alert(vMode);
    if (vMode) {
        modeId = vMode.value;
    }
    viewBlcokUrl = "/act.ma?action=" + viewBlcokId + "&ps=" + pageNumber + "&mode=" + modeId;
    newContainer = document.getElementById("pTitleBlock");
    if (newContainer) {
        updater = new RemoteUpdater("/portfolio/portfolioSummaryTitle.jsp?ps=" + pageNumber, 'POST', "pTitleBlock", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
    newContainer = document.getElementById("dashboard");
    if (newContainer) {
        portfolioSummaryProgress();
        // newContainer.innerHTML="<div class='progress'><img
        // src='/images/progress/smallCircle.gif'
        // border='0'>&nbsp;Processing...</div>";
        updater = new RemoteUpdater(viewBlcokUrl, 'POST', "dashboard", null, RemoteUpdater.prototype.RESOLVE);
        var postAction = function() {
            updatePerformanceBars();
            drawTinyIntradaySymbolCharts();
        };
        updater.setPostResponseAction(postAction);
        updater.update();
    }
}

function updatePartnerBlock(url, blockToUpdateId) {
    // alert(url);
    newContainer = document.getElementById(blockToUpdateId);
    if (newContainer) {
        genericProgress(newContainer); // .innerHTML="<div
        // class='progress'><img
        // src='/images/progress/smallCircle.gif'
        // border='0'>&nbsp;Processing...</div>";
        updater = new RemoteUpdater(url, 'POST', blockToUpdateId, null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
}

function updateaBlock(url, blockToUpdateId, colerLinkId, colerLinkOfId) {
    newButton = document.getElementById("overview");
    newButton.className = "tabberinactive";
    newButton = document.getElementById("detailed");
    newButton.className = "tabberinactive";
    newButton = document.getElementById("ratios");
    newButton.className = "tabberinactive";
    // newButton = document.getElementById("manage");
    // newButton.className = "tabberinactive";
    newButton = document.getElementById(colerLinkId);
    newButton.className = "tabberactive";
    url = addPortfolioHomeAttributesToUrl(url);
    // alert(url);
    newContainer = document.getElementById(blockToUpdateId);
    if (newContainer) {
        genericProgress(newContainer); // .innerHTML="<div
        // class='progress'><img
        // src='/images/progress/smallCircle.gif'
        // border='0'>&nbsp;Processing...</div>";
        updater = new RemoteUpdater(url, 'POST', blockToUpdateId, null, RemoteUpdater.prototype.RESOLVE);
        var action = function() {
            drawTinyIntradaySymbolCharts();
        }
        updater.setPostResponseAction(action);
        updater.update();
    }
}

function genericProgress(elem) {
    elem.innerHTML = "<div id='performanceProgress'><br><div class='performenceProgress'>" +
        "<i class='fa fa-refresh fa-spin fa-5x fa-fw m-25'></i><br><b>Processing</b>..." +
        "<font size='2'>Collecting required data</font></div></div>";
}

function portfolioSummaryProgress() {
    var newContainer = document.getElementById("dashboard");
    newContainer.innerHTML = "<div style='height:233px;' id='performanceProgress'><br><div class='performenceProgress'>" +
        "<i class='fa fa-refresh fa-spin fa-5x fa-fw m-25'></i><br><b>Processing</b>..." +
        "<font size='2'>Generating portfolio information</font></div></div>";
}

function toggleSymbolView(type, symbol) {
    var btm = document.getElementById('fundamentals');
    btm.className = "toggleMidTab";
    btm = document.getElementById('symbolMedia');
    btm.className = "toggleMidTab";
    btm = document.getElementById('symbolHistory');
    btm.className = "toggleMidTab";
    btm = document.getElementById('performance');
    btm.className = "toggleMidTab";
    btm = document.getElementById('symbolChat');
    btm.className = "toggleMidTab";
    jsp = "";
    var blockIt = document.getElementById('symbolViewBlock');
    if (type == "fundamentals") {
        genericProgress(blockIt);
        jsp = "/symbolViewLookUpSummary.jsp?s=" + symbol + "&main=true";
    } else if (type == "performance") {
        genericProgress(blockIt);
        jsp = "/symbolViewLookUpGraphs.jsp?s=" + symbol + "&main=true";
    } else if (type == "hype") {
        genericProgress(blockIt);
        jsp = "/symbolViewLookUpHype.jsp?s=" + symbol + "&main=true";
    } else if (type == "symbolChat") {
        genericProgress(blockIt);
        jsp = "/symbolViewLookUpComments.jsp?s=" + symbol + "&main=true";
    } else if (type == "symbolMedia") {
        genericProgress(blockIt);
        jsp = "/symbolViewLookUpMedia.jsp?s=" + symbol + "&main=true";
    } else if (type == "symbolHistory") {
        var q = "&";
        var from = document.getElementById("from");
        // alert(from);
        var to = document.getElementById('to');
        if (to) {
            q += "to=" + to.value;
        }
        if (from) {
            q += "&from=" + from.value;
        }
        genericProgress(blockIt);
        jsp = "/symbolViewLookUpHistory.jsp?s=" + symbol + "&main=true" + q;
        // alert(jsp);
    }
    updater = new RemoteUpdater(jsp, 'POST', "symbolViewBlock", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        if (lastButton) {
            lastButton.className = "toggleMidTab";
        } else {}
        lastButton = document.getElementById(type);
        lastButton.className = "toggleMidTabSelected";
        setTimeout("", 100);
        var newContainer = document.getElementById("performanceProgress");
        newContainer.innerHTML = "";
        // alert(newContainer);
        // alert(newContainer.innerHTML);
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function toggleAccountView(type) {
    var btm = document.getElementById('profile');
    btm.className = "toggleLink";
    jsp = "";
    var blockIt = document.getElementById('xwrite');
    genericProgress(blockIt);
    jsp = "/profileInclude.jsp?type=" + type;
    updater = new RemoteUpdater(jsp, 'POST', "xwrite", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        if (lastButton) {
            lastButton.className = "toggleLink";
        } else {}
        lastButton = document.getElementById(type);
        lastButton.className = "toggleLinkSelected";
        setTimeout("", 100);
        var newContainer = document.getElementById("performanceProgress");
        newContainer.innerHTML = "";
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function toggleAllocationGraph(type, pid) {
    newButton = document.getElementById("allocationPie");
    newButton.className = "tabberinactive";
    newButton = document.getElementById("allocationBubbles");
    newButton.className = "tabberinactive";
    jsp = "";
    var blockIt = document.getElementById('myPortfolioPie');
    genericProgress(blockIt);
    if (type == "allocationPie") {
        jsp = "/myPortfolioPieFrame.jsp?xd=" + pid;
    } else if (type == "allocationBubbles") {
        jsp = "/myPortfolioRiskReturnFrame.jsp?xd=" + pid;
    }
    updater = new RemoteUpdater(jsp, 'POST', "myPortfolioPie", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        newButton = document.getElementById(type);
        newButton.className = "tabberactive";
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function fireBubbleClick(url) {
    openPage(pageUrl)
}

function openPageNoBrowser(pageUrl, name) {
    myRef = window.open(pageUrl, name,
        'left=20,top=20,width=790,height=800,toolbar=0,resizable=0,scrollbars=0,menubar=0,status=0,location=0');
    // myRef = window.open(pageUrl,'sample',
    // 'width=790,height=800,toolbar=0,resizable=0,scrollbars=1,menubar=0,status=0,location=0');
}

function addPortfolioHomeAttributesToUrl(url) {
    var pageNumber = 0;
    var pEl = document.getElementById('ps');
    if (pEl) {
        pageNumber = pEl.value;
    }
    var viewId = "pHomeBlock";
    var vEl = document.getElementById('viewId');
    // alert(vEl);
    if (vEl) {
        viewId = vEl.value;
    }
    return url + "&ps=" + pageNumber + "&viewId=" + viewId;
}

function scorePortfolios() {
    var viewBlcokId = "portfolioHeaderBlock";
    var viewBlcokUrl = "/act.ma?action=generateUserPerformance";
    var finalUrl = "/invest/portfolioDashboard";
    var refreshView = "portfolioDashboard";
    var v = document.getElementById("refreshView");
    if (v) {
        refreshView = v.value;
        if (refreshView == "efficientFrontier") {
            finalUrl = "/invest/efficientFrontier";
            viewBlcokUrl = addSuggestionDataToPost(viewBlcokUrl);
        }
        // alert(finalUrl);
    } else {
        finalUrl = addPortfolioHomeAttributesToUrl(finalUrl);
    }
    newContainer = document.getElementById("portfolioHeaderBlock");
    if (newContainer) {
        // openPortfolioHeader();
        // allPortfoliosScoreProgress();
        showProgressDialog();
        updater = new RemoteUpdater(viewBlcokUrl, 'POST', "portfolioHeaderBlock", null, RemoteUpdater.prototype.RESOLVE);
        var action = function() {
            updateTransactionStatus();
            setTimeout("openPage('" + finalUrl + "')", 4000);
        };
        updater.setPostResponseAction(action);
        updater.update();
    }
}

function allPortfoliosScoreProgress() {
    var newContainer = document.getElementById("portfolioHeaderBlock");
    newContainer.innerHTML = "<div id='performanceProgress'><div style='font-size: .8em; padding:8px;padding-top:10px;font-weight: plain;'>" +
        "<img src='/images/progress/smallCircle.gif' align='left' border='0'>&nbsp;&nbsp;<font size='2' color='#35586C'>Scoring All Portfolios. Please wait...<font></div>";
}

function portfolioScoreProgress() {
    var newContainer = document.getElementById("portfolioHeaderBlock");
    newContainer.innerHTML = "<div id='performanceProgress'>" +
        "<div style='font-size: .8em; margin-top: 5px; padding:10px;padding-top:10px;font-weight: plain;'>" +
        "<img src='/images/progress/smallCircle.gif' align='left' border='0'>&nbsp;&nbsp;<font size='2' color='#35586C'>Scoring Portfolio. Please wait...<font></div>";
}

function getRandomSuggestProgressString() {
    progressTipBaseElement = document.getElementById("suggestTipsBase");
    // alert("Getting random: "+progressTipBaseElement);
    progressTipBase = 0;
    if (progressTipBaseElement) {
        progressTipBase = progressTipBaseElement.innerHTML;
    }
    randomTipId = getRandom(progressTipBase);
    // alert(randomTipId);
    randomTip = document.getElementById("suggestTips_" + randomTipId);
    if (randomTip) {
        t = randomTip.innerHTML;
        if (randomTipId < 7) {
            return "<font color='#f44336'>" + t + "</font>"
        } else if (randomTipId < 10) {
            return "<font color='#000000'>" + t + "</font>"
        } else if (randomTipId < 15) {
            return "<font color='#35586C'>" + t + "</font>"
        } else if (randomTipId < 19) {
            return "<font scolor='orange'>" + t + "</font>"
        } else if (randomTipId > 24) {
            return "<font >" + t + "</font>";
        } else {
            return "<font color='green'>" + t + "</font>"
        }
    } else {
        return "Calculating...";
    }
}

function getRandomSuggestStartingMessage() {
    randomTip = getRandom(10);
    if (randomTip == 0) {
        return "Starting suggestion module. Be patient...";
    } else if (randomTip == 1) {
        return "We'll do our best, but it may take some time. Please wait...";
    } else if (randomTip == 2) {
        return "Mean-Variance optimization process may take some. Please stay with us...";
    } else if (randomTip == 3) {
        return "Portfolio optimization requires a lot of computing power. Please be patient...";
    } else if (randomTip == 4) {
        return "Initializing Einstein Theory of Relativity module. Do not go away...";
    } else if (randomTip == 5) {
        return "Appling Darwin's Theory of Evolution. It may take some time, stay with us...";
    } else if (randomTip == 6) {
        return "It may take some time, markets are big, computers are small...";
    } else if (randomTip == 7) {
        return "Adding some Mortgage Backed Securities to your portfolio. Never mind...";
    } else if (randomTip == 8) {
        return "Initializing optimization analytics. Please wait...";
    } else if (randomTip == 9) {
        return "Starting suggestion module. Relax for a moment while we execute few things...";
    } else if (randomTip == 10) {
        return "Starting Mean-Variance optimization. Please wait, It may take some time...";
    }
    randomTip = document.getElementById("suggestTips_" + randomTipId);
    if (randomTip) {
        t = randomTip.innerHTML;
        if (randomTipId < 7) {
            return "<b><font size='2' color='#f44336'>" + t + "...<font></b>"
        } else if (randomTipId < 10) {
            return "<b><font size='2' color='#000000'>" + t + "...<font></b>"
        } else if (randomTipId < 15) {
            return "<b><font size='3' color='#35586C'>" + t + "...<font></b>"
        } else if (randomTipId < 19) {
            return "<b><font size='2' color='orange'>" + t + "...<font></b>"
        } else if (randomTipId > 24) {
            return "<font size='2'>" + t + "</font>";
        } else {
            return "<b><font size='2' color='green'>" + t + "...<font></b>"
        }
    } else {
        return "Calculating...";
    }
}

function processSuggestPortfoliosProgress() {
    q = getRandomSuggestProgressString();
    check = document.getElementById("suggestionProgress");
    if (check) {
        div = check;
        div.innerHTML = q;
    } else {
        return;
    }
    setTimeout("processSuggestPortfoliosProgress()", 5000);
}

function optimizePortfolio(pid) {
    scroll(0, 0);
    // alert(pid);
    postData = "/act.ma?action=optimizePortfolio&xd=" + pid;
    postData = addSuggestionDataToPost(postData);
    // rsts = document.getElementById("suggestResults");
    // rstsSteps = document.getElementById("suggestResultsStep");
    // alert(rsts);
    // rsts.style.display="block";
    getProgressDialogAnalyticsWithTips();
    setTimeout("processSuggestPortfoliosProgress()", 5000);
    updater = new RemoteUpdater(postData, 'POST', "suggestResults", null, RemoteUpdater.prototype.RESOLVE);
    var action = function() {
        displayPostGenericPieChart('opt0');
        displayPostGenericPieChart('cur0');
        displayPostGenericFunnelChart('0');
        displayPostGenericPieChart('0');
        displayPostExpectedOptimizationBarsChart();
        displayPostOptimizationRiskReturnBubbles();
        hideLargeProgressDialog();
        executeDivScripts("suggestResults");
    };
    updater.setPostResponseAction(action);
    updater.update();
}

function testOptimizationStrategy() {
    scroll(0, 0);
    postData = "/act.ma?action=testOptimizationStrategy";
    postData = addSuggestionDataToPost(postData);
    // rsts = document.getElementById("suggestResults");
    // rstsSteps = document.getElementById("suggestResultsStep");
    // alert(rsts);
    // rsts.style.display="block";
    getProgressDialogAnalyticsWithTips("Testing Optimization Strategy");
    setTimeout("processSuggestPortfoliosProgress()", 5000);
    updater = new RemoteUpdater(postData, 'POST', "suggestResults", null, RemoteUpdater.prototype.RESOLVE);
    var action = function() {
        displayPostGenericPieChart('opt0');
        displayPostGenericPieChart('cur0');
        displayPostGenericFunnelChart('0');
        displayPostGenericPieChart('0');
        displayPostExpectedOptimizationBarsChart();
        displayPostOptimizationRiskReturnBubbles();
        hideLargeProgressDialog();
        executeDivScripts("suggestResults");
    };
    updater.setPostResponseAction(action);
    updater.update();
}

function validateSuggestionInput(newSymbols) {
    var newCounter = 0;
    if (newSymbols) {
        var newS = newSymbols.split(',');
        newCounter = newS.length;
    }
    var area = document.getElementById("modelPortfolio");
    if (area) {
        var existing = area.value.trim();
        var arr = existing.split(',');
        if ((arr.length + newCounter) > 60) {
            alert("You have too many symbols in your model. The real time mean-variance optimization can only handle upto 60 equities at a time. " +
                "Please contact us if you would like to optimize it off line.");
            return true;
        }
    }
    return true;
}

function getProgressDialogAnalyticsWithTips(title) {
    if (!title) {
        title = "Working Your Portfolio";
    }
    var text =
        "<div class=\"justifiedText m-t-25\">" +
        "Running real-time Mean-Variance optimization may take some time. " +
        "Please wait while we process your request. We are doing the best we can to provide real-time experience over the web." +
        "<br/><div style=\"text-align:center;\">" +
        "<i class=\"fa fa-cog fa-spin fa-3x fa-fw m-15 c-blue\"></i>" +
        "<h3 style=\"text-align:center;\">While you are waiting:</h3>" +
        "<div style=\"padding:5px; text-align:center;margin-bottom: 10px;\">" +
        "<div id='suggestionProgress'>" +
        "<font color='gray'>" + getRandomSuggestStartingMessage() + "</font></div></div>";
    Swal.fire({
        title: title,
        html: text,
        type: "info",
        allowOutsideClick: false,
        allowEscapeKey: false,
        showCancelButton: false,
        confirmButtonColor: "#bbb",
        confirmButtonText: "Cancel, it is taking too long"
    }, (function() {
        window.location.reload();
    }));
}

function getProgressDialogIdeaPortfoio(title, url) {
    if (!title) {
        title = "Creating Portfolio";
    }
    var text =
        "Please wait while we generate positions for your portfolio." +
        "<br/><br/>" +
        "<i class=\"fa fa-cog fa-spin fa-3x fa-fw m-t-25\"></i>";
    Swal.fire({
        title: title,
        html: text,
        type: "info",
        showCancelButton: false,
        showConfirmButton: false,
        allowEscapeKey: false,
        allowOutsideClick: false,
        confirmButtonColor: "#f44336",
        confirmButtonText: "Cancel, it is taking too long"
    }, (function() {
        // openPage(url);
    }));
}

function generateNewIdeaPortfolio(themeName) {
    // alert(themeName);
    if (!validateSuggestionInput()) {
        return;
    }
    swal.queue([{
        title: 'Create Themed Portfolio',
        confirmButtonText: 'Yes, do it!',
        confirmButtonColor: "#f44336",
        showCancelButton: true,
        cancelButtonColor: "#aaa",
        allowEscapeKey: false,
        allowOutsideClick: false,
        focusConfirm: false,
        type: "question",
        html: "This will instantly create and optimize <b>" + themeName + "</b> portfolio for you. You can modify it later as you wish",
        showLoaderOnConfirm: true,
        preConfirm: function() {
            return new Promise(function(resolve) {
                $.get("/act.ma?action=createNewIdeaPortfolio&theme=" + themeName)
                    .done((function(data) {
                        Swal.fire({
                            title: "Portfolio Created",
                            text: "Your portfolio has been created and optimized.",
                            type: "success",
                            allowEscapeKey: false,
                            allowOutsideClick: false,
                            focusConfirm: false,
                            confirmButtonText: "View New Portfolio",
                            confirmButtonColor: "green"
                        }).then((function(result) {
                            if (result.value) {
                                postData = "/invest/myPortfolio?xd=" + data;
                                document.location.href = postData;
                            }
                        }))
                    }))
            })
        }
    }]).catch(swal.noop);
    // postData = "/act.ma?action=createNewIdeaPortfolio&theme="+themeName;
    // alert(postData);
    // getProgressDialogIdeaPortfoio("Generating "+themeName+" positions","");
    // $.post( postData, function( data ) {
    // openPage("/invest/myPortfolio?xd="+data);
    // });
}

function generateIdeaPortfolio(pid, themeName) {
    if (!validateSuggestionInput()) {
        return;
    }
    scroll(0, 0);
    // postData = "/act.ma?action=createIdeaPortfolio&xd="+pid+"&theme="+themeName;
    //
    // getProgressDialogIdeaPortfoio("Optimizing "+themeName+"
    // positions","/invest/myPortfolio&xd="+pid);
    //	
    // $.post( postData, function( data ) {
    // openPage("/invest/myPortfolio?xd="+pid);
    // });
    swal.queue([{
        title: 'Add Positions',
        confirmButtonText: 'Yes, do it!',
        confirmButtonColor: "#f44336",
        showCancelButton: true,
        cancelButtonColor: "#aaa",
        focusConfirm: false,
        allowEscapeKey: false,
        allowOutsideClick: false,
        type: "question",
        html: "This will add optimal positions from <b>" + themeName + "</b> theme to your selected portfolio. You will be able to remove or add other positions later",
        showLoaderOnConfirm: true,
        preConfirm: function() {
            return new Promise(function(resolve) {
                $.get("/act.ma?action=createIdeaPortfolio&xd=" + pid + "&theme=" + themeName)
                    .done((function(data) {
                        Swal.fire({
                            title: "Positions Added",
                            text: "Your " + themeName + " positions has been added.",
                            type: "success",
                            allowEscapeKey: false,
                            allowOutsideClick: false,
                            confirmButtonText: "View Portfolio",
                            confirmButtonColor: "green"
                        }).then((function(result) {
                            if (result.value) {
                                postData = "/invest/myPortfolio?xd=" + data;
                                document.location.href = postData;
                            }
                        }))
                    }))
            })
        }
    }]).catch(swal.noop);
}

function updateModelFilter() {
    postData = "/act.ma?action=updateModelInput";
    postData = addSuggestionDataToPost(postData);
    // alert(postData);
    $.post(postData, (function(data) {
        window.location.reload();
    }));
}

function updateModelInput() {
    postData = "/act.ma?action=updateModelInput";
    postData = addSuggestionDataToPost(postData);
    // alert(postData);
    updater = new RemoteUpdater(postData, 'POST', "suggestResults", null, RemoteUpdater.prototype.RESOLVE);
    var action = function() {
        openPage("/invest/modelInput");
    };
    updater.setPostResponseAction(action);
    updater.update();
}

function suggestPortfolios(pid) {
    if (!validateSuggestionInput()) {
        return;
    }
    scroll(0, 0);
    postData = "/act.ma?action=suggestPortfolios&xd=" + pid;
    postData = addSuggestionDataToPost(postData);
    // rsts = document.getElementById("suggestResults");
    // rstsSteps = document.getElementById("suggestResultsStep");
    // alert(rsts);
    // rsts.style.display="block";
    getProgressDialogAnalyticsWithTips();
    setTimeout("processSuggestPortfoliosProgress()", 4000);
    // alert(postData);
    updater = new RemoteUpdater(postData, 'POST', "suggestResults", null, RemoteUpdater.prototype.RESOLVE);
    var action = function() {
        hideLargeProgressDialog();
        displayPostSuggestionRiskReturnBubbles();
    };
    updater.setPostResponseAction(action);
    updater.update();
}

function closeSuggestionAddPortfolio(symbolicId) {
    div = document.getElementById("suggestionAddPortfolio" + symbolicId);
    div.style.display = "none";
}

function openSuggestionAddPortfolio(symbolicId) {
    // alert(symbolicId);
    popSuggestionAddPortfolio(symbolicId);
    // div = document.getElementById("suggestionAddPortfolio"+symbolicId);
    // alert(div);
    // div.style.display="block";
    // closeSuggestionResultsDetails(symbolicId);
}

function closeSuggestionResultsDetails(symbolicId) {
    btn = document.getElementById("resultDetailsImage" + symbolicId);
    btn.src = "/images/toggleExpertOn.gif";
    link = document.getElementById("resultDetailsLink" + symbolicId);
    link.innerHTML = "View Details";
    document.getElementById("suggestResultsDetais" + symbolicId).style.display = "none";
}

function closeExpertSuggestionInput() {
    // btn = document.getElementById("suggestAdvancedInputImage");
    // btn.src = "/images/toggleExpertOn.gif";
    // link = document.getElementById("suggestAdvancedInputLink");
    // link.innerHTML="Advanced Input Settings";
    // document.getElementById("suggestExpertInput").style.display="none";
    $("#suggestExpertInput").fadeOut();
}

function closeSuggestionInput() {
    btn = document.getElementById("inputButton");
    btn.className = "inputButton";
    document.getElementById("suggestInput").style.display = "none";
}

function popSuggestionExpertInput(pid) {
    div = document.getElementById("advancedCheck");
    // alert(div.checked);
    // btn = document.getElementById("suggestAdvancedInputImage");
    // link = document.getElementById("suggestAdvancedInputLink");
    if (div.checked) {
        $("#suggestExpertInput").fadeIn();
        // link.innerHTML="<b>Advanced Input Settings</b>";
    } else {
        closeExpertSuggestionInput();
    }
}

function closeSuggestionResults(div) {
    if (div) {
        div.style.display = "none";
    }
}

function closeAllSuggestionResults() {
    closeSuggestionResults(document.getElementById("suggestResultsDetais0"));
    closeSuggestionResults(document.getElementById("suggestResultsDetais1"));
    closeSuggestionResults(document.getElementById("suggestResultsDetais2"));
    closeSuggestionResults(document.getElementById("suggestResultsDetais3"));
}

function popSuggestionResultsDetails(symbolicId) {
    // $("#dialog").dialog("destroy");
    // alert("1");
    var div = document.getElementById("suggestResultsDetais" + symbolicId);
    if (div.style.display == "block") {
        closeAllSuggestionResults();
    } else {
        closeAllSuggestionResults();
        div.style.display = "block";
        displayPostGenericPieChart(symbolicId + "");
        displayPostGenericPieChart("opt" + symbolicId);
        displayPostExpectedOptimizationBarsChart(symbolicId);
        displayPostOptimizationRiskReturnBubbles(symbolicId);
    }
    // $("#dialog").dialog("destroy");
    // divDialog = document.getElementById("suggestionPriviewDialog");
    Swal.fire({
        title: "",
        html: div.innerHTML,
        width: "90%",
        showCancelButton: false,
        allowEscapeKey: false,
        allowOutsideClick: false,
        confirmButtonColor: "#cccccc",
        confirmButtonText: "Close"
    }, (function() {}));
    // var htmlDiv = div.innerHTML;
    //	
    //	
    // div.innerHTML ="";
    div.style.display = "none";
    // $("#suggestionPriviewDialog").dialog({
    // modal: true,
    // resizable: false,
    // show: 'fade',
    // draggable: false,
    // closeOnEscape: false,
    // width: 1000,
    // height: 560,
    // fluid: true, //new option
    // close: function() {
    // var placeholderDiv =
    // document.getElementById("suggestResultsDetais"+symbolicId);
    // var htmlDiv = divDialog.innerHTML;
    // placeholderDiv.innerHTML =htmlDiv;
    // divDialog.innerHTML="";
    // },
    // buttons: {
    // Close: function() {
    // $(this).dialog('close');
    // }
    // }
    //			
    // });
    // divDialog.innerHTML = htmlDiv;
    // removeDialogTitle("#suggestionPriviewDialog");
    // decorateOkButton();
    // $('#suggestionPriviewDialog').dialog('open');
}

function popSuggestionAddPortfolio(symbolicId) {
    createSuggestedPortfolio(symbolicId);
}

function popSuggestionInput(pid) {
    btn = document.getElementById("inputButton");
    if (btn.className == "inputButton") {
        btn.className = "inputButtonOff";
        document.getElementById("suggestInput").style.display = "block";
    } else {
        closeSuggestionInput();
    }
    var results = document.getElementById("suggestResults");
    results.style.display = "none";
}

function scorePortfolio(pid, scrollTop) {
    newContainer = document.getElementById("portfolioHeaderBlock");
    var refreshView = "myPortfolio";
    var v = document.getElementById("refreshView");
    if (v) {
        refreshView = v.value;
    }
    if (newContainer) {
        // alert("2");
        postData = "/act.ma?action=scorePortfolio&xd=" + pid;
        postData = addSuggestionDataToPost(postData);
        updater = new RemoteUpdater(postData, 'POST', "portfolioHeaderBlock", null, RemoteUpdater.prototype.RESOLVE);
        if (scrollTop) {
            scroll(0, 0);
            showProgressDialog();
            // portfolioScoreProgress();
        }
        // openPortfolioHeader();
        var action = function() {
            // updateTransactionStatus(pid);
            var postData = "/invest/" + refreshView + "?xd=" + pid + "&refreshView=" + refreshView;
            postData = addSuggestionDataToPost(postData);
            openPage(postData);
            // openPortfolioHeader();
        };
        updater.setPostResponseAction(action);
        updater.update();
    } else {
        window.location.reload();
    }
}

function checkPerformance(pid, scrollTop) {
    newContainer = document.getElementById("portfolioHeaderBlock");
    // alert(newContainer);
    var refreshView = "myPortfolioLandscape";
    var v = document.getElementById("refreshView");
    if (v) {
        refreshView = v.value;
    }
    // alert(refreshView);
    if (newContainer) {
        // alert("0");
        // alert("2");
        if (scrollTop) {
            scroll(0, 0);
            showProgressDialog();
            // portfolioScoreProgress();
        }
        postData = "/act.ma?action=scorePortfolio&xd=" + pid;
        postData = addSuggestionDataToPost(postData);
        updater = new RemoteUpdater(postData, 'POST', "portfolioHeaderBlock", null, RemoteUpdater.prototype.RESOLVE);
        var action = function() {
            // alert(pid);
            // updateTransactionStatus(pid);
            // alert(pid);
            var postData = "/invest/" + refreshView + "?xd=" + pid + "&refreshView=" + refreshView;
            postData = addSuggestionDataToPost(postData);
            setTimeout("openPage('" + postData + "')", 3000);
            // openPortfolioHeader();
        };
        updater.setPostResponseAction(action);
        updater.update();
    }
}

function generatePerformance() {
    postData = "/act.ma?action=generatePerformance";
    setTimeout("", 100);
    pitchletProgress();
    updater = new RemoteUpdater(postData, 'POST', "generatePerformanceBlock", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function generateSiteMap() {
    postData = "/act.ma?action=generateSiteMap";
    setTimeout("", 100);
    // pitchletProgress();
    updater = new RemoteUpdater(postData, 'POST', "generateSiteMapBlock", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function resetSliders() {
    for (i = 0; i < 20; i++) {
        var val = document.getElementById('allocate' + i);
        var sym = document.getElementById('sid' + i);
        if (val) {
            initSlider(i, (val.value / 5), sym.value);
        } else {
            break;
        }
    }
}

function generateDirectories() {
    postData = "/act.ma?action=generateDirectories";
    setTimeout("", 100);
    // pitchletProgress();
    updater = new RemoteUpdater(postData, 'POST', "generateDirectoriesBlock", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function updateRiskLevel(risk) {
    postData = "/suggestPortfolioInput.jsp?riskLevel=" + risk;
    setTimeout("", 100);
    // pitchletProgress();
    // alert(postData);
    updater = new RemoteUpdater(postData, 'POST', "suggestMainInput", null, RemoteUpdater.prototype.RESOLVE);
    var action = function() {
        initRiskSlider("riskLevel", risk);
        initDateRangeSlider("dayRange", currentDayRange);
    };
    updater.setPostResponseAction(action);
    updater.update();
}

function updateDateRange(dr) {
    postData = "/suggestPortfolioInput.jsp?dayRange=" + dr;
    setTimeout("", 100);
    // pitchletProgress();
    // alert(postData);
    updater = new RemoteUpdater(postData, 'POST', "suggestMainInput", null, RemoteUpdater.prototype.RESOLVE);
    var action = function() {
        initDateRangeSlider("dayRange", dr);
        initRiskSlider("riskLevel", currentRiskLevel);
    };
    updater.setPostResponseAction(action);
    updater.update();
}

function initDateRangeSlider(index, val) {
    currentDayRange = val;
    // alert("symbol :"+index);
    new Control.Slider('handle' + index, 'track' + index, {
        range: $R(0, 12),
        values: [0, 1, 3, 6, 9, 12],
        sliderValue: currentDayRange,
        onSlide: function(v) {
            $('a' + index).innerHTML = v
        },
        onChange: function(v) {
            $('a' + index).innerHTML = v;
            currentDayRange = v;
            updateDateRange(v);
        },
        startSpan: 'span' + index
    });
}

function initRiskSlider(index, val) {
    currentRiskLevel = val;
    // alert("symbol :"+index);
    new Control.Slider('handle' + index, 'track' + index, {
        range: $R(0, 100),
        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
        sliderValue: currentRiskLevel,
        onSlide: function(v) {
            $('a' + index).innerHTML = v
        },
        onChange: function(v) {
            $('a' + index).innerHTML = v;
            currentRiskLevel = v;
            updateRiskLevel(v);
        },
        startSpan: 'span' + index
    });
}

function initSlider(index, val, symbol) {
    new Control.Slider('handle' + index, 'track' + index, {
        range: $R(0, 30),
        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
        sliderValue: val,
        onSlide: function(v) {
            $('a' + index).innerHTML = v * 1
        },
        onChange: function(v) {
            $('a' + index).innerHTML = v * 1;
            rebalancePortfolio(symbol, v * 1);
        },
        startSpan: 'span' + index
    });
}

function appendParamsToWidgetCode(ve, codeid, isFree) {
    code = document.getElementById("textCode" + codeid);
    var base = "<script src=\"https://www.macroaxis.com/widgets/url.jsp?t=";
    if (!isFree) {
        base = "<script src=\"https://www.macroaxis.com/widgets/fussion.jsp?t=";
    }
    code.value = base + codeid + "&s=" + ve.value + "\"></script>";
}

function setParamsToWidgetCode(ve, codeid, isFree) {
    code = document.getElementById("textCode" + codeid);
    var base = "<script src=\"https://www.macroaxis.com/widgets/url.jsp?t=";
    if (!isFree) {
        base = "<script src=\"https://www.macroaxis.com/widgets/fussion.jsp?t=";
    }
    code.value = base + codeid + "&s=" + ve.value + "\"></script>";
}

function refreshWidgetPreview(widgetpage, wid, isFree) {
    var post = widgetpage;
    if (!isFree) {
        post += "?ip=true";
    }
    var code = document.getElementById(wid + "_params");
    if (code) {
        var val = code.value;
        if (val != null) {
            post += "&s=" + val;
        }
    } else {
        var params = "";
        // alert(params);
        for (i = 0; i < 50; i++) {
            var indexVal = document.getElementById(wid + "index" + i);
            // alert(indexVal);
            if (indexVal) {
                if (indexVal.checked) {
                    params = params + "," + indexVal.value
                }
            }
        }
        // alert(params);
        if (params) {
            params = params.substring(1);
            post += "&s=" + params;
        }
    }
    // alert(post);
    openPage(post);
}

function appendParamsToCode(ve, codeid) {
    // code = document.getElementById("textCode"+codeid);
    var base = "<script src=\"https://www.macroaxis.com/widgets/url.jsp?t=";
    var val = document.getElementById("checkPremium" + codeid);
    if (val.checked) {
        base = "<script src=\"https://www.macroaxis.com/widgets/fussion.jsp?t=";
    }
    code.value = base + codeid + "&s=" + ve.value + "\"></script>";
}

function setParamsToCode(ve, codeid) {
    code = document.getElementById("textCode" + codeid);
    var base = "<script src=\"https://www.macroaxis.com/widgets/url.jsp?t=";
    var val = document.getElementById("checkPremium" + codeid);
    if (val.checked) {
        base = "<script src=\"https://www.macroaxis.com/widgets/fussion.jsp?t=";
    }
    code.value = base + codeid + "&s=" + ve.value + "\"></script>";
}

function selectIndex(codeid) {
    var code = document.getElementById("textCode" + codeid);
    var params = "";
    for (i = 0; i < 50; i++) {
        var val = document.getElementById(codeid + "index" + i);
        if (val) {
            if (val.checked) {
                params = params + "," + val.value
            }
        }
    }
    params = params.substring(1);
    var base = "<script src=\"https://www.macroaxis.com/widgets/url.jsp?t=";
    var premCheck = document.getElementById("checkPremium");
    if (premCheck) {
        // if(val.checked) {
        base = "<script src=\"https://www.macroaxis.com/widgets/fussion.jsp?t=";
        // }
    }
    code.value = base + codeid + "&s=" + params + "\"></script>";
}

function adsFreeCode(codeid) {
    code = document.getElementById("textCode" + codeid);
    var codeVal = code.value;
    var val = document.getElementById("checkPremium" + codeid);
    // alert(val);
    var rmBlock = document.getElementById("declaimerPremium" + codeid);
    if (val.checked) {
        code.value = codeVal.replace("https://www.macroaxis.com/widgets/url.jsp", "https://www.macroaxis.com/widgets/fussion.jsp");
        if (rmBlock) {
            var rmBlockStyle = rmBlock.style;
            rmBlockStyle.display = "block";
            rmBlockStyle.visibility = "visible";
        }
    } else {
        code.value = codeVal.replace("https://www.macroaxis.com/widgets/fussion.jsp", "https://www.macroaxis.com/widgets/url.jsp");
        if (rmBlock) {
            var rmBlockStyle = rmBlock.style;
            rmBlockStyle.display = "none";
            rmBlockStyle.visibility = "hidden";
        }
    }
    // code = document.getElementById(codeid);
}

function popTheSampleGadgetold(block, t) {
    params = document.getElementById(t + "_params");
    postData = "/widgets/samplePop.jsp?t=" + t;
    if (params) {
        postData += "&s=" + params;
    }
    top.location.href = postData;
}

function popTheSampleGadget(block, t) {
    // alert("firing: "+url);
    var action = function(updater) {
        var content = updater.xmlhttp.responseText;
        if (content == "null") {
            alert(content);
        } else {
            content = "<div class='ToolTipBox' style='font-size: 1em; width:300px; line-height: 1.2em; padding:4px;'>" + content + "</div>";
            showPopUpPanel(block, content, -25, -20);
            hiddenTip = false;
        }
    };
    postData = "/widgets/samplePopFrame.jsp?t=" + t;
    params = document.getElementById(t + "_params");
    if (params) {
        postData += "&s=" + params.value;
    }
    // alert(postData);
    var rr = new RemoteRequest(postData, 'POST', "", action);
    rr.request();
    // alert("fired: "+url);
    hiddenTip = true;
}

function runRiskReturns() {
    params = document.getElementById("symbols");
    url = "/invest/marketRiskAndReturn?single=true&s=" + params.value;
    url = addSuggestionDataToPost(url);
    // alert(url);
    openPage(url);
}

function runNextRandomBacktest() {
    params = document.getElementById("symbols");
    url = "/invest/portfolioBacktesting";
    openPage(url);
}

function runFactoryReturns() {
    params = document.getElementById("budget");
    url = "/?pitch=portfolioFactory&s=" + params.value;
    openPage(url);
}

function runSingleCorrelationFromMultiSelect() {
    var s = document.getElementById("s");
    //alert(s);
    var arr = s.value.split(',');
    //alert(arr);
    //var s2 = document.getElementById("s2");
    if (arr.length != 2) {
        popErrorMessageDialog("Input Error", "Please specify two equities!")
        return;
    }
    // alert(s1+" vs "+s2);
    var vs1 = arr[0];
    var vs2 = arr[1];
    //	if (s1) {
    //		vs1= s1.value;
    //	}
    //	if (s2) {
    //		vs2= s2.value;
    //	}
    var url = "/invest/market/" + vs1 + "--compareProfile--" + vs2;
    url = addSuggestionDataToPost(url);
    //alert(url);
    openPage(url);
}

function runSingleCorrelation() {
    var s1 = document.getElementById("s1");
    var s2 = document.getElementById("s2");
    // alert(s1+" vs "+s2);
    var vs1 = "";
    var vs2 = "";
    if (s1) {
        vs1 = s1.value;
    }
    if (s2) {
        vs2 = s2.value;
    }
    url = "/invest/market/" + vs1 + "--compareProfile--" + vs2;
    url = addSuggestionDataToPost(url);
    // alert(url);
    openPage(url);
}

function runRatings() {
    params = document.getElementById("symbols");
    var url = "/invest/marketRatings?s=" + params.value;
    url = addSuggestionDataToPost(url);
    openPage(url);
}

function runCorrelation() {
    params = document.getElementById("symbols");
    //alert(params.value);
    outputTypeEl = document.getElementById("radioCloud");
    outputType = "table";
    if (outputTypeEl.checked) {
        outputType = "cloud";
    }
    var elp = document.getElementById("partnerContent");
    if (!elp) {
        var s = params.value;
        s = s.replaceAll(",,", ",");
        if (s.endsWith(",")) {
            s = s.substring(0, s.length - 1);
        }
        var arr = s.split(',');
        if (arr.length == 2) {
            url = "/invest/market/" + arr[0] + "--compareProfile--" + arr[1]; //AMZN";
        } else {
            url = "/invest/marketCorrelation?s=" + s + "&ot=" + outputType + "&mode=i";
        }
    } else {
        url = "/partners/page/correlationGizmo.jsp?s=" + s + "&ot=" + outputType + "&mode=i";
    }
    url = addSuggestionDataToPost(url);
    //alert(url);
    openPage(url);
}

function runCompare() {
    var vs = "";
    var s = document.getElementById("symbols");
    if (!s) {
        s = document.getElementById("s");
    }
    if (s) {
        vs = s.value;
    }
    vs = vs.replaceAll(",,", ",");
    if (vs.endsWith(",")) {
        vs = vs.substring(0, vs.length - 1);
    }
    url = "/invest/competition/" + vs;
    // alert(url);
    openPage(url);
}

function runAdvice() {
    var s = document.getElementById("s");
    var vs = "";
    if (s) {
        vs = s.value;
    }
    url = "/invest/advice/" + vs;
    url = addSuggestionDataToPost(url);
    // alert(url);
    openPage(url);
}

function runOdds() {
    var val = $('input:radio[id=moreThan]:checked').val();
    if (!val || val == "") {
        val = "less";
    } else {
        val = "more";
    }
    var s = document.getElementById("s");
    var p = document.getElementById("p");
    var vs = "";
    var vp = "";
    if (s) {
        vs = s.value;
    }
    if (p) {
        vp = p.value;
    }
    if (vs == "" || vp == "") {
        popErrorMessageDialog("Error calculating odds", "Please make sure correct symbol and target price are specified");
        return false;
    }
    url = "/future-stock-price/" + vs + "/" + vp;
    url = addSuggestionDataToPost(url);
    url += "&a=" + val;
    // alert(url);
    openPage(url);
}

function runAlpha() {
    var s = document.getElementById("s");
    var vs = "";
    if (s) {
        vs = s.value;
    }
    url = "/invest/alphaSearch/" + vs;
    url = addSuggestionDataToPost(url);
    // alert(url);
    openPage(url);
}

function runPiotroskiFScore(symbol) {
    var s = document.getElementById("s");
    var vs = "";
    if (s) {
        vs = s.value;
    }
    url = "/invest/ratio/" + vs + "--Piotroski-F-Score";
    openPage(url);
}

function runAccountTrends(symbol) {
    var s = document.getElementById("s");
    var vs = "";
    if (s) {
        vs = s.value;
    }
    url = "/invest/symbolRatiosCompareOverTime/" + vs;
    openPage(url);
}

function runAccountRelationships(symbol) {
    var s = document.getElementById("s");
    var vs = "";
    if (s) {
        vs = s.value;
    }
    url = "/invest/symbolRatiosCorrelations/" + vs;
    openPage(url);
}

function runSymbolBacktest() {
    // alert('a');
    var s = document.getElementById("s");
    var n = document.getElementById("n");
    var vs = "";
    var vn = "";
    if (s) {
        vs = s.value;
    }
    if (n) {
        vn = n.value;
    }
    url = "/market-value/" + vs + "/" + vn;
    url = addSuggestionDataToPost(url);
    // alert(url);
    openPage(url);
}

function drawIntradaySymbolChart() {
    cEl = document.getElementById('ch');
    var ch = "";
    var neg = false;
    if (cEl) {
        ch = cEl.value;
        if (ch) {
            if (ch.indexOf("-") > -1) {
                neg = true;
            }
        }
    }
    var d1 = 0;
    var d2 = 0;
    var cwidth = 18;
    var d1e = document.getElementById('d1');
    var d2e = document.getElementById('d2');
    cwidthe = document.getElementById('cwidth');
    if (d1e != null) {
        d1 = d1e.value;
    }
    if (d2e != null) {
        d2 = d2e.value;
    }
    height = "3em";
    if (cwidthe) {
        cwidth = cwidthe.value;
        height = "5em";
    }
    widthDisplay = cwidth + ".0em"
    col = '#C3FDB8';
    lcol = '#347C17';
    bcol = '#347C17';
    if (neg) {
        col = '#ff9966';
        lcol = '#FF0000';
        bcol = '#FF0000';
    }
    // alert('');
    if (d1 > 0 && d2 > 0) {
        $('#compositeline').sparkline('html', {
            height: height,
            width: widthDisplay,
            lineColor: lcol,
            fillColor: col,
            minSpotColor: true,
            maxSpotColor: true,
            spotColor: bcol,
            spotRadius: 4
        });
    } else {
        $('#compositeline').sparkline('html', {
            height: height,
            width: widthDisplay,
            lineColor: lcol,
            fillColor: col,
            minSpotColor: true,
            maxSpotColor: true,
            spotColor: bcol,
            spotRadius: 4
        });
    }
}

function submitIntradaySymbolFeed(symbol, reset) {
    qEl = document.getElementById('cq');
    updateDiv = document.getElementById("intradayContent");
    var url = "/widgets/intradaySymbolFeedInclude.jsp?s=" + symbol;
    var xstVar = document.getElementById("xst");
    var sdlVar = document.getElementById("sdl");
    if (sdlVar) {
        url += "&sdl=" + sdlVar.value;
    }
    if (xstVar) {
        url += "&xst=" + xstVar.value;
    }
    if (qEl) {
        if (reset == true) {
            quote_lag1 = qEl.value;
            quote_lag2 = qEl.value;
            quote_lag3 = qEl.value;
            quote_lag4 = qEl.value;
            quote_lag5 = qEl.value;
        } else {
            if (!quote_lag5) {
                quote_lag5 = qEl.value;
            } else {
                quote_lag5 = quote_lag4;
            }
            if (!quote_lag4) {
                quote_lag4 = qEl.value;
            } else {
                quote_lag4 = quote_lag3;
            }
            if (!quote_lag3) {
                quote_lag3 = qEl.value;
            } else {
                quote_lag3 = quote_lag2;
            }
            if (!quote_lag2) {
                quote_lag2 = qEl.value;
            } else {
                quote_lag2 = quote_lag1;
            }
            quote_lag1 = qEl.value;
            url = "/widgets/intradaySymbolFeedInclude.jsp?s=" + symbol + "&cq=" + quote_lag5 + "," + quote_lag4 + "," + quote_lag3 + "," + quote_lag2 + "," + quote_lag1;
            // alert(url);
        }
    }
    if (updateDiv) {
        var action = function(updater) {
            drawIntradaySymbolChart();
        };
        // alert(url);
        updater = new RemoteUpdater(url, 'POST', "intradayContent", null, RemoteUpdater.prototype.RESOLVE);
        updater.setPostResponseAction(action);
        updater.update();
    }
}

function submitGoogleIntradayFeed(symbol) {
    var url = "/widgets/intradayGoogleSymbolFeedInclude.jsp?s=" + symbol;
    // alert(url);
    updateDiv = document.getElementById("feedContent");
    if (updateDiv) {
        updater = new RemoteUpdater(url, 'POST', "feedContent", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
}

function submitCompanySnapshot(symbol) {
    var url = "/widgets/companySnapshotInclude.jsp?s=" + symbol;
    // alert(url);
    updateDiv = document.getElementById("feedContent");
    if (updateDiv) {
        updater = new RemoteUpdater(url, 'POST', "feedContent", null, RemoteUpdater.prototype.RESOLVE);
        var postAction = function() {
            drawColumnSparklineFromHiddenStrings('latestPricesColumns');
            increementNumber('symbolQuoteValue');
            updater.setPostResponseAction(postAction);
        };
        updater.setPostResponseAction(postAction);
        updater.update();
    }
}

function submitQuickFeed(symbol) {
    var url = "/widgets/quickFeedInclude.jsp?s=" + symbol;
    // alert(url);
    updateDiv = document.getElementById("feedContent");
    if (updateDiv) {
        updater = new RemoteUpdater(url, 'POST', "feedContent", null, RemoteUpdater.prototype.RESOLVE);
        updater.update();
    }
}

function connect(block, token) {
    postData = "/partners/facebook/?axis=" + token + "&hn=" + block + "&action=zap";
    setTimeout("", 1000);
    updater = new RemoteUpdater(postData, 'POST', block, null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function drawTinyIntradaySymbolCharts() {
    for (i = 0; i < 100; i++) {
        $("#portfolioOval" + i).corner("3px");
        sName = "cl_" + i;
        cEl = document.getElementById(sName);
        if (cEl != null) {
            sNeg = document.getElementById("up_" + sName);
            if (sNeg != null) {
                drawTinyIntradaySymbolChart(sName, false);
            } else {
                drawTinyIntradaySymbolChart(sName, true);
            }
        } else {
            // break;
        }
    }
}

function drawTinyIntradaySymbolChart(chartId, neg) {
    cEl = document.getElementById(chartId);
    // alert(chartId);
    widthDisplay = "4.0em";
    height = "auto";
    col = '#33CC66';
    lcol = '#000000';
    bcol = '#339966';
    if (neg) {
        col = '#FF3333';
        lcol = '#000000';
        bcol = '#990033';
    }
    lineName = "#" + chartId;
    $(lineName).sparkline('html', {
        height: height,
        width: widthDisplay,
        lineColor: lcol,
        fillColor: col,
        minSpotColor: true,
        maxSpotColor: true,
        spotColor: bcol,
        spotRadius: 0
    });
}

function processUpgrade() {
    postData = "/login?action=upgrade";
    setTimeout("", 100);
    var newContainer = document.getElementById("upgradeProgress");
    newContainer.innerHTML = "<br><div class='pitchletProgress'>" +
        "<i class='fal fa-sync fa-spin c-gray fa-5x fa-fw m-25'></i><br><br><b>Processing</b>...<br>" +
        "We are processing your request. " +
        "Please allow few seconds to finish your upgrade.</div>";
    updater = new RemoteUpdater(postData, 'POST', "upgradeProgress", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function updateProgressDialog(txt) {
    if (txt == null) {
        var infoMsg = document.getElementById("infoHint");
        txt = infoMsg.innerHTML;
    }
    var dlg = $("progressDialog");
    // alert(dlg);
    if (dlg != null) {
        dlg.innerHTML = "<div style='margin-top: 37px; text-align: center; align: center;'>" +
            "<i class='fa fa-refresh fa-spin fa-5x fa-fw m-25'></i><div style='height: 25px;'></div>" + txt + "...</div>";
        // alert(dlg);
    }
}

function hideErrorDialog() {
    $("#errorDialog").dialog("close");
}

function hideProgressDialog() {
    if (swal) {
        swal.close();
    }
    // $("#progressDialog").dialog("close");
}

function hideLargeProgressDialog() {
    // $("#largeProgressDialog").dialog("close");
    swal.close();
}

function showLargeProgressDialog() {
    $("#largeProgressDialog").dialog({
        bgiframe: true,
        autoOpen: false,
        modal: true,
        width: 690,
        height: 'auto',
        fluid: true // new option
    });
    $('#largeProgressDialog').dialog('open');
    var dlg = document.getElementById("largeProgressDialog");
    removeDialogTitle("#largeProgressDialog");
}

function showProgressDialogWithMessage(message) {
    var title = "Please Wait";
    var text =
        "<i class=\"fa fa-cog fa-spin fa-3x fa-fw m-25\"></i><br/>" + message;
    Swal.fire({
        title: title,
        html: text,
        type: "info",
        showCancelButton: false,
        allowEscapeKey: false,
        allowOutsideClick: false,
        confirmButtonText: "Cancel, it is taking too long",
        confirmButtonColor: "#aaa"
    }, (function() {
        window.location.reload();
    }));
}

function showProgressDialog() {
    showProgressDialogWithMessage("Running real-time analytics takes huge amount of computing resources. " +
        "Please wait while we process your request");
}

function checkErrorMessageDialog(title, body) {
    popErrorMessageDialog(title, body);
}

function removeDialogTitle(dlgId) {
    $(dlgId).siblings('div.ui-dialog-titlebar').remove();
}

function popInfoMessageDialog(title, body) {
    // alert(body);
    Swal.fire({
        title: title,
        footer: body,
        type: "info",
        allowEscapeKey: false,
        allowOutsideClick: false,
        showCancelButton: false,
        confirmButtonText: "Ok"
    }, (function() {
        swal.close();
    }));
}

function popErrorMessageDialog(title, body, onOkUrl) {
    // alert('s');
    Swal.fire({
        title: title,
        footer: body,
        type: "error",
        allowEscapeKey: false,
        allowOutsideClick: false,
        showCancelButton: false,
        confirmButtonColor: "#000",
        confirmButtonText: "Ok"
    }).then((function(result) {
        closeErrorDialog(onOkUrl);
    }));
}

function popProgressDialog(title, body) {
    if (!title) {
        title = "Processing...";
    }
    if (!body) {
        body = "Please Wait";
    } else {
        body = body + "<br/><i class=\"fa fa-cog fa-spin fa-3x fa-fw m-t-25\"></i><br/>";
    }
    // var text =
    // "<div class=\"modal-body\">" +body +
    // "<br/><br/>" +
    // "<i class=\"fa fa-cog fa-spin fa-3x fa-fw m-t-25\"></i>" +
    // "</div>";
    Swal.fire({
        title: title,
        type: 'info',
        html: body,
        allowEscapeKey: false,
        allowOutsideClick: false,
        confirmButtonColor: '#fff',
        confirmButtonText: ''
    });
}

function popModelHelpMessageDialog(title, body) {
    Swal.fire({
        title: title,
        type: "info",
        html: "<div class='justifiedText m-t-20'>" + body + "</div>",
        showCancelButton: false,
        allowEscapeKey: false,
        allowOutsideClick: false,
        confirmButtonColor: "#aaa",
        confirmButtonText: "OK"
    }, (function() {}));
}

function closeErrorDialog(url) {
    // alert(url);
    swal.close();
    if (url != null && url.startsWith("/invest/myPortfolio")) {
        openPage(url);
    }
    // setTimeout("hideProgressDialog();", 500);
    // if (url) {
    // setTimeout("openPage('"+url+"')", 500);
    // }
}

function popDeletePortfolioDialog(pid, pname, backToPage) {
    swal.queue([{
        title: 'Are you sure?',
        confirmButtonText: 'Yes, delete it!',
        confirmButtonColor: "#f44336",
        showCancelButton: true,
        cancelButtonColor: "#aaa",
        allowEscapeKey: false,
        allowOutsideClick: false,
        focusConfirm: false,
        type: "question",
        footer: "You will not be able to recover this portfolio!",
        showLoaderOnConfirm: true,
        preConfirm: function() {
            return new Promise(function(resolve) {
                $.get("/act.ma?action=pDel&viewId=pHomeBlock&xd=" + pid)
                    .done((function(data) {
                        Swal.fire({
                            title: "Deleted!",
                            text: "Your portfolio has been deleted.",
                            type: "success",
                            allowEscapeKey: false,
                            allowOutsideClick: false,
                            confirmButtonText: "Refresh",
                            confirmButtonColor: "gray"
                        }).then((function() {
                            if (backToPage) {
                                document.location.href = backToPage;
                            } else {
                                window.location.reload();
                            }
                        }))
                    }))
            })
        }
    }]).catch(swal.noop);
}

function popTransactionConfirmDialog(title, bodyText, pid, symbols, act, budget, editOnlyModel) {
    Swal.fire({
        title: title,
        html: bodyText,
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#f44336",
        allowEscapeKey: false,
        allowOutsideClick: false,
        confirmButtonText: "OK"
    }).then((function() {
        if (editOnlyModel) {
            processQuickEdit(pid, symbols, act, budget);
        } else {
            processQuickImport(pid, symbols, act, budget);
        }
    }))
}

function popConfirmDialog(title, bodyText, onOkUrl) {
    $("#confirmDialog").dialog({
        bgiframe: true,
        autoOpen: false,
        modal: true,
        title: title,
        width: 'auto',
        maxWidth: 600,
        height: 'auto',
        fluid: true,
        buttons: {
            Ok: function() {
                document.location.href = onOkUrl;
            },
            Cancel: function() {
                $(this).dialog('close');
            }
        }
    });
    $('#confirmDialog').dialog('open');
    var dlg = document.getElementById("confirmDialog");
    dlg.innerHTML = "<table><tr><td valign='top'><img src='/images/bigWarn.gif'/></td><td>&nbsp;</td><td>" + bodyText + "</td></tr></table>";
}

function updatePortfolioTotal() {
    var diP = document.getElementById("pTotal");
    var diR = document.getElementById("pTotalHolder");
    if (diP && diR) {
        diR.innerHTML = "<font size='2'>Total Value</font><div>" + diP.innerHTML + "</div>";
    } else if (diR) {
        var pid = document.getElementById("pid");
        if (pid) {
            diR.innerHTML = "<div style='height:12px;'></div><a href='/?pitch=myPortfolioBacktesting&mm=portfolioHome&sm=myPortfolioBacktesting&t=8&xd=" + pid.value + "'><img src='/images/menus/bigBacktest.png' /></a>";
        } else {
            diR.innerHTML = "";
        }
    }
}
String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g, "");
}
String.prototype.ltrim = function() {
    return this.replace(/^\s+/, "");
}
String.prototype.rtrim = function() {
    return this.replace(/\s+$/, "");
}
String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.split(search).join(replacement);
}

function remvoeImageErrors() {
    // alert("remvoeImageErrors");
    $("img").error((function() {
        if (this.alt) {
            $(this).replaceWith(this.alt);
        }
    }));
}

function resolveImages() {
    remvoeImageErrors();
}

function refreshPage() {
    window.location.reload();
}

function updateMenuToolTips() {
    $('[tool-tip-toggle="menu-tip"]').tooltip({
        placement: 'top'
    });
}

function updateOngoingToolTips() {
    $('[tool-tip-toggle="ongoing-tip"]').tooltip({
        placement: 'left'
    });
}

function updateThemeToolTips() {
    $('[tool-tip-toggle="theme-tip"]').tooltip({
        placement: 'top'
    });
}
var symbols;
var currentCollelationId;
var tourButton;
var criatePortfolioType = 0;
var popUp1;
var popUp2;
var popUp3;
var popUp4;
var dayName = new Array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
var monName = new Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")

function addLoadEvent(func) {
    var oldonload = window.onload;
    if (typeof window.onload != 'function') {
        window.onload = func;
    } else {
        window.onload = function() {
            if (oldonload) {
                oldonload();
            }
            func();
        }
    }
}
document.all ? document.attachEvent('onclick', checkClick) : document.addEventListener('click', checkClick, false);

function getTodayString() {
    var now = new Date();
    return dayName[now.getDay()] + ", " + monName[now.getMonth()] + " " + now.getDate();
}

function getStyleObject(objectId) {
    // cross-browser function to get an object's style object given its id
    if (document.getElementById && document.getElementById(objectId)) {
        // W3C DOM
        return document.getElementById(objectId).style;
    } else if (document.all && document.all(objectId)) {
        // MSIE 4 DOM
        return document.all(objectId).style;
    } else if (document.layers && document.layers[objectId]) {
        // NN 4 DOM.. note: this won't find nested layers
        return document.layers[objectId];
    } else {
        return false;
    }
} // getStyleObject
function changeObjectVisibility(objectId, newVisibility) {
    // get a reference to the cross-browser style object and make sure the
    // object exists
    var styleObject = getStyleObject(objectId);
    if (styleObject) {
        styleObject.visibility = newVisibility;
        styleObject.innerHTML = "";
        return true;
    } else {
        // we couldn't find the object, so we can't change its visibility
        return false;
    }
} // changeObjectVisibility
function moveObject(objectId, newXCoordinate, newYCoordinate) {
    // get a reference to the cross-browser style object and make sure the
    // object exists
    var styleObject = getStyleObject(objectId);
    if (styleObject) {
        styleObject.left = newXCoordinate;
        styleObject.top = newYCoordinate;
        return true;
    } else {
        // we couldn't find the object, so we can't very well move it
        return false;
    }
} // moveObject
function addSymbol() {
    var symbolId = document.getElementById("symbolId");
    if (!symbolId) {
        noSymbolMessage();
        return;
    }
    var symbol = symbolId.value;
    if (!symbol) {
        noSymbolMessage();
        return;
    }
    if (symbol.indexOf("Symbol") > -1) {
        noSymbolMessage();
        return;
    }
    currentSymbol = symbol;
    // alert(currentSymbol);
    var selectedPortfolioElement = document.getElementById("selectedPortfolioId");
    var portfolioSelectionBlock = document.getElementById("portfoliosDiv");
    if (portfolioSelectionBlock && selectedPortfolioElement) {
        // alert(symbol);
        if (selectedPortfolioElement.value) {
            addToPortfolio(symbol);
        } else {
            var needsLogginEl = document.getElementById("needsLogin");
            if (needsLogginEl) {
                popErrorMessageDialog("No Portfolio Selected", "Please sign in to select one of your portfolios.", "");
            } else {
                popErrorMessageDialog("No Portfolio Selected", "Please select one of your portfolios.", "");
            }
        }
    } else if (portfolioSelectionBlock) {
        popErrorMessageDialog("No Portfolios Found", "It appears that you do not have any portfolios. Please create at least one portfolio.", "");
    } else {
        var n = document.getElementById("numberOfShares");
        var myPortfolio = false;
        var varS = document.getElementById("symbolId");
        var portId = document.getElementById("pid");
        var pid = portId.value;
        var costId = document.getElementById("spd");
        var cost = costId.value;
        var dateId = document.getElementById("pdate");
        var dat = dateId.value;
        var tradeId = document.getElementById("pta");
        var tradeType = tradeId.value;
        var modeId = document.getElementById("pViewId");
        var mode = '';
        if (modeId) {
            mode = modeId.value;
        }
        var varM = document.getElementById("PortfolioInput");
        if (!varM) {
            myPortfolio = true;
        }
        if (n) {
            // alert(myPortfolio);
            var numberOfShares = n.value;
            if (myPortfolio) {
                addMySymbolAndUpdate(symbol, numberOfShares, pid, cost, dat, tradeType, mode);
            } else {
                addSymbolAndUpdate(symbol, numberOfShares, pid, cost, dat, tradeType);
            }
        }
        // var helpDiv = document.getElementById("equityTransactionBlock");
        // helpDiv.innerHTML="<div class='symbolBoxProgress'>Processing Request
        // &nbsp;<img src='/images/progress/flatStraight.gif'
        // border='0'></div>";
    }
}

function viewTransactions(pid) {
    var postData = "/?pitch=stockHistory&xd=" + pid;
    postData = addSuggestionDataToPost(postData);
    openPage(postData);
}

function viewCalendar(pid) {
    var postData = "/?pitch=portfolioCalendar&xd=" + pid;
    postData = addSuggestionDataToPost(postData);
    openPage(postData);
}

function viewVolatility(pid) {
    var postData = "/?pitch=myPortfolioQuickVolatility&xd=" + pid;
    postData = addSuggestionDataToPost(postData);
    openPage(postData);
}

function viewDiagnostics(pid) {
    var postData = "/?pitch=myPortfolioDiagnostics&xd=" + pid;
    postData = addSuggestionDataToPost(postData);
    openPage(postData);
}

function runQuickSuggestion(pid) {
    var postData = "/?pitch=myPortfolioQuickSuggestion&xd=" + pid;
    postData = addSuggestionDataToPost(postData);
    openPage(postData);
}

function viewCorrelations(pid) {
    var postData = "/?pitch=myPortfolioQuickCorrelation&xd=" + pid;
    postData = addSuggestionDataToPost(postData);
    openPage(postData);
}

function filterPortfolios() {
    document.portfolioFilter.submit();
}

function generateMacroThemePortfolio() {
    if (hasSelectedThemes()) {
        showProgressDialog();
        updateProgressDialog("Generating portfolio. <b>Please wait!</b><br/>It may take some time.");
        setTimeout("document.tpRun.submit()", 1500)
    } else {
        popErrorMessageDialog("Theme Error", "Please specify at least one macro theme", null);
    }
}

function generateThemePortfolio() {
    if (hasSelectedThemes()) {
        var b = document.getElementById("budget").value;
        document.getElementById("budget").value = b;
        showProgressDialog();
        updateProgressDialog("Generating portfolio. <b>Please wait!</b><br/>It may take some time.");
        setTimeout("document.tpRun.submit()", 1500)
    } else {
        alert("Please specify at least one investing idea!");
        // popErrorMessageDialog("Theme Error","Please specify at least one
        // theme",null);
        return false;
    }
}

function generatePortfolioProposal() {
    var b = document.getElementById("budget").value;
    document.getElementById("budget").value = b;
    showProgressDialog();
    updateProgressDialog("Generating portfolio. <b>Please wait!</b><br/>It may take some time.");
    setTimeout("document.ppRun.submit()", 1500)
}

function optimizeAxis() {
    var b = document.getElementById("budget").value;
    // alert(b);
    document.getElementById("budget").value = b;
    showProgressDialog();
    updateProgressDialog("Optimizing Axis. <b>Please wait!</b><br/>It may take some time.");
    setTimeout("document.tpAxisRun.submit();", 3500)
}

function optimizeCrypto() {
    var b = document.getElementById("budget").value;
    // alert(b);
    document.getElementById("budget").value = b;
    showProgressDialog();
    updateProgressDialog("Optimizing Crypto Exchange. <b>Please wait!</b><br/>It may take some time.");
    setTimeout("document.tpCryptoRun.submit();", 3500)
}

function optimizeThemePortfolio() {
    var b = document.getElementById("budget").value;
    document.getElementById("budget").value = b;
    showProgressDialog();
    updateProgressDialog("Optimizing theme. <b>Please wait!</b><br/>It may take some time.");
    setTimeout("document.tpRun.submit();", 3500)
}

function addPortfolioSimple() {
    addPortfolio();
}

function addPortfolio() {
    if ($("#pnd").val() == "") {
        popErrorMessageDialog("Portfolio Error", "Please specify name of your portfolio", null);
    }
    document.fAdd.submit();
}

function addPartnerPortfolio() {
    document.fAdd.submit();
}

function deletePortfolio(id, undo, backToPage) {
    deletePortfolioAndUpdate(id, undo, backToPage);
}

function deleteTransaction(id, pid, undo) {
    deleteTransactionAndUpdate(id, pid, undo);
}

function createNickName() {
    var name = document.getElementById("nickName").value;
    var helpDiv = document.getElementById("nick");
    helpDiv.innerHTML = "<div class='symbolBoxProgress'><b>processing...</b> &nbsp;<img src='/images/progress/flatStraight.gif' align='baseline' border='0'></div>";
    submitNickName(name);
}

function clearModelText() {
    var area = document.getElementById("modelPortfolio");
    var but = document.getElementById("modelPopUpButton");
    area.value = "";
    but.style.background = "#dddddd";
    var check = document.getElementById("modelPortfolioCheck");
    check.checked = "";
}

function addToModelText(a, b) {
    var area = document.getElementById("modelPortfolio");
    if (!validateSuggestionInput(a)) {
        return;
    }
    var existing = area.value.trim();
    if (existing.length > 0) {
        area.value = existing + "," + a;
    } else {
        area.value = existing + a;
    }
    var check = document.getElementById("modelPortfolioCheck");
    check.checked = "checked";
    $('#modelDialog').dialog('close');
}

function removeSymbol(symbol, name) {
    var pElementid = document.getElementById("pid");
    // alert(pElementid.value);
    var pid = "";
    if (pElementid != null) {
        pid = pElementid.value;
    }
    var g = document.getElementById("myPortfolioBuilderInput");
    var postData = "";
    var goToPage = "/invest/myPortfolio?xd=" + pid;
    // portfolio builder
    if (g) {
        postData = "/act.ma?action=remove&s=" + symbol + "&xd=" + pid + "&xm=" + 3;
        goToPage = "/invest/myPortfolioBuilder?xd=" + pid;
    } else {
        var blok = document.getElementById('PortfolioInput');
        var isMyPortfolio = false;
        if (!blok) {
            isMyPortfolio = true;
        }
        if (!isMyPortfolio) {
            postData = "/act.ma?action=remove&ptm=t&s=" + symbol + "&xd=" + pid;
        } else {
            postData = "/act.ma?action=remove&s=" + symbol + "&xd=" + pid + "&xm=" + 0;
        }
    }
    swal.queue([{
        title: 'Are you sure?',
        confirmButtonText: 'Yes, delete it!',
        confirmButtonColor: "#f44336",
        showCancelButton: true,
        showConfirmButton: true,
        allowEscapeKey: false,
        allowOutsideClick: false,
        focusConfirm: false,
        cancelButtonColor: "#aaa",
        type: "question",
        footer: "This will permanently remove (" + symbol + ") position",
        showLoaderOnConfirm: true,
        preConfirm: function() {
            return new Promise(function(resolve) {
                $.get(postData)
                    .done((function(data) {
                        Swal.fire({
                            title: "Deleted!",
                            footer: "Your position has been removed",
                            type: "success",
                            allowEscapeKey: false,
                            allowOutsideClick: false,
                            cancelButtonText: "Continue Editing",
                            showCancelButton: true,
                            confirmButtonText: "View Portfolio",
                            confirmButtonColor: "red"
                        }).then((result) => {
                            goToPortfolioManager(result.value);
                        })
                    }))
            })
        }
    }]).catch(swal.noop);
}

function quickBuySymbol(symbol, name) {
    var pElementid = document.getElementById("pid");
    // alert(pElementid.value);
    var pid = "";
    if (pElementid != null) {
        pid = pElementid.value;
    }
    var titles = "Buy more of " + name + "";
    Swal.fire({
        title: titles,
        type: 'question',
        input: 'number',
        inputAttributes: {
            autocapitalize: 'off'
        },
        showCancelButton: true,
        confirmButtonText: 'Sumbit',
        showLoaderOnConfirm: true,
        inputAttributes: {
            min: 0,
            step: 1
        },
        onBeforeOpen: () => {
            swal.getInput().onkeypress = (event) => {
                return Number.isInteger(parseInt(event.key))
            }
        },
        footer: 'Specify number of shares to buy',
        allowOutsideClick: () => !Swal.isLoading()
    }).then((result) => {
        if (result.value) {
            return addMySymbolAndUpdate(symbol, result.value, pid, -1, null, "BUY");
        }
    })
}

function quickSellSymbol(symbol, name) {
    var pElementid = document.getElementById("pid");
    // alert(pElementid.value);
    var pid = "";
    if (pElementid != null) {
        pid = pElementid.value;
    }
    var titles = "Sell some of your " + name + " shares";
    Swal.fire({
        title: titles,
        type: 'question',
        input: 'number',
        inputAttributes: {
            autocapitalize: 'off'
        },
        showCancelButton: true,
        confirmButtonText: 'Sumbit',
        inputAttributes: {
            min: 0,
            step: 1
        },
        onBeforeOpen: () => {
            swal.getInput().onkeypress = (event) => {
                return Number.isInteger(parseInt(event.key))
            }
        },
        showLoaderOnConfirm: true,
        footer: 'Specify number of shares to sell',
        allowOutsideClick: () => !Swal.isLoading()
    }).then((result) => {
        if (result.value) {
            return addMySymbolAndUpdate(symbol, result.value, pid, -1, null, "SELL");
        }
    })
}

function quickEditSymbol(symbol, name) {
    var pElementid = document.getElementById("pid");
    // alert(pElementid.value);
    var pid = "";
    if (pElementid != null) {
        pid = pElementid.value;
    }
    var titles = "Edit your " + name + " position";
    Swal.fire({
        title: titles,
        type: 'question',
        input: 'number',
        inputAttributes: {
            autocapitalize: 'off'
        },
        showCancelButton: true,
        confirmButtonText: 'Sumbit',
        showLoaderOnConfirm: true,
        footer: 'Specify number of shares',
        inputAttributes: {
            min: 0,
            step: 1
        },
        onBeforeOpen: () => {
            swal.getInput().onkeypress = (event) => {
                return Number.isInteger(parseInt(event.key))
            }
        },
        allowOutsideClick: () => !Swal.isLoading()
    }).then((result) => {
        if (result.value) {
            return addMySymbolAndUpdate(symbol, result.value, pid, -1, null, "EDIT");
        }
    })
}

function quickWithdraw() {
    var pElementid = document.getElementById("pid");
    // alert(pElementid.value);
    var pid = "";
    if (pElementid != null) {
        pid = pElementid.value;
    }
    var titles = "Withdraw some cash";
    Swal.fire({
        title: titles,
        input: 'number',
        inputAttributes: {
            autocapitalize: 'off'
        },
        inputAttributes: {
            min: 0,
            step: 1
        },
        onBeforeOpen: () => {
            swal.getInput().onkeypress = (event) => {
                return Number.isInteger(parseInt(event.key))
            }
        },
        showCancelButton: true,
        confirmButtonText: 'Sumbit',
        showLoaderOnConfirm: true,
        footer: 'Specify cash amount to withdraw',
        allowOutsideClick: () => !Swal.isLoading()
    }).then((result) => {
        if (result.value) {
            return addMySymbolAndUpdate("$CASH", result.value, pid, -1, null, "SELL");
        }
    })
}

function quickDeposit() {
    var pElementid = document.getElementById("pid");
    // alert(pElementid.value);
    var pid = "";
    if (pElementid != null) {
        pid = pElementid.value;
    }
    var titles = "Deposit more cash";
    Swal.fire({
        title: titles,
        input: 'number',
        inputAttributes: {
            autocapitalize: 'off'
        },
        inputAttributes: {
            min: 0,
            step: 1
        },
        onBeforeOpen: () => {
            swal.getInput().onkeypress = (event) => {
                return Number.isInteger(parseInt(event.key))
            }
        },
        showCancelButton: true,
        confirmButtonText: 'Sumbit',
        showLoaderOnConfirm: true,
        footer: 'Specify cash amount to deposit',
        allowOutsideClick: () => !Swal.isLoading()
    }).then((result) => {
        if (result.value) {
            return addMySymbolAndUpdate("$CASH", result.value, pid, -1, null, "BUY");
        }
    })
}

function removeAllSymbols() {
    removeAllSymbolsAndUpdate();
}

function as(symbol) {
    var symbolsVar = document.getElementById("symbols");
    symbolsVar.value = symbol + "\r\n" + symbolsVar.value;
}

function toggleAnalyticsHelp() {
    toggleBlock("analyticsHelp");
}

function toggleContentBlock(t) {
    if (tourButton) {
        tourButton.className = "goButton";
    } else {
        buttonVar = document.getElementById("35");
        buttonVar.className = "goButton";
    }
    // alert(tourButton);
    tourButton = document.getElementById(t);
    // alert(tourButton);
    if (tourButton) {
        tourButton.className = "goButtonSelected";
    }
    var helpBlock = document.getElementById("contextCode");
    var textBlock = document.getElementById("contextCodeText");
    if (!helpBlock) {
        return;
    }
    var helpStyle = helpBlock.style;
    helpStyle.display = "block";
    helpStyle.visibility = "visible";
    textBlock.value = "<script src=\"http://www.macroaxis.com/widgets/url.jsp?t=" + t + "\"></script>";
    var previewButton = document.getElementById("previewButton");
    var previewImg = document.getElementById("previewImg");
    var urlPop = "http://blog.macroaxis.com/marketweet/?x=" + t;
    previewImg.src = "/images/widgets/catalog/" + t + ".gif";
    previewButton.innerHTML = "<div class='glossyButton'><a href='" + urlPop + "' target='_blank' title='Financial Content Preview'>Preview</a></div>";
}

function toggleContentSample(t) {
    if (tourButton) {
        // tourButton.className="goButton";
    } else {
        buttonVar = document.getElementById("35");
        // buttonVar.className="goButton";
    }
    // alert(tourButton);
    // tourButton = document.getElementById(t);
    // alert(tourButton);
    // if (tourButton) {
    // tourButton.className="goButtonSelected";
    // }
    var previewWindow = document.getElementById("financialContentSample");
    var cUrl = "/financialContentSampleInclude.jsp?t=" + t;
    // alert(cUrl);
    updater = new RemoteUpdater(cUrl, 'POST', "financialContentSample", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function toggleBlock(blockId) {
    var helpBlock = document.getElementById(blockId);
    if (!helpBlock) {
        return;
    }
    var helpStyle = helpBlock.style;
    if (helpStyle.display == "block") {
        helpStyle.display = "none";
        helpStyle.visibility = "hidden";
    } else {
        helpStyle.display = "block";
        helpStyle.visibility = "visible";
    }
}

function toggleMarketImage() {
    // var imageToggle = document.getElementById("toggleMarket");
    // if (!imageToggle) {
    // return;
    // }
    // var marketTreeDiv = document.getElementById('marketTree');
    // if (marketTreeDiv) {
    // var marketTreeStyle = document.getElementById('marketTree').style;
    // if (marketTreeStyle.display == "block") {
    // imageToggle.src="/images/showMarket.gif";
    //
    // } else {
    // imageToggle.src="/images/hideMarket.gif";
    // }
    // }
}
// store variables to control where the popup will appear relative to the cursor
// position
// positive numbers are below and to the right of the cursor, negative numbers
// are above and to the left
// var xOffset = -185;
// var yOffset = -1;
var marketTree;
var lastRequestTime;
var dataSize = -1;
var resultsDiv;

function searchMarketPoUp() {
    var marketSearchInput = document.getElementById('searchMarket');
    var str = marketSearchInput.value;
    if (!str || str == "") {
        str = "a";
    }
    requestTime = new Date().getMilliseconds();
    lastRequestTime = requestTime;
    resultsDiv = document.getElementById("searchBoxResult");
    setTimeout("addResultsDiv('" + str + "')", 500)
}

function searchMarketPoUpMain() {
    var marketSearchInput = document.getElementById('searchMarketMain');
    var str = marketSearchInput.value;
    if (!str || str == "") {
        str = "a";
    }
    requestTime = new Date().getMilliseconds();
    lastRequestTime = requestTime;
    resultsDiv = document.getElementById("searchBoxResultMain");
    setTimeout("addResultsDivMain('" + str + "')", 500)
}

function searchIndustryPoUp() {
    var marketSearchInput = document.getElementById('searchMarket');
    var str = marketSearchInput.value;
    if (!str || str == "") {
        str = "a";
    }
    requestTime = new Date().getMilliseconds();
    lastRequestTime = requestTime;
    resultsDiv = document.getElementById("searchBoxResult");
    setTimeout("addResultsDiv('industry_" + str + "')", 500);
}

function searchEtfPoUpMain() {
    var marketSearchInput = document.getElementById('searchEtf');
    var str = marketSearchInput.value;
    if (!str || str == "") {
        str = "a";
    }
    requestTime = new Date().getMilliseconds();
    lastRequestTime = requestTime;
    resultsDiv = document.getElementById("searchBoxResultMain");
    // alert(resultsDiv);
    setTimeout("addResultsDivMain('etf_" + str + "')", 500)
}

function searchFundPoUp() {
    var marketSearchInput = document.getElementById('searchFund');
    var str = marketSearchInput.value;
    if (!str || str == "") {
        str = "a";
    }
    requestTime = new Date().getMilliseconds();
    lastRequestTime = requestTime;
    resultsDiv = document.getElementById("searchBoxResult");
    setTimeout("addResultsDiv('fund_" + str + "')", 500)
}

function searchEtfPoUp() {
    var marketSearchInput = document.getElementById('searchEtf');
    var str = marketSearchInput.value;
    if (!str || str == "") {
        str = "a";
    }
    requestTime = new Date().getMilliseconds();
    lastRequestTime = requestTime;
    resultsDiv = document.getElementById("searchBoxResult");
    setTimeout("addResultsDiv('etf_" + str + "')", 500)
}

function addMarketResultDiv(str) {
    var marketSearchInput = document.getElementById('searchMarket');
    setTimeout("addResultsDiv('" + str + "')", 500)
}

function searchPopUpCustomFilter(screen) {
    var str = "_advanced";
    requestTime = new Date().getMilliseconds();
    lastRequestTime = requestTime;
    resultsDiv = document.getElementById("searchBoxResult");
    if (screen == "sms") {
        setTimeout("addFundamentalsResultDiv('" + str + "')", 500);
    } else if (screen == "sps") {
        setTimeout("addResultsDiv('" + str + "')", 500);
    } else if (screen == "spv") {
        setTimeout("addVolatilityResultsDiv('" + str + "')", 500);
    } else if (screen == "spp") {
        setTimeout("addPlotterResultsDiv('" + str + "')", 500);
    } else if (screen == "spc") {
        setTimeout("addCompareResultsDiv('" + str + "')", 500);
    }
}

function searchPopUpStandardFilter(screen) {
    var str = "_standard";
    requestTime = new Date().getMilliseconds();
    lastRequestTime = requestTime;
    resultsDiv = document.getElementById("searchBoxResult");
    if (screen == "sms") {
        setTimeout("addFundamentalsResultDiv('" + str + "')", 500);
    } else if (screen == "sps") {
        setTimeout("addResultsDiv('" + str + "')", 500);
    } else if (screen == "spv") {
        setTimeout("addVolatilityResultsDiv('" + str + "')", 500);
    } else if (screen == "spp") {
        setTimeout("addPlotterResultsDiv('" + str + "')", 500);
    } else if (screen == "spc") {
        setTimeout("addCompareResultsDiv('" + str + "')", 500);
    }
}

function runStandardFilter(screen, filter) {
    requestTime = new Date().getMilliseconds();
    lastRequestTime = requestTime;
    resultsDiv = document.getElementById("searchBoxResult");
    // alert(screen+" "+filter);
    if (screen == "sms") {
        setTimeout("addFundamentalsResultDiv('" + filter + "')", 500);
    } else if (screen == "sps") {
        setTimeout("addResultsDiv('" + filter + "')", 500);
    } else if (screen == "spv") {
        setTimeout("addVolatilityResultsDiv('" + filter + "')", 500);
    } else if (screen == "spp") {
        setTimeout("addPlotterResultsDiv('" + filter + "')", 500);
    } else if (screen == "spc") {
        setTimeout("addCompareResultsDiv('" + filter + "')", 500);
    }
}

function runCustomFilter(screen) {
    setTimeout("updateCustomFilterSearchFromForm('fundamentalsSymbolLookUp.jsp')", 500);
}

function runUserPicksFilter(screen) {
    setTimeout("updateUserPicksFilterFromForm('/userPicksSymbolLookUp.jsp')", 500);
}

function searchFundamentalsPoUp() {
    var marketSearchInput = document.getElementById('searchMarket');
    var str = marketSearchInput.value;
    if (!str || str == "") {
        str = "_advanced";
    }
    requestTime = new Date().getMilliseconds();
    lastRequestTime = requestTime;
    resultsDiv = document.getElementById("searchBoxResult");
    setTimeout("addFundamentalsResultDiv('" + str + "')", 500);
}

function searchComparePopUp() {
    var marketSearchInput = document.getElementById('searchMarket');
    var str = marketSearchInput.value;
    if (!str || str == "") {
        str = "a";
    }
    requestTime = new Date().getMilliseconds();
    lastRequestTime = requestTime;
    resultsDiv = document.getElementById("searchBoxResult");
    setTimeout("addCompareResultsDiv('" + str + "')", 500);
}

function searchPlotterPopUp() {
    var marketSearchInput = document.getElementById('searchMarket');
    var str = marketSearchInput.value;
    if (!str || str == "") {
        str = "a";
    }
    requestTime = new Date().getMilliseconds();
    lastRequestTime = requestTime;
    resultsDiv = document.getElementById("searchBoxResult");
    setTimeout("addPlotterResultsDiv('" + str + "')", 500);
}

function addPlotterResultsDiv(str) {
    updatePlotterSymbolLookUp(str);
    resultsDiv.style.visibility = "visible";
}

function searchVolatilityPopUp() {
    var marketSearchInput = document.getElementById('searchMarket');
    var str = marketSearchInput.value;
    if (!str || str == "") {
        str = "a";
    }
    requestTime = new Date().getMilliseconds();
    lastRequestTime = requestTime;
    resultsDiv = document.getElementById("searchBoxResult");
    setTimeout("addVolatilityResultsDiv('" + str + "')", 500);
}

function addVolatilityResultsDiv(str) {
    updateVolatilitySymbolLookUp(str);
    resultsDiv.style.visibility = "visible";
}

function addCompareResultsDiv(str) {
    updateCompareSymbolLookUp(str);
    resultsDiv.style.visibility = "visible";
}

function addFundamentalsResultDiv(str) {
    updateFundamentalsSymbolLookUp(str);
    resultsDiv.style.visibility = "visible";
}

function addResultsDivMain(str) {
    updateSearchLookUpMain(str);
    resultsDiv.style.visibility = "visible";
}

function addResultsDiv(str) {
    updateSearchLookUp(str);
    resultsDiv.style.visibility = "visible";
}

function showHelp(helpStr) {
    var helpDiv = document.getElementById("symbolUpdate");
    helpDiv.style.visibility = "visible";
    var helpHiddenDiv = document.getElementById("modelNote");
    str = helpHiddenDiv.innerHTML;
    helpDiv.innerHTML = str;
}

function isMarketVisible() {
    // var marketTreeDiv = document.getElementById('marketTree');
    // if (marketTreeDiv) {
    // var marketTreeStyle = document.getElementById('marketTree').style;
    //
    // if (marketTreeStyle.display == "block") {
    // return true;
    // } else {
    // return false;
    // }
    // }
    //	
    return false;
}

function toggleMarketTree() {
    // var marketTreeDiv = document.getElementById('marketTree');
    //	
    // if (marketTreeDiv) {
    // removeResultsDiv();
    // var marketTreeStyle = document.getElementById('marketTree').style;
    //
    // if (marketTreeStyle.display == "block") {
    // marketTreeStyle.display = "none";
    // toggleSymbolPopUp(0);
    // showHelp("ads");
    //			
    //			
    // } else {
    //			
    //			
    // var marketTree = new Zapatec.Tree('sybmolTree', { dynamic: true });
    // marketTreeStyle.display = "block";
    // }
    // }
}

function showPopup(targetObjectId, eventObj) {
    // alert("asdf");
    if (eventObj) {
        // hide any currently-visible popups
        hideCurrentPopup();
        // stop event from bubbling up any farther
        eventObj.cancelBubble = true;
        // move popup div to current cursor position
        // (add scrollTop to account for scrolling for IE)
        // var newXCoordinate = (eventObj.pageX)?eventObj.pageX + xOffset:eventObj.x
        // + xOffset + ((document.body.scrollLeft)?document.body.scrollLeft:0);
        myXOffset = eventObj.x - eventObj.offsetX;
        myYOffset = eventObj.y - eventObj.offsetY;
        // window.status= eventObj.y + "-" + eventObj.offsetY + " scroll:" +
        // document.body.scrollTop;
        var scrollOffset = ((document.body.scrollTop) ? document.body.scrollTop : 0);
        var newXCoordinate = myXOffset + 19;
        var newYCoordinate = myYOffset + scrollOffset - 6;
        // var newYCoordinate = (eventObj.pageY)?myYOffset:myYOffset +
        // ((document.body.scrollTop)?document.body.scrollTop:0);
        // var newYCoordinate =
        // eventObj.srcElement.offsetParent.offsetParent.offsetTop + yOffset +
        // ((document.body.scrollTop)?document.body.scrollTop:0);
        moveObject(targetObjectId, newXCoordinate, (newYCoordinate - 2));
        // and make it visible
        if (changeObjectVisibility(targetObjectId, 'visible')) {
            // if we successfully showed the popup
            // store its Id on a globally-accessible object
            window.currentlyVisiblePopup = targetObjectId;
            return true;
        } else {
            // we couldn't show the popup, boo hoo!
            return false;
        }
    } else {
        // there was no event object, so we won't be able to position anything, so
        // give up
        return false;
    }
} // showPopup
function removeSymbols() {
    alert("removed");
} // showPopup
function showPopup2(targetObjectId, eventObj) {
    if (eventObj) {
        // hide any currently-visible popups
        hideCurrentPopup();
        // stop event from bubbling up any farther
        eventObj.cancelBubble = true;
        // move popup div to current cursor position
        // (add scrollTop to account for scrolling for IE)
        // var newXCoordinate = (eventObj.pageX)?eventObj.pageX + xOffset:eventObj.x
        // + xOffset + ((document.body.scrollLeft)?document.body.scrollLeft:0);
        myXOffset = eventObj.clientX + ((document.body.scrollLeft) ? document.body.scrollLeft : 0);
        myYOffset = eventObj.clientY;
        // window.status= eventObj.y + "-" + eventObj.offsetY + " scroll:" +
        // document.body.scrollTop;
        var scrollOffset = ((document.body.scrollTop) ? document.body.scrollTop : 0);
        var newXCoordinate = myXOffset + 19;
        var newYCoordinate = myYOffset + scrollOffset - 6;
        // var newYCoordinate = (eventObj.pageY)?myYOffset:myYOffset +
        // ((document.body.scrollTop)?document.body.scrollTop:0);
        // var newYCoordinate =
        // eventObj.srcElement.offsetParent.offsetParent.offsetTop + yOffset +
        // ((document.body.scrollTop)?document.body.scrollTop:0);
        moveObject(targetObjectId, newXCoordinate, (newYCoordinate - 2));
        // and make it visible
        if (changeObjectVisibility(targetObjectId, 'visible')) {
            // if we successfully showed the popup
            // store its Id on a globally-accessible object
            window.currentlyVisiblePopup = targetObjectId;
            return true;
        } else {
            // we couldn't show the popup, boo hoo!
            return false;
        }
    } else {
        // there was no event object, so we won't be able to position anything, so
        // give up
        return false;
    }
} // showPopup
function showPopupLeft(targetObjectId, eventObj) {
    if (eventObj) {
        // hide any currently-visible popups
        hideCurrentPopup();
        // stop event from bubbling up any farther
        eventObj.cancelBubble = true;
        // move popup div to current cursor position
        // (add scrollTop to account for scrolling for IE)
        // var newXCoordinate = (eventObj.pageX)?eventObj.pageX + xOffset:eventObj.x
        // + xOffset + ((document.body.scrollLeft)?document.body.scrollLeft:0);
        myXOffset = eventObj.clientX + ((document.body.scrollLeft) ? document.body.scrollLeft : 0);
        myYOffset = eventObj.clientY;
        // window.status= eventObj.y + "-" + eventObj.offsetY + " scroll:" +
        // document.body.scrollTop;
        var scrollOffset = ((document.body.scrollTop) ? document.body.scrollTop : 0);
        var newXCoordinate = myXOffset - 215;
        var newYCoordinate = myYOffset + scrollOffset - 6;
        // var newYCoordinate = (eventObj.pageY)?myYOffset:myYOffset +
        // ((document.body.scrollTop)?document.body.scrollTop:0);
        // var newYCoordinate =
        // eventObj.srcElement.offsetParent.offsetParent.offsetTop + yOffset +
        // ((document.body.scrollTop)?document.body.scrollTop:0);
        moveObject(targetObjectId, newXCoordinate, (newYCoordinate - 2));
        // and make it visible
        if (changeObjectVisibility(targetObjectId, 'visible')) {
            // if we successfully showed the popup
            // store its Id on a globally-accessible object
            window.currentlyVisiblePopup = targetObjectId;
            return true;
        } else {
            // we couldn't show the popup, boo hoo!
            return false;
        }
    } else {
        // there was no event object, so we won't be able to position anything, so
        // give up
        return false;
    }
} // showPopup
function showPopupIE(targetObjectId, eventObj) {
    if (document.getElementById || document.all) // IE 4+ or NN 6+
        return showPopup(targetObjectId, eventObj)
    return false;
}

function hideCurrentPopup() {
    // note: we've stored the currently-visible popup on the global object
    // window.currentlyVisiblePopup
    if (window.currentlyVisiblePopup) {
        changeObjectVisibility(window.currentlyVisiblePopup, 'hidden');
        window.currentlyVisiblePopup = false;
    }
} // hideCurrentPopup
function filterClicked(rowId) {
    var check = document.getElementById(rowId + "Check");
    var name = document.getElementById(rowId + "Name");
    var max = document.getElementById(rowId + "max");
    var min = document.getElementById(rowId + "min");
    if (check.checked) {
        name.style.color = "#8b9dc3";
        max.style.border = "1px solid #8b9dc3";
        min.style.border = "1px solid #8b9dc3";
        max.style.background = "#fff";
        min.style.background = "#fff";
        max.disabled = false;
        min.disabled = false;
    } else {
        name.style.color = "#35586C";
        max.style.border = "1px solid #ccc";
        min.style.border = "1px solid #ccc";
        max.style.background = "#F2F7FB";
        min.style.background = "#F2F7FB";
        min.value = "";
        max.value = "";
        max.disabled = true;
        min.disabled = true;
    }
}

function explorerMacResizeFix() {
    location.reload(false);
}

function testIt() {
    alert("test");
}

function clickThumb(url) {
    if (url == "createPortfolio") {
        clickAddNewPortfolio();
        return;
    }
    // alert(url);
    if (!popping_up) {
        openPage(url);
    } else {}
}

function hoverHomeThumb(thumbDiv, on, nameid, textid) {}

function hoverModelThumb(thumbDiv, on, nameid, textid) {
    var delBlock = document.getElementById(nameid + "_del");
    var portfolio = document.getElementById(nameid + "Portfolio");
    var img = document.getElementById(nameid + "Img");
    // hoverModelThumb
    var nameDiv = $(nameid);
    var textDiv = $(textid);
    if (on) {
        if (delBlock != null) {
            delBlock.style.visibility = "visible";
        }
        if (portfolio != null) {
            portfolio.style.opacity = "0.9";
            portfolio.style.filter = "alpha(opacity=90)";
        }
        if (img != null) {
            img.style.opacity = "0.9";
            img.style.filter = "alpha(opacity=90)";
        }
        // thumbDiv.style.border = "1px solid #aaaaaa";
        $(thumbDiv).stop().animate({
            opacity: 0.7
        }, "slow");
    } else {
        if (delBlock != null) {
            delBlock.style.visibility = "hidden";
        }
        if (portfolio != null) {
            portfolio.style.opacity = "0.2";
            portfolio.style.filter = "alpha(opacity=20)";
        }
        if (img != null) {
            img.style.opacity = "0.2";
            img.style.filter = "alpha(opacity=20)";
        }
        // thumbDiv.style.border = "1px solid #dddddd";
        $(thumbDiv).stop().animate({
            opacity: 1.0
        }, "slow");
    }
}

function hoverHomePageThumb(thumbDiv, on) {
    if (on) {
        thumbDiv.style.border = "5px solid #cccccc";
        $(thumbDiv).stop().animate({
            opacity: 0.7
        }, "slow");
    } else {
        thumbDiv.style.border = "5px solid transparent";
        $(thumbDiv).stop().animate({
            opacity: 1.0
        }, "slow");
    }
}

function showSymbolThemeButton(symbol) {
    var themeBotton = "themeButton_" + symbol;
    var themeBottonVar = document.getElementById(themeBotton);
    themeBottonVar.style.display = "block";
    themeBottonVar.style.visibility = "visible";
}

function hideSymbolThemeButton(symbol) {
    var themeBotton = "themeButton_" + symbol;
    var themeBottonVar = document.getElementById(themeBotton);
    themeBottonVar.style.display = "none";
    themeBottonVar.style.visibility = "hidden";
}

function hoverSymbolThemeButton(thumbDiv, symbol, on) {
    if (on) {
        if (thumbDiv.className == "symbolThemeWrapper") {
            thumbDiv.className = "symbolThemeWrapperHovered";
            $(thumbDiv).stop().animate({
                opacity: 0.7
            }, "slow");
            showSymbolThemeButton(name);
        }
    } else {
        if (thumbDiv.className == "symbolThemeWrapperHovered") {
            thumbDiv.className = "symbolThemeWrapper";
            $(thumbDiv).stop().animate({
                opacity: 1.0
            }, "slow");
            hideSymbolThemeButton(name);
        }
    }
}

function hideThemeButton(name) {
    var themeBotton = "themeButton_" + name;
    var themeBottonVar = document.getElementById(themeBotton);
    $(themeBottonVar).stop().fadeOut(1000);
    // themeBottonVar.style.display="none";
    // themeBottonVar.style.visibility="hidden";
}

function showThemeButton(name) {
    var themeBotton = "themeButton_" + name;
    var themeBottonVar = document.getElementById(themeBotton);
    $(themeBottonVar).stop().fadeIn(1000);
    // themeBottonVar.style.display="block";
    // themeBottonVar.style.visibility="visible";
}

function hoverThemeThumb(thumbDiv, name, on) {
    if (on) {
        if (thumbDiv.className == "portfolioThemeWrapper") {
            thumbDiv.className = "portfolioThemeWrapperHovered";
            // $(thumbDiv).toggleClass('portfolioThemeWrapper','portfolioThemeWrapperHovered');
            // $( thumbDiv ).fadeIn();
            // $( thumbDiv ).fadeIn();
            showThemeButton(name);
        }
    } else {
        if (thumbDiv.className == "portfolioThemeWrapperHovered") {
            // $( thumbDiv ).slideUp();
            thumbDiv.className = "portfolioThemeWrapper";
            // $( thumbDiv ).fadeIn();
            hideThemeButton(name);
        }
    }
}

function hoverSymbolBrowserThemeThumb(thumbDiv, symbol, on) {
    if (on) {
        if (thumbDiv.className == "symbolBrowserThemeWrapper") {
            thumbDiv.className = "symbolBrowserThemeWrapperHovered";
            $(thumbDiv).stop().animate({
                opacity: 0.7
            }, "slow");
            showSymbolThemeButton(symbol);
        }
    } else {
        if (thumbDiv.className == "symbolBrowserThemeWrapperHovered") {
            thumbDiv.className = "symbolBrowserThemeWrapper";
            $(thumbDiv).stop().animate({
                opacity: 1.0
            }, "slow");
            hideSymbolThemeButton(symbol);
        }
    }
}

function hoverBrowserThemeThumb(thumbDiv, name, on) {
    if (on) {
        if (thumbDiv.className == "portfolioBrowserThemeWrapper") {
            thumbDiv.className = "portfolioBrowserThemeWrapperHovered";
            showThemeButton(name);
        }
    } else {
        if (thumbDiv.className == "portfolioBrowserThemeWrapperHovered") {
            thumbDiv.className = "portfolioBrowserThemeWrapper";
            hideThemeButton(name);
        }
    }
}

function hoverActionIcon(div, on, nameid) {
    // alert(nameid);
    var img = document.getElementById(nameid + "Img");
    // alert(img);
    if (on) {
        img.style.opacity = "1";
        img.style.filter = "alpha(opacity=100)";
        $(div).stop().animate({
            opacity: 0.3
        }, "slow");
    } else {
        if (img != null) {
            img.style.opacity = "0.3";
            img.style.filter = "alpha(opacity=30)";
        }
        $(div).stop().animate({
            opacity: 1
        }, "slow");
    }
}

function hoverStatTitle(table, on) {
    if (!on) {
        table.style.border = "1px solid #aaaaaa";
    } else {
        table.style.border = "1px solid #8b9dc3";
    }
}

function toggleStatBody(table, statId) {
    // printToStatusBar(statId);
    var bod = document.getElementById(statId);
    var img = document.getElementById(statId + "Image");
    // printToStatusBar(bod);
    if (bod) {
        printToStatusBar(bod + " " + statId);
        if (bod.style.display == "none") {
            bod.style.display = "block";
            img.src = "/images/menuPop.gif";
            img.border = "0";
        } else {
            bod.style.display = "none";
            img.src = "/images/menuPopRight.gif";
            img.border = "0";
        }
    }
}

function toggleSymbolPopUp(iState, ev) // 1 visible, 0 hidden
{
    if (ev) {
        checkClick(ev)
    }
    if (document.layers) // NN4+
    {
        document.layers["symbolPopUpElement"].visibility = iState ? "show" : "hide";
    } else if (document.getElementById) // gecko(NN6) + IE 5+
    {
        var obj = document.getElementById("symbolPopUpElement");
        obj.style.visibility = iState ? "visible" : "hidden";
    } else if (document.all) // IE 4
    {
        document.all["symbolPopUpElement"].style.visibility = iState ? "visible" : "hidden";
    }
}

function togglePortfolioSymbolPopUp(symbol, iState) // 1 visible, 0 hidden
{
    updatePortfolioSymbolLookUp(symbol);
    toggleSymbolPopUp(iState);
}

function sps(symbol) // 1 visible, 0 hidden
{
    updatePortfolioSymbolLookUp(symbol);
    toggleSymbolPopUp(1);
}

function spc(symbol) // 1 visible, 0 hidden
{
    compareSymbol(symbol);
}

function spp(symbol) // 1 visible, 0 hidden
{
    plotSymbol(symbol);
}

function spf(symbol) // 1 visible, 0 hidden
{
    updateProfileGraph(symbol);
    toggleSymbolPopUp(1);
}

function qpf(symbol) // 1 visible, 0 hidden
{
    updateFundumentalsGraph(symbol);
    toggleSymbolPopUp(1);
}

function spn(symbol) // 1 visible, 0 hidden
{
    updateNewsGraph(symbol);
    toggleSymbolPopUp(1);
}

function spv(symbol) // 1 visible, 0 hidden
{
    updateVolatilityGraph(symbol);
    toggleSymbolPopUp(1);
}

function compareSymbol(symbol) // 1 visible, 0 hidden
{
    // setTimeout("updateCompareGraph('"+symbol+"')",500)
    updateCompareGraph(symbol);
    toggleSymbolPopUp(1);
}

function plotSymbol(symbol) // 1 visible, 0 hidden
{
    // setTimeout("updatePlotGraph('"+symbol+"')",500)
    updatePlotterGraph(symbol);
    toggleSymbolPopUp(1);
}

function toggleMarketSymbolPopUp(symbol, iState) // 1 visible, 0 hidden
{
    updateMarketSymbolLookUp(symbol);
    toggleSymbolPopUp(iState);
}

function sms(symbol) // 1 visible, 0 hidden
{
    o(symbol);
}

function x(symbol) // 1 visible, 0 hidden
{
    o(symbol);
}

function o(symbol) // 1 visible, 0 hidden
{
    // alert(symbol);
    startGraphView(symbol, "spf");
    if (!isMarketVisible()) {
        toggleMarketTree();
    }
    removePopUpPanel();
}

function ems(symbol) // 1 visible, 0 hidden
{
    return o(symbol);
}

function freeModelImageToggle(id) {
    var obj = document.getElementById(id);
    var cont = document.getElementById('modelStartInfo');
    cont.innerHTML = obj.innerHTML;
    // var objItem = document.getElementById(id+"Item");
    // objItem.style.color="#8b9dc3";
}

function ipf(symbol, isMain, event) // 1 visible, 0 hidden
{
    updateIndustryGraph(symbol, isMain);
    toggleSymbolPopUp(1, event);
}

function f(symbol) // 1 visible, 0 hidden
{
    updateFundBox(symbol);
}

function s(symbol) // 1 visible, 0 hidden
{
    updateSymbolBox(symbol);
}

function freeModelImageDefault(id) {
    var obj = document.getElementById("modelStartHiddenInfo");
    var cont = document.getElementById('modelStartInfo');
    cont.innerHTML = obj.innerHTML;
    // var objItem = document.getElementById(id+"Item");
    // objItem.style.color="#0099CC";
}

function hoverOptimizationButton(img, evt, on) {
    if (on) {
        img.src = "/images/portfolioOptimizerButton_s.gif";
        // showInputHelp(evt, img, "Optimize Portfolio Now", "Click this button
        // to build and optimize your portfolio");
    } else {
        // hideddrivetip();
        img.src = "/images/portfolioOptimizerButton.gif";
    }
}

function hoverImageBorderWithGray(img, on) {
    if (!on) {
        img.style.border = "1px solid gray";
    } else {
        img.style.border = "1px solid #82CAFA";
    }
}

function hoverBrochureDownload(img, evt, on) {
    if (!on) {
        // hideddrivetip();
        img.src = "/images/downloadpdf_selected.gif";
        img.style.border = "1px solid #ffffff";
    } else {
        showToolTip(evt, img, "Click to download pdf brochure");
        img.src = "/images/downloadpdf.gif";
        img.style.border = "1px solid #82CAFA";
    }
}

function hoverMarketBrowser(img, evt, on) {
    if (!on) {
        img.src = "/images/marketBrowserMain_selected.gif";
        img.style.border = "1px solid #ffffff";
        // hideddrivetip();
    } else {
        img.src = "/images/marketBrowserMain.gif";
        img.style.border = "1px solid #82CAFA";
        showToolTip(evt, img, "Click to surf Market");
    }
}

function displaysPopUpPanel() {
    var popupPanel = document.getElementById("popUpPanel");
    if (!popupPanel) {
        return false;
    }
    if (popupPanel.style.visibility == "visible") {
        return true;
    } else {
        return false;
    }
}

function createFakeEventObj() {
    if (!window.event) {
        window.event = false;
    }
}

function getY(panelEvent) {
    var curY = 0;
    if (!panelEvent) {
        panelEvent = window.event;
    }
    if (typeof(panelEvent.pageY) == 'number') {
        curY = panelEvent.pageY;
    } else if (typeof(panelEvent.clientY) == 'number') {
        curY = panelEvent.clientY;
    }
    if (document.body && (document.body.scrollLeft || document.body.scrollTop)) {
        curY += document.body.scrollTop;
    } else if (document.documentElement && (document.documentElement.scrollLeft || document.documentElement.scrollTop)) {
        curY += document.documentElement.scrollTop;
    }
    return curY;
}

function findPosX(obj) {
    var curleft = 0;
    if (obj.offsetParent)
        while (1) {
            curleft += obj.offsetLeft;
            if (!obj.offsetParent)
                break;
            obj = obj.offsetParent;
        }
    else if (obj.x)
        curleft += obj.x;
    return curleft;
}

function findPosY(obj) {
    var curtop = 0;
    if (obj.offsetParent)
        while (1) {
            curtop += obj.offsetTop;
            if (!obj.offsetParent)
                break;
            obj = obj.offsetParent;
        }
    else if (obj.y)
        curtop += obj.y;
    return curtop;
}

function getX(panelEvent) {
    var curX = 0;
    if (!panelEvent) {
        panelEvent = window.event;
    }
    if (typeof(panelEvent.pageX) == 'number') {
        curX = panelEvent.pageX;
    } else if (typeof(panelEvent.clientX) == 'number') {
        curX = panelEvent.clientX;
    }
    if (document.body && (document.body.scrollLeft || document.body.scrollTop)) {
        curX += document.body.scrollLeft;
    } else if (document.documentElement && (document.documentElement.scrollLeft || document.documentElement.scrollTop)) {
        curX += document.documentElement.scrollLeft;
    }
    return curX;
}

function showPopUpPanel(sourceElem, context, x, y) {
    popUp1 = sourceElem;
    popUp2 = context;
    popUp3 = x;
    popUp4 = y;
    // alert(popUp1+","+popUp2+","+popUp3+","+popUp4);
    setTimeout("showPopUpPanelImpl()", 10);
}

function showDelaiedPopUpPanel(sourceElem, context, x, y) {
    popUp1 = sourceElem;
    popUp2 = context;
    popUp3 = x;
    popUp4 = y;
    setTimeout("showPopUpPanelImpl()", 300);
}

function showPopUpPanelImpl() {
    sourceElem = popUp1;
    context = popUp2;
    x = popUp3
    y = popUp4;
    if (sourceElem == null) {
        return;
    }
    var curX = findPosX(sourceElem);
    var curY = findPosY(sourceElem);
    if (x > 0) {
        curX += x;
    }
    if (sourceElem.height) {
        curY = Top(sourceElem) + sourceElem.height;
    }
    if (y) {
        curY += y;
    } else {
        curY += 15;
    }
    if (displaysPopUpPanel()) {
        // alert("removing popup");
        hidePopUpPanel();
    }
    // alert(sourceElem.x +" "+sourceElem.offsetX);
    if (x == "0" || x == "-1") {
        curX = curX - (102 - (sourceElem.offsetWidth / 2));
    }
    var popupPanel = document.getElementById("popUpPanel");
    popupPanel.style.display = "block";
    popupPanel.style.visibility = "visible";
    popupPanel.style.position = "absolute";
    popupPanel.style.left = curX + "px";
    popupPanel.style.top = curY + "px";
    popupPanel.style.zIndex = 10000;
    // alert(sourceElem.x +" "+sourceElem.offsetX);
    if (x == "0") {
        popupPanel.innerHTML = "" +
            "<div style='padding: 2px; padding-bottom: 5px;background: #f7f7f7;' class='oldPopUp' id='oldPopUp'>" +
            context + "<div class='toolTipPointer'></div></div>";
    } else if (x == "-1") {
        popupPanel.innerHTML = "" +
            "<div style='padding: 2px; padding-top: 5px;background: #f7f7f7;' class='oldPopUp' id='oldPopUp'>" +
            "<div class='toolTipPointerLow'></div>" +
            context + "</div>";
    } else {
        popupPanel.innerHTML = "" +
            "<div style='padding: 2px; padding-bottom: 5px;background: #f7f7f7;' class='oldPopUp' id='oldPopUp'>" +
            context + "</div>";
    }
    // closeTradeBox();
    // closePortfolioHeader();
    /* display the pop-up */
    popUp1 = null;
    popUp2 = null;
    popUp3 = 0;
    popUp4 = 0;
}

function removePopUpPanel() {
    popUp1 = null;
    popUp2 = null;
    popUp3 = 0;
    popUp4 = 0;
    var popupPanel = document.getElementById("popUpPanel");
    if (popupPanel) {
        // alert(popupPanel);
        popupPanel.style.display = "none";
        popupPanel.style.visibility = "hidden";
    }
    var countryPopUpPanel = document.getElementById("countryPopUp");
    if (countryPopUpPanel) {
        countryPopUpPanel.style.display = "none";
        // alert(countryPopUpPanel);
        // countryPopUpPanel.style.visibility="hidden";
    }
    var portfolioPopUpPanel = document.getElementById("portfolioPopUp");
    if (portfolioPopUpPanel) {
        portfolioPopUpPanel.style.display = "none";
        // alert(countryPopUpPanel);
        // countryPopUpPanel.style.visibility="hidden";
    }
    var modelPortfolioPopUpPanel = document.getElementById("modelPortfolioPopUp");
    if (modelPortfolioPopUpPanel) {
        modelPortfolioPopUpPanel.style.display = "none";
        // alert(countryPopUpPanel);
        // countryPopUpPanel.style.visibility="hidden";
    }
    var fundumentalPopUpPanel_1 = document.getElementById("fundamentalPopUp1");
    // alert(fundumentalPopUpPanel_1);
    if (fundumentalPopUpPanel_1) {
        fundumentalPopUpPanel_1.style.display = "none";
        // countryPopUpPanel.style.visibility="hidden";
    }
    var fundumentalPopUpPanel_2 = document.getElementById("fundamentalPopUp2");
    if (fundumentalPopUpPanel_2) {
        fundumentalPopUpPanel_2.style.display = "none";
        // alert(countryPopUpPanel);
        // countryPopUpPanel.style.visibility="hidden";
    }
    var portfolioManagePopUpPanel = document.getElementById("portfolioManagePopUp");
    if (portfolioManagePopUpPanel) {
        portfolioManagePopUpPanel.style.display = "none";
        // alert(countryPopUpPanel);
        // countryPopUpPanel.style.visibility="hidden";
    }
    var searchPopUpMain = document.getElementById("searchBoxResultMain");
    if (searchPopUpMain) {
        // alert("none");
        removeResultsDiv();
    }
}

function switchFundamental(url, secondRatio, isFirst) {
    // alert (url+" "+secondRatio);
    setTimeout("openPage('" + url + "');", 100);
}

function hidePopUpPanel(evt) {
    var elementUnderMouse = null;
    if (evt) {
        elementUnderMouse = getElementByEvent(evt);
        var elementid = elementUnderMouse.id;
        // alert(elementid);
        if (elementid && elementid.indexOf("popup_") == -1) {
            // alert(elementid);
            removePopUpPanel();
        } else {
            // alert(elementUnderMouse);
        }
    } else {
        removePopUpPanel();
    }
}

function getElementByEvent(evt) {
    // alert(evt.srcElement);
    if (evt.srcElement) {
        return evt.srcElement;
    } else if (evt.target) {
        return evt.target;
    }
}

function hoverLogoImage(img, evt, on) {
    if (on) {
        img.src = "/images/pitchlet_logoBeta_selected.gif";
        // showToolTip(evt,img, "On-demand financial analytics<br><b>Click</b>
        // to go to main page");
    } else {
        img.src = "/images/pitchlet_logoBeta.gif";
        // hideddrivetip();
    }
}

function hoverAjaxPoweredImage(img, evt, on) {
    if (on) {
        img.src = "/images/ajaxpowered.gif";
        showToolTip(evt, img, "Click to learn more");
    } else {
        img.src = "/images/ajaxpowered_selected.gif";
        // hideddrivetip();
    }
}

function hoverMainPageImage(img, evt, on) {
    if (on) {
        img.src = "/images/mainPageImage_selected.GIF";
        showToolTip(evt, img, "Click to learn more");
    } else {
        img.src = "/images/mainPageImage.GIF";
        // hideddrivetip();
    }
}

function showTooTipWithHeader(evt, img, title, body) {
    var tip = "<div style='font-size: 1.1em; padding:5px; marging-bottom:3px; width:200px; color: #ffffff; background: #f44336'><b>" + title + "</b></div>";
    if (body) {
        tip += "<table width='200px' cellpadding='2' cellspacing='0' border='0' bgcolor='#e5ecf9'>";
        tip += "<tr><td><span style='font-size: 1em;'>" + body + "</span></td></tr></table>";
    }
    showToolTip(evt, img, tip);
}

function hoverSurfMarketImage(img, evt, on) {
    if (on) {
        img.src = "/images/surfMarket_selected.gif";
        showToolTip(evt, img, "<b>Click here</b> <br>to view composite view<br>of all securities from <br>USA equity markets");
    } else {
        img.src = "/images/surfMarket.gif";
        // hideddrivetip();
    }
}

function hoverBrowseSectorsImage(img, evt, on) {
    if (on) {
        img.src = "/images/browseSectors_selected.gif";
        showToolTip(evt, img, "<b>Click here</b> <br>to surf composite view<br>of all sectors from <br>USA equity markets");
    } else {
        img.src = "/images/browseSectors.gif";
        // hideddrivetip();
    }
}

function hoverNewsLink(block, evt, date, description, on) {
    if (on) {
        // showTooTipWithHeader(evt,block, date,description);
        // block.style.background="#99CCFF";
        // block.style.color="white";
    } else {
        // block.style.background="#ffffff";
        // block.style.color="#8b9dc3";
        // hideddrivetip();
    }
}

function hoverTechnologyImage1(img, evt, on) {
    if (on) {
        img.src = "/images/technology1_selected.gif";
        showTooTipWithHeader(evt, img, "<img src='/images/one.gif' align='absmiddle'>&nbsp;&nbsp;&nbsp;CLIENT&nbsp;BROWSER",
            "Pitchlets are executed by " +
            "Browser Plug-ins or implemented as advanced DHTML. They are typically " +
            "initialized using xml data structures " +
            "and may contain multiple scenarios. " +
            "Pages embedding pitchlets use the client side of the AJAX engine.");
    } else {
        img.src = "/images/technology1.gif";
        // hideddrivetip();
    }
}

function hoverTechnologyImage2(img, evt, on) {
    if (on) {
        img.src = "/images/technology2_selected.gif";
        showTooTipWithHeader(evt, img, "<img src='/images/two.gif' align='absmiddle'>&nbsp;&nbsp;&nbsp;AJAX",
            "User requests interact with the server " +
            "using XMLHTTP, and results are " +
            "processed using javascript and DHTML. This significantly reduced cumulative " +
            "response time. Full page refreshes " +
            "for analytics presentation are  " +
            "completely eliminated and user experience is considerably enhanced.");
    } else {
        img.src = "/images/technology2.gif";
        // hideddrivetip();
    }
}

function hoverTechnologyImage3(img, evt, on) {
    if (on) {
        img.src = "/images/technology3_selected.gif";
        showTooTipWithHeader(evt, img, "<img src='/images/three.gif' align='absmiddle'>&nbsp;&nbsp;&nbsp;WEB&nbsp;SERVER",
            "Web Server processes XMLHTTP requests and generates the required xml " +
            "data structure. " +
            "Generated xml is serialized and its location is passed to the " +
            "Pitchlet embedded on the block that is being updated." +
            "This significantly reduced cumulative " +
            "response time of Browser to Web Server communication.");
    } else {
        img.src = "/images/technology3.gif";
        // hideddrivetip();
    }
}

function hoverDelete(img, evt, on) {
    if (on) {
        img.src = "/images/x3.gif";
        showToolTip(evt, img, "Hide Panel");
    } else {
        img.src = "/images/x2.gif";
        // hideddrivetip();
    }
}

function hideDateRangePicker(button, evt) {
    hidePopUpPanel();
}

function hoverRemovePortfolioHome(img, evt, symbol, on) {
    if (on) {
        img.src = "/images/deletePortfolioHome_s.gif";
        showToolTip(evt, img, "<font color='#ffffff'><b>Click</b></font> <font color='#ffffff'>to remove<br><b>" + symbol + "</b></font>");
    } else {
        img.src = "/images/deletePortfolioHome.gif";
        // hideddrivetip();
    }
}

function hoverRemovePortfolio(img, evt, symbol, on) {
    if (on) {
        img.src = "/images/deleteHovered_s.gif";
        showToolTip(evt, img, "<font color='#ffffff'><b>Click</b></font> <font color='#ffffff'>to remove<br><b>" + symbol + "</b></font>");
    } else {
        img.src = "/images/deleteHovered.gif";
        // hideddrivetip();
    }
}

function hoverDeletePortfolioTip(img, evt, on) {
    if (on) {
        showToolTip(evt, img, "<font color='#ffffff'>Click to delete this portfolio</font>");
    } else {
        // hideddrivetip();
    }
}

function hoverRebalancePortfolioTip(img, evt, on) {
    if (on) {
        showToolTip(evt, img, "<font color='#ffffff'>Click to rebalance this portfolio</font>");
    } else {
        // hideddrivetip();
    }
}

function hoverManagePortfolioTip(img, evt, on) {
    if (on) {
        showToolTip(evt, img, "<font color='#ffffff'>Click to manage this portfolio</font>");
    } else {
        // hideddrivetip();
    }
}

function hoverDeleteSymbolTip(img, evt, symbol, on) {
    if (on) {
        showToolTip(evt, img, "<font color='#ffffff'>Click to delete " + symbol + "</font>");
    } else {
        // hideddrivetip();
    }
}

function hoverManageSymbolTip(img, evt, symbol, on) {
    if (on) {
        showToolTip(evt, img, "<font color='#ffffff'>Click to edit " + symbol + " position</font>");
    } else {
        // hideddrivetip();
    }
}

function hoverTransactionTip(img, evt, symbol, on) {
    if (on) {
        showToolTip(evt, img, "<font color='#ffffff'><b>Click</b></font><br><font color='#ffffff'>to view <b>" + symbol + "</b> transaction details</font>");
    } else {
        // hideddrivetip();
    }
}

function hoverEditTip(img, evt, symbol, on) {
    if (on) {
        showToolTip(evt, img, "<font color='#ffffff'><b>Click</b></font> <font color='#ffffff'>to edit <b>" + symbol + "</b> position</font>");
    } else {
        // hideddrivetip();
    }
}

function hoverSellTip(img, evt, symbol, on) {
    if (on) {
        showToolTip(evt, img, "<font color='#ffffff'><b>Click</b></font> <font color='#ffffff'>to sell <b>" + symbol + "</b></font>");
    } else {
        // hideddrivetip();
    }
}

function hoverBuyTip(img, evt, symbol, on) {
    if (on) {
        showToolTip(evt, img, "<font color='#ffffff'><b>Click</b></font> <font color='#ffffff'>to buy <b>" + symbol + "</b></font>");
    } else {
        // hideddrivetip();
    }
}

function hoverYahooTip(img, evt, symbol, on) {
    if (on) {
        showToolTip(evt, img, "<font color='#ffffff'><b>Click</b></font> <font color='#ffffff'>to view <b>" + symbol + "</b><br> market summary on Yahoo!</font>");
    } else {
        // hideddrivetip();
    }
}

function hoverSymbolNameTip(img, evt, name, on) {
    if (on) {
        // alert(name);
        showToolTip(evt, img, name);
    } else {
        // hideddrivetip();
    }
}

function hoverSymbolTip(img, evt, symbol, on) {
    if (on) {
        showToolTip(evt, img, "<font color='#ffffff'><b>Click</b></font><br><font color='#ffffff'>to view <b>" + symbol + "</b> market summary</font>");
    } else {
        // hideddrivetip();
    }
}

function hoverRemoveSymbol(img, evt, symbol, on) {
    var sId = symbol + "_del";
    var sb = document.getElementById(sId);
    if (on) {
        sb.style.className = "portfolioSymbolRemoveSelected";
        // img.src="/removeSymbol_s.gif";
        showToolTip(evt, img, "<font color='#ffffff'><b>Click</b></font> to<br><font color='#ffffff'></b>remove</b> " + symbol + "</font>");
    } else {
        // sb.style.background="url('../removeSymbol.gif')";
        sb.style.className = "portfolioSymbolRemove";
    }
}

function hoverPortfolioPie(img, evt, on) {
    if (on) {
        img.src = "/portfolioPie_s.gif";
        showToolTip(evt, img, "<font color='#ffffff'><b>Click</b></font><br><font color='#ffffff'>to graph a pie chart <br>of this portfolio</font>");
    } else {
        img.src = "/portfolioPie.gif";
        // hideddrivetip();
    }
}

function hoverImportPortfolioSmall(img, evt, on) {
    if (on) {
        img.src = "/portfolioImport_s.gif";
        showToolTip(evt, img, "<font color='#ffffff'><b>Click</b></font><br><font color='#ffffff'>to import<br> <b>portfolio</b> from excel file</font>");
    } else {
        img.src = "/images/portfolioImport.gif";
        // hideddrivetip();
    }
}

function hoverImportPortfolio(img, evt, name, on) {
    if (on) {
        img.src = "/images/importHovered_s.gif";
        showToolTip(evt, img, "<font color='#ffffff'><b>Click</b></font><br><font color='#ffffff'>to <b>import</b> portfolio <br><b>" + name + "</b> from csv file</font>");
    } else {
        img.src = "/images/importHovered.gif";
        // hideddrivetip();
    }
}

function hoverExportPortfolio(img, evt, name, on) {
    if (on) {
        img.src = "/images/exportHovered_s.gif";
        showToolTip(evt, img, "<font color='#ffffff'><b>Click</b></font><br><font color='#ffffff'>to <b>export</b> portfolio <br><b>" + name + "</b> to csv file</font>");
    } else {
        img.src = "/images/exportHovered.gif";
        // hideddrivetip();
    }
}

function hoverRemoveAllSymbols(img, evt, on) {
    if (on) {
        img.src = "/images/trash_selected.gif";
        showToolTip(evt, img, "<font color='#ffffff'><b>Click</b></font><br><font color='#ffffff'>to remove <b>all symbols</b> <br>from portfolio</font>");
    } else {
        img.src = "/images/trash.gif";
        // hideddrivetip();
    }
}

function hoverMoreImage(img, evt, on) {
    if (on) {
        img.src = "/images/more_s.gif";
    } else {
        img.src = "/images/more.gif";
    }
}

function has(img, evt, symbol, on) {
    hoverAddSymbol(img, evt, symbol, on);
}

function hoverAddSymbol(img, evt, symbol, on) {
    if (on) {
        img.src = "/images/addSymbol_s.gif";
        showToolTip(evt, img, "<font color='#ffffff'><b>Click</b></font><br><font color='#ffffff'>to add <b>" + symbol + "</b> <br>to portfolio</font>");
    } else {
        img.src = "/images/addSymbol.gif";
        // hideddrivetip();
    }
}

function hoverMarketToggleOff(img, on) {
    if (on) {
        img.src = "/images/hideMarket.gif";
    } else {
        img.src = "/images/hideMarketSelected.gif";
    }
}

function hoverMarketToggleOn(img, on) {
    if (on) {
        img.src = "/images/showMarket.gif";
    } else {
        img.src = "/images/showMarketSelected.gif";
    }
}

function hoverToggleMarketBigOn(img) {
    img.src = "/images/toggleMarket.gif";
}

function hoverToggleMarketBigOff(img) {
    img.src = "/images/toggleMarket_s.gif";
}

function hoverMarketImageOn(img, evt) {
    var imageToggle = document.getElementById("toggleMarket");
    if (!imageToggle) {
        return;
    }
    // var marketTreeDiv = document.getElementById('marketTree');
    // if (marketTreeDiv) {
    // var marketTreeStyle = document.getElementById('marketTree').style;
    // if (marketTreeStyle.display == "block") {
    // imageToggle.src="/images/hideMarketSelected.gif";
    //
    // } else {
    // imageToggle.src="/images/showMarketSelected.gif";
    // }
    // }
    // var imageToggleHelp = document.getElementById("toggleMarketHelp");
    // showToolTip(evt,img, "<font color='#ffffff'><b>Click</b></font><br><font
    // color='#ffffff'>to toggle <b>market tree view</b>");
    // if (imageToggleHelp) {
    // imageToggleHelp.src='/images/toggleMarket_s.gif';
    //		
    // }
}

function changeToggleMarketImage() {}

function hoverMarketImageOff() {
    // var imageToggle = document.getElementById("toggleMarket");
    // if (!imageToggle) {
    // return;
    // }
    //
    // var marketTreeDiv = document.getElementById('marketTree');
    // if (marketTreeDiv) {
    // var marketTreeStyle = document.getElementById('marketTree').style;
    // if (marketTreeStyle.display == "block") {
    // imageToggle.src="/images/hideMarket.gif";
    //
    // } else {
    // imageToggle.src="/images/showMarket.gif";
    // }
    // }
    // hideddrivetip();
    // var imageToggleHelp = document.getElementById("toggleMarketHelp");
    // if (imageToggleHelp) {
    // imageToggleHelp.src='/images/toggleMarket.gif';
    //		
    // }
}

function hoverLinkBlock(block, on) {
    if (on) {
        block.style.background = "#99CCFF";
        block.style.color = "white";
    } else {
        block.style.background = "#F2F7FB";
        block.style.color = "#8b9dc3";
    }
}

function hoverFilterLink(block, on) {
    if (on) {
        block.style.background = "#99CCFF";
        block.style.color = "white";
    } else {
        block.style.background = "#e5ecf9";
        block.style.color = "#8b9dc3";
    }
}

function hoverBlock(block, on) {
    if (on) {
        block.style.background = "#99CCFF";
        block.style.color = "white";
    } else {
        block.style.background = "transparent";
        block.style.color = "#8b9dc3";
    }
}

function clickSearchResultRow(block, event, symbol) {
    // hideddrivetip();
    hiddenTip = false;
}

function hfr(block, on, evt, symbol, quote,
    change, color, numberOfShares, totalValue, rank,
    managerTenure, morningstarRating, returnRating, riskRating, netAssets,
    turnoverPercentage, medianHolding, minimumInvestment,
    frontLoadPercentage, experationPercentage, returnToDate,
    oneYearReturn, threeYearReturn, fiveYearReturn) {
    hoverFundRow(block, on, evt, symbol, quote,
        change, color, numberOfShares, totalValue, rank,
        managerTenure, morningstarRating, returnRating, riskRating, netAssets,
        turnoverPercentage, medianHolding, minimumInvestment,
        frontLoadPercentage, experationPercentage, returnToDate,
        oneYearReturn, threeYearReturn, fiveYearReturn);
}

function hoverFundRow(block, on, evt, symbol, quote,
    change, color, numberOfShares, totalValue, rank,
    managerTenure, morningstarRating, returnRating, riskRating, netAssets,
    turnoverPercentage, medianHolding, minimumInvestment,
    frontLoadPercentage, experationPercentage, returnToDate,
    oneYearReturn, threeYearReturn, fiveYearReturn) {
    if (on) {
        // block.style.background="#99CCFF";
        // block.style.color="white";
        if (!symbol) {
            return;
        }
        showFundPopUp(block, evt, symbol, quote,
            change, color, numberOfShares, totalValue, rank,
            managerTenure, morningstarRating, returnRating, riskRating, netAssets,
            turnoverPercentage, medianHolding, minimumInvestment,
            frontLoadPercentage, experationPercentage, returnToDate,
            oneYearReturn, threeYearReturn, fiveYearReturn);
        block.className = 'highliteBrowserSearch';
    } else {
        // block.style.background="transparent";
        // block.style.color="#8b9dc3";
        if (!symbol) {
            return;
        }
        removePopUpPanel();
        block.className = 'browserSearch';
    }
}

function hoverPortfolioRow(pid, block, on, evt, currentClassOff) {
    var delBlock = document.getElementById(pid + "_del");
    var editBlock = document.getElementById(pid + "_view");
    var rebalanceBlock = document.getElementById(pid + "_reb");
    var manageBlock = document.getElementById(pid + "_manage");
    var descBlock = document.getElementById(pid + "_desc");
    // alert(manageBlock);
    if (on) {
        block.className = 'highliteBuilderSearch';
        if (delBlock) {
            delBlock.style.visibility = "visible";
        }
        if (editBlock) {
            editBlock.style.visibility = "visible";
        }
        if (rebalanceBlock) {
            rebalanceBlock.style.visibility = "visible";
        }
        if (descBlock) {
            descBlock.style.visibility = "hidden";
            descBlock.style.display = "none";
        }
        if (manageBlock) {
            manageBlock.style.visibility = "visible";
            manageBlock.style.display = "block";
        }
    } else {
        if (currentClassOff == 'browserSearch') {
            block.className = 'browserSearch';
        } else if (currentClassOff == 'browserSearchEven') {
            block.className = 'browserSearchEven';
        }
        if (delBlock) {
            delBlock.style.visibility = "hidden";
        }
        if (editBlock) {
            editBlock.style.visibility = "hidden";
        }
        if (rebalanceBlock) {
            rebalanceBlock.style.visibility = "hidden";
        }
        if (descBlock) {
            descBlock.style.visibility = "visible";
            descBlock.style.display = "block";
        }
        if (manageBlock) {
            manageBlock.style.visibility = "hidden";
            manageBlock.style.display = "none";
        }
    }
}

function hoverRatioRow(rid, block, on, evt, currentClassOff) {
    var actionBlock = document.getElementById(rid + "_manage");
    var valueBlock = document.getElementById(rid + "_value");
    // alert(manageBlock);
    if (on) {
        block.className = 'highliteBuilderSearch';
        if (actionBlock) {
            actionBlock.style.visibility = "visible";
            actionBlock.style.display = "block";
        }
        if (valueBlock) {
            valueBlock.style.visibility = "hidden";
            valueBlock.style.display = "none";
        }
    } else {
        if (currentClassOff == 'browserSearch') {
            block.className = 'browserSearch';
        } else if (currentClassOff == 'browserSearchEven') {
            block.className = 'browserSearchEven';
        }
        if (actionBlock) {
            actionBlock.style.visibility = "hidden";
            actionBlock.style.display = "none";
        }
        if (valueBlock) {
            valueBlock.style.visibility = "visible";
            valueBlock.style.display = "block";
        }
    }
}

function hoverBuilderSymbol(block, on, evt, symbol, numberOfSharesOrClassOff, totalValue, quote, change, high, low, volume, time, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2, classOff) {
    if (on) {
        if (!symbol) {
            return;
        }
        showSymbolPopUp(block, evt, symbol, numberOfSharesOrClassOff, totalValue, quote, change, high, low, volume, time, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2);
    } else {
        if (!symbol) {
            return;
        }
        removePopUpPanel();
    }
}

function hoverBuilderRow(block, on, evt, symbol, numberOfSharesOrClassOff, totalValue, quote, change, high, low, volume, time, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2, classOff) {
    // alert(classOff);
    // if (!classOff) {
    // return;
    // }
    var delBlock = document.getElementById(symbol + "_del");
    var editBlock = document.getElementById(symbol + "_edit");
    // alert(delBlock);
    if (on) {
        if (!symbol) {
            return;
        }
        // alert( symbol+" "+ numberOfShares+" "+ totalValue);
        // block.style.background="url('../images/barPositive_selected.jpg')";
        block.className = 'highliteBuilderSearch';
        if (delBlock != null) {
            delBlock.style.visibility = "visible";
        }
        if (editBlock != null) {
            editBlock.style.visibility = "visible";
        }
        showSymbolPopUp(block, evt, symbol, numberOfSharesOrClassOff, totalValue, quote, change, high, low, volume, time, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2);
    } else {
        if (!symbol) {
            return;
        }
        if (delBlock != null) {
            delBlock.style.visibility = "hidden";
        }
        if (editBlock != null) {
            editBlock.style.visibility = "hidden";
        }
        // window.pieFrame.pie.rollOverSlice(3);
        // alert(numberOfSharesOrClassOff);
        // block.style.background="url('')";
        if (numberOfSharesOrClassOff) {
            if (numberOfSharesOrClassOff == 'browserSearch') {
                block.className = 'browserSearch';
                // block.style.background="#ffffff";
            } else if (numberOfSharesOrClassOff == 'browserSearchEven') {
                block.className = 'browserSearchEven';
                // block.style.background="#F7F7F7";
            }
        } else {
            block.className = 'browserSearch';
        }
        removePopUpPanel();
    }
}

function hoverTransaction(block, on, evt, symbol, numberOfSharesOrClassOff, totalValue, quote, change, high, low, volume, time, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2, classOff) {
    if (!on) {
        removePopUpPanel();
        block.className = 'builderSearch';
    } else if (!symbol) {
        removePopUpPanel();
    } else if (symbol == "undefined") {
        removePopUpPanel();
    } else if ("undefined" == typeof(block)) {
        removePopUpPanel();
    } else {
        block.className = 'highliteBuilderSearch';
        var displayInfo = getSymbolDisplayBlock(symbol, numberOfSharesOrClassOff, totalValue,
            quote, change, high, low, volume, time, date, name,
            color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2);
        // var bars ="<img
        // src='http://chart.apis.google.Rcom/chart?cht=bvs&amp;chs=256x30&amp;chd=t:10,50,60,80,40,60,10,50,60'
        // alt='test' />";
        var content = displayInfo;
        showPopUpPanel(block, content, 683, -1);
    }
}

function hoverSearchResultRow(block, on, evt, symbol, numberOfShares, totalValue, quote, change, high, low, volume, time, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2) {
    if (on) {
        if (!symbol) {
            return;
        }
        // alert( symbol+" "+ numberOfShares+" "+ totalValue);
        showSymbolPopUp(block, evt, symbol, numberOfShares, totalValue, quote, change, high, low, volume, time, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2);
        block.className = 'highliteBrowserSearch';
    } else {
        // block.style.background="transparent";
        // block.style.color="#8b9dc3";
        if (!symbol) {
            return;
        }
        removePopUpPanel();
        block.className = 'browserSearch';
    }
}

function clickCorrelationCell(block, event) {
    var cellId = block.id;
    var colId = cellId.substring(0, cellId.indexOf("_"));
    var rowId = cellId.substring(cellId.indexOf("_") + 1);
    var colBlock = document.getElementById("c_" + colId);
    var rowBlock = document.getElementById("r_" + rowId);
    hiddenTip = false;
    colBlock.style.background = "#0099CC";
    rowBlock.style.background = "#0099CC";
    rowBlock.style.color = "white";
    colBlock.style.color = "white";
    block.style.color = "white";
    block.style.border = "2px solid #0099CC";
    // hideddrivetip();
    hideCompareToolTip(event, block);
    hiddenTip = false;
    displayCompareToolTip(event, block, colId, rowId);
}

function cas(block, evt, symbol, name) {
    clickAddSymbol(block, evt, symbol, name);
}

function clickAddSymbol(block, evt, symbol, name) {
    alert('Change Me!! or Delete Me... I am broken. Who am I ? your friendly clickAddSymbol');
}

function clickDefaultTradeSymbol(symbol, transactionType) {
    // alert(symbol);
    var portId = document.getElementById('pid');
    var pid = portId.value;
    // alert(pid);
    clickTradeSymbol(symbol, transactionType, pid);
}

function clickPartnerTradeSymbol(symbol, transactionType) {
    var portId = parent.document.getElementById('pid');
    var pid = portId.value;
    handlePartnerTradeSymbol(symbol, transactionType, pid);
}

function handlePartnerTradeSymbol(symbol, transactionType, pid) {
    closeTradeBox();
    showPartnerTradeBlock(symbol, transactionType, pid);
}

function removeBodyMessage() {
    // get a reference to the cross-browser style object and make sure the
    // object exists
    var msg = document.getElementById("bodyMessage");
    if (msg) {
        msg.innerHTML = "";
    }
}

function closeTradeBox() {
    var helpDiv = document.getElementById("equityTransactionBlock");
    if (helpDiv) {
        helpDiv.innerHTML = "<div style='font-size:.0001em;'>&nbsp;</div>";
    }
}

function clickAddPartnerPortfolio(block, evt, pid, name) {
    removeBodyMessage();
    closeTradeBox();
    showAddPartnerPortfolioBlock(pid);
}

function clickAddPortfolioFromCryptoExchange(block, evt, pid, name, isDashboard) {
    var postData = "/addPortfolioFromOptimizedCryptoExchange.jsp";
    $.ajax({
        async: false,
        url: postData
    }).done((function(data) {
        Swal.fire({
            title: "",
            html: data,
            showCancelButton: true,
            confirmButtonText: "Submit",
            allowEscapeKey: true,
            allowOutsideClick: false,
            confirmButtonColor: "green"
        }).then((function(result) {
            if (result.value) {
                addPortfolioSimple();
            }
        }));
    }));
    updateFilters();
}
	

function clickAddPortfolioFromHitter(block, evt, pid, name, isDashboard) {
    var postData = "/addPortfolioFromHitter.jsp";
    $.ajax({
        async: false,
        url: postData
    }).done((function(data) {
        Swal.fire({
            title: "",
            html: data,
            showCancelButton: true,
            confirmButtonText: "Submit",
            allowEscapeKey: true,
            allowOutsideClick: false,
            confirmButtonColor: "green"
        }).then((function(result) {
            if (result.value) {
                addPortfolioSimple();
            }
        }));
    }));
    updateFilters();
}
	
function clickAddPortfolioFromWatchlist(block, evt, pid, name, isDashboard) {
    var postData = "/addPortfolioFromWatchlist.jsp";
    $.ajax({
        async: false,
        url: postData
    }).done((function(data) {
        Swal.fire({
            title: "",
            html: data,
            showCancelButton: true,
            confirmButtonText: "Submit",
            allowEscapeKey: true,
            allowOutsideClick: false,
            confirmButtonColor: "green"
        }).then((function(result) {
            if (result.value) {
                addPortfolioSimple();
            }
        }));
    }));
    updateFilters();
}

function clickAddPortfolioWithName(name, desc) {
    var postData = "/addPortfolioSimple.jsp";
    if (name) {
        postData += "?name=" + name;
        if (desc) {
            postData += "&desc=" + desc;
        }
    }
    $.ajax({
        async: false,
        url: postData
    }).done((function(data) {
        Swal.fire({
            title: "",
            html: data,
            showCancelButton: true,
            confirmButtonText: "Submit",
            allowEscapeKey: true,
            allowOutsideClick: false,
            confirmButtonColor: "green"
        }).then((function(result) {
            if (result.value) {
                addPortfolioSimple();
            }
        }));
    }));
    updateFilters();
}

function clickAddPortfolioSimple(block, evt, pid, name, isDashboard) {
    clickAddPortfolioWithName(name, "New Portfolio");
}

function clickAddModelPortfolio(pid, isDashboard) {
    var postData = "/invest/addModelPortfolio?xd=" + pid;
    // alert(postData);
    if (isDashboard) {
        postData += "&isDashboard=" + isDashboard;
    }
    openPage(postData);
}

function clickAddCryptoPortfolio(pid, isDashboard) {
    var postData = "/invest/addCryptoPortfolio?xd=" + pid;
    // alert(postData);
    if (isDashboard) {
        postData += "&isDashboard=" + isDashboard;
    }
    openPage(postData);
}

function clickAddEmptyPortfolio() {
	clickAddPortfolio(-1, true);
}

function clickAddPortfolio(pid, isDashboard) {
    var postData = "/invest/addPortfolio";
    openPage(postData);
}

function clickAddNewPortfolio(block, evt, pid, name, isDashboard) {
    popUpCreatePortfolioDialog(isDashboard);
}

function clickEditPortfolio(block, evt, pid, name) {
    openPage("/invest/changePortfolio?xd=" + pid);
}

function clickFilterFirstPortfoliosShowAll() {
    postData = "/act.ma?action=pClearFilter";
    updater = new RemoteUpdater(postData, 'POST', "processDiv", null, RemoteUpdater.prototype.RESOLVE);
    // alert($("processDiv"));
    var postAction = function() {
        var finalUrl = "/invest/pitchletHome";
        setTimeout("openPage('" + finalUrl + "');", 100);
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function clickFilterPortfoliosShowAll() {
    postData = "/act.ma?action=pClearFilter";
    var v = document.getElementById("refreshView");
    refreshView = "portfolioDashboard";
    if (v) {
        refreshView = v.value;
    }
    // postData=postData+"?refreshView="+refreshView;
    updater = new RemoteUpdater(postData, 'POST', "processDiv", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        var finalUrl = "/invest/" + refreshView;
        setTimeout("openPage('" + finalUrl + "');", 1000);
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function clickFilterPortfolios() {
    // removeBodyMessage();
    // closeTradeBox();
    // closePortfolioHeader();
    // var helpDiv = document.getElementById("filterDialogBlock");
    // alert(helpDiv);
    // helpDiv.innerHTML="<div class='symbolBoxProgress'><b>Loading...</b>
    // &nbsp;<img src='/images/progress/flatStraight.gif' align='baseline'
    // border='0'></div>";
    // showFilterPortfoliosBlock();
    // alert("a");
    setTimeout("popUpPortfoliosFilterDialog()", 100);
}

function clickSharePortfolio(block, evt, pid, name) {
    removeBodyMessage();
    closeTradeBox();
    // closePortfolioHeader();
    var helpDiv = document.getElementById("equityTransactionBlock");
    helpDiv.innerHTML = "<div class='symbolBoxProgress'><b>Loading...</b> &nbsp;<img src='/images/progress/flatStraight.gif' align='baseline' border='0'></div>";
    showSharePortfolioBlock(pid);
    setTimeout("popUpShareDialog()", 100);
}

function getShareUrl() {
    var access = '';
    var out = 'rss';
    if (document.getElementById("pa").checked) {
        access = 'pa';
    } else {
        access = 'pp';
    }
    if (document.getElementById("htm").checked) {
        out = 'htm';
    }
    var pid = document.getElementById("pid").value;
    updateSharingUrl(pid, access, out);
}

function invite(block) {
    var helpDiv = document.getElementById(block);
    helpDiv.innerHTML = "<div class='symbolBoxProgress'><b>Loading...</b> &nbsp;<img src='/images/progress/flatStraight.gif' align='baseline' border='0'></div>";
    compose(block);
}

function emailUrl(block) {
    var helpDiv = document.getElementById(block);
    helpDiv.innerHTML = "<div class='symbolBoxProgress'><b>Loading...</b> &nbsp;<img src='/images/progress/flatStraight.gif' align='baseline' border='0'></div>";
    composeShareLink(block);
}

function contactAdvisor(aid, name) {
    var helpDiv = document.getElementById('container');
    helpDiv.innerHTML = "<div class='symbolBoxProgress'><b>Loading...</b> &nbsp;<img src='/images/progress/flatStraight.gif' align='baseline' border='0'></div>";
    composeContact(aid, name);
}

function clickVarBarRow(block, on, evt, symbol, name, risk, ret, varr, sharp, value, nShares) {
    var displayInfo = getVarBarDisplayBlock(symbol, name, risk, ret, varr, sharp, value, nShares);
    var content = displayInfo;
    // showPopUp(evt, block, name, displayInfo,null);
}

function hoverVarBarRow(block, on, evt, oddRow, symbol, name, risk, ret, varr, sharp, value, nShares) {
    if (on) {
        var holderBlock = document.getElementById("holder_" + symbol);
        // block.style.border= "1px solid #ffffff";
        block.className = 'highliteBuilderSearch';
        var displayInfo = getVarBarDisplayBlock(symbol, name, risk, ret, varr, sharp, value, nShares);
        showPopUpPanel(block, "<div class='ToolTipBox'><h3>&nbsp;" + name + "</h3>" + displayInfo + "</div>", -1, 53);
        if (holderBlock != null) {
            holderBlock.style.color = "#8b9dc3";
        }
    } else {
        var holderBlock = document.getElementById("holder_" + symbol);
        if (oddRow) {
            block.className = 'builderSearchEven';
        } else {
            block.className = 'builderSearch';
        }
        removePopUpPanel();
        if (holderBlock != null) {
            holderBlock.style.color = "#aaaaaa";
        }
    }
}

function hoverBaredPopHover(elem, evt, on, title, firstName, secondName, firstValue, secondValue) {
    if (on) {
        var fv = parseFloat(firstValue);
        var sv = parseFloat(secondValue);
        if (elem.className == "reverseRelativeBar" ||
            elem.className == "relativeBar") {
            elem.style.border = "2px solid #35586C";
        } else {
            elem.src = "/images/preview_s.gif";
        }
        var max = fv;
        if (fv < sv) {
            max = sv;
        }
        var firstRatio = 100;
        var secondRatio = 100;
        if (fv < sv) {
            firstRatio = parseInt(((sv - fv) / sv) * 100);
            firstRatio = 100 - firstRatio;
        } else {
            secondRatio = parseInt(((fv - sv) / fv) * 100);
            secondRatio = 100 - secondRatio;
        }
        if (firstRatio < 1) {
            firstRatio = 1;
        }
        if (secondRatio < 1) {
            secondRatio = 1;
        }
        var bars = "<table  cellpadding='2' cellspacing='5' width='100%' border='0'>";
        bars += "<tr><td nowrap>" + firstName + "</td><td nowrap ><b><font color='#8b9dc3'>" +
            firstValue + "</font></b></td>";
        bars += "<td width='99%' valign='middle' align='left'>";
        bars += "<div class='valueBarPopUp1' style='width: " + firstRatio + "%;'>&nbsp;&nbsp;</div>";
        bars += "</td></tr>";
        bars += "<tr><td nowrap>" + secondName + "</td><td nowrap ><b><font color='#8b9dc3'>" +
            secondValue + "</font></b></td>";
        bars += "<td width='99%' valign='middle' align='left'>";
        bars += "<div class='valueBarPopUp2' style='width: " + secondRatio + "%;'>&nbsp;&nbsp;</div>";
        bars += "</td></tr></table>";
        // alert(bars);
        showPopUpPanel(elem, getTypicalPopUpBlock(title, bars), 0, -100);
    } else {
        if (elem.className == "reverseRelativeBar" ||
            elem.className == "relativeBar") {
            elem.style.border = "2px solid #8b9dc3";
        } else {
            elem.src = "/images/preview.gif";
        }
        hidePopUpPanel();
    }
}

function getClickAddSymbolDisplayBlock(block, evt, symbol, name) {
    alert('Change Me!! or Delete Me... I am broken. Who am I ? your friendly getClickAddSymbolDisplayBlock');
}

function getVarBarDisplayBlock(symbol, name, risk, ret, varr, sharp, value, nShares) {
    var body = "<table class='table'>";
    body += "<tr><td >Value In Portfolio</td><td> <font color='green'><b>" + value + "</b></font></td></tr>";
    body += "<tr><td >Value At Risk</td><td> <font color='red'><b>" + varr + "</b></font></td></tr>";
    body += "<tr><td>Number Of Shares</td><td><font color='#8b9dc3'><b>" + nShares + "</b></font></td></tr>";
    body += "<tr><td>Risk</td><td><font color='gray'><b>" + risk + "</b></font></td></tr>";
    body += "<tr><td>Expected Return</td><td><font color='gray'><b>" + ret + "</b></font></td></tr>";
    body += "<tr><td>Sharpe Ratio</td><td><font color='gray'><b>" + sharp + "</b></font></td></tr>";
    body += "</table>";
    return body;
}

function getSymbolDisplayBlock(symbol, numberOfShares, totalValue, quote, change, high, low, volume, target, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2) {
    // var deleteStr = "<img src='/images/x2.gif' id='popupPanel_imgDelete'
    // src='/images/x2.gif' border='0'
    // onClick='javascript:hidePopUpPanel(event);'
    // onMouseOut='javascript:hoverDelete(this,event,false);' " +
    // "onMouseOver='javascript:hoverDelete(this,event,true);'>";
    var header = "<h3 style='padding-top:4px;'>" + name + "</h3>";
    var img = "";
    if (color == "red") {
        img = "&nbsp;&nbsp;<img src='/images/bigChangeDown.gif' align='baseline'>";
    } else if (color == "green") {
        img = "&nbsp;&nbsp;<img src='/images/bigChangeUp.gif' align='baseline'>";
    }
    var quote = "<table  class='table'  width='300'>" +
        "<tr><td width='80'></td><td ><b>Quote: " + quote + "</b>&nbsp;&nbsp;" + img + "&nbsp;<font color='" + color + "'>" + change + "</font></td></tr></table>";
    var postHeader = "<table class='table'  >" +
        "<tr><td width='50%'>Number Of Shares</td><td></td><td width='50%'>Value In Portfolio</td></tr>" +
        "<tr><td align='left'><font size='4'><b>" + numberOfShares + "</b></font></td><td></td><td align='left'><font size='4'><b>" + totalValue + "</b></font></tr></table>";
    var body = "<table class='table'  width='300'>";
    body += "<tr><td width='70'>High</td><td nowrap ><font color='gray'>" + high + "</font></td><td width='70'>Market Cap</td><td nowrap ><font color='gray'>" + marketCap + "</font></td></tr>";
    body += "<tr><td width='70'>Low</td><td nowrap ><font color='gray'>" + low + "</font></td><td width='70'>Book Value</td><td nowrap><font color='gray'>" + bookValue + "</font></td></tr>";
    body += "<tr><td width='70'>Vol</td><td nowrap ><font color='gray'>" + volume + "</font></td><td width='70'>EBITDA</td><td nowrap><font color='gray'>" + EBITDA + "</font></td></tr></table>";
    // var footer = "<table cellpadding='1' width='248' cellspacing='1'
    // border='0' bordercolor='white' bgcolor='#e5ecf9'>"+
    // "<tr><td width='228'><div>&nbsp<font color='#0099CCF'
    // size=\"1\">Click to view profile</font></div></td></tr></table>";
    // var footer = "<h4>Click for details</h4>";
    var chart = "<div class='ui-widget-content ui-corner-all' style='margin-left:10px;  margin-right:10px;  padding: 10px; background: #ffffff;'>" +
        "<img onError=\"this.parentNode.innerHTML='';\" src='https://www.google.com/finance/chart?cht=c&amp;q=" + symbol + "' /></div>";
    return "<div class=\"ToolTipBox\" style=\"padding: 5px; width:300px; border: 3px solid #000000; \">" + header + chart + quote + postHeader + body + "</div>";
}

function getFundDisplayBlock(block, evt, symbol, quote,
    change, color, numberOfShares, totalValue, rank,
    managerTenure, morningstarRating, returnRating, riskRating, netAssets,
    turnoverPercentage, medianHolding, minimumInvestment,
    frontLoadPercentage, experationPercentage, returnToDate,
    oneYearReturn, threeYearReturn, fiveYearReturn) {
    // var deleteStr = "<img src='/images/x2.gif' id='popupPanel_imgDelete'
    // src='/images/x2.gif' border='0'
    // onClick='javascript:hidePopUpPanel(event);'
    // onMouseOut='javascript:hoverDelete(this,event,false);' " +
    // "onMouseOver='javascript:hoverDelete(this,event,true);'>";
    var header = "<table cellpadding='2' width='248px' cellspacing='1' border='0' bordercolor='white' bgcolor='#e5ecf9'>" +
        "<tr><td width='199px'><b>" + symbol + "</b></td><td><img src='/images/" + morningstarRating + "SmallStars.gif" + "'></td></tr></table>";
    var img = "";
    var quote = "<table cellpadding='0' width='248px' cellspacing='1' border='0' bordercolor='white' bgcolor='#e5ecf9'>" +
        "<tr><td width='220px'><b>&nbsp;" + quote + "</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + img + "&nbsp;<font color='" + color + "'>" + change + "</font></td></tr></table>";
    var postHeader = "<table cellpadding='3' width='248px' cellspacing='0' border='0' bordercolor='white' bgcolor='#e5ecf9'>" +
        "<tr><td>&nbsp;Number Of Shares </td><td>" + numberOfShares + "</td><td> Value </td><td>" + totalValue + "</td></tr></table>";
    var rating = "<table cellpadding='2' width='248px' cellspacing='0' border='0' bordercolor='white' bgcolor='#FFE87C'>";
    rating += "<tr><td bgcolor='#eee8C6'></td><td align='center' bgcolor='#FFF8C6'><b>Return</b></td><td  bgcolor='#FFE87C' align='center'><b>Risk</b></td></tr>";
    rating += "<tr><td bgcolor='#eee8C6' align='right'>Performance</td><td align='center' bgcolor='#FFF8C6'>" + returnRating + "</td><td align='center' bgcolor='#FFE87C'>" + riskRating + "</td></tr>";
    rating += "</table>";
    var returns = "<table cellpadding='2' width='248px' cellspacing='0' border='0' bordercolor='white' bgcolor='#FFE87C'>";
    returns += "<tr><td bgcolor='#eee8C6'></td><td align='center'><b>To Date</b></td><td align='center' bgcolor='#FFF8C6' align='center'><b>1 Year</b></td><td align='center'><b>3 Years</b></td><td align='center' bgcolor='#FFF8C6'><b>5 Years</b></td></tr>";
    returns += "<tr><td align='right' bgcolor='#eee8C6'>Return</td><td align='center'>" + returnToDate + "</td><td align='center' bgcolor='#FFF8C6'>" + oneYearReturn + "</td><td align='center'>" + threeYearReturn + "</td><td align='center' bgcolor='#FFF8C6'>" + fiveYearReturn + "</td></tr>";
    returns += "</table>";
    // var footer = "<table cellpadding='1' width='248px' cellspacing='1'
    // border='0' bordercolor='white' bgcolor='#e5ecf9'>"+
    // "<tr><td width='228px'><div>&nbsp<font color='#0099CCF'
    // size=\"1\">Click to view profile</font></div></td></tr></table>";
    var footer = "<h2>Click for details</h2>";
    return "<div class=\"ToolTipBox\">" + header + quote + postHeader + rating + returns + footer + "</div>";
}

function getTypicalPopUpBlock(title, content) {
    var header = "<table cellpadding='2' width='188px' cellspacing='0' border='0' bordercolor='white'>" +
        "<tr><td width='188px'><div style='padding-bottom: 3px; padding-left: 3px; padding-top: 3px; border-bottom: 1px solid #dddddd; background: #eeeeee;'><b>" + title + "</b></div></td></tr></table>";
    var display = "<table cellpadding='2' width='188px' cellspacing='2' border='0' bordercolor='white'>" +
        "<tr><td width='188px'>" + content + "</td></tr></table>";
    // alert("<div class='ToolTipBox'>"+header+display+"</div>");
    return "<div class='ToolTipBox'>" + header + display + "</div>";
}

function getRoundedContent(content) {
    var str = "<b class=\"rTop\"><b class=\"rC1\"></b><b class=\"rC2\"></b><b class=\"rC3\"></b><b class=\"rC4\"></b></b>";
    str += "<div class=\"headerContent\">";
    str += content;
    str += "</div>";
    return str;
}

function processChartClick(var1, var2, var3, var4, var5, var6, var7) {
    // var t = var1;
    // alert (t);
}

function hoverZeroIndustrySelectionBlock(block, on, evt, symbol, numberOfShares, totalValue, quote, change, high, low, volume, time, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2) {
    if (on) {
        block.style.background = "#99CCFF";
        block.style.color = "white";
        showSymbolPopUp(block, evt, symbol, numberOfShares, totalValue, quote, change, high, low, volume, time, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2);
    } else {
        block.style.background = "transparent";
        block.style.color = "#8b9dc3";
        removePopUpPanel();
    }
}

function hoverPositiveIndustrySelectionBlock(block, on, evt, symbol, numberOfShares, totalValue, quote, change, high, low, volume, time, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2) {
    if (on) {
        var imageToggle = document.getElementById(symbol + "_bar");
        imageToggle.style.background = "url('../images/barPositive_selected.jpg')";
        block.style.background = "#99CCFF";
        block.style.color = "white";
        showSymbolPopUp(block, evt, symbol, numberOfShares, totalValue, quote, change, high, low, volume, time, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2);
    } else {
        var imageToggle = document.getElementById(symbol + "_bar");
        imageToggle.style.background = "url('../images/barPositive.jpg')";
        block.style.background = "transparent";
        block.style.color = "#8b9dc3";
        removePopUpPanel();
    }
}

function Left(elem) {
    var x = 0;
    if (elem.calcLeft)
        return elem.calcLeft;
    var oElem = elem;
    while (elem) {
        if ((elem.currentStyle) && (!isNaN(parseInt(elem.currentStyle.borderLeftWidth))) && (x != 0))
            x += parseInt(elem.currentStyle.borderLeftWidth);
        x += elem.offsetLeft;
        elem = elem.offsetParent;
    }
    oElem.calcLeft = x;
    return x;
}

function Top(elem) {
    var x = 0;
    if (elem.calcTop)
        return elem.calcTop;
    var oElem = elem;
    while (elem) {
        if ((elem.currentStyle) && (!isNaN(parseInt(elem.currentStyle.borderTopWidth))) && (x != 0))
            x += parseInt(elem.currentStyle.borderTopWidth);
        x += elem.offsetTop;
        elem = elem.offsetParent;
    }
    oElem.calcTop = x;
    return x;
}

function showFundPopUp(block, evt, symbol, quote,
    change, color, numberOfShares, totalValue, rank,
    managerTenure, morningstarRating, returnRating, riskRating, netAssets,
    turnoverPercentage, medianHolding, minimumInvestment,
    frontLoadPercentage, experationPercentage, returnToDate,
    oneYearReturn, threeYearReturn, fiveYearReturn) {
    var displayInfo = getFundDisplayBlock(block, evt, symbol, quote,
        change, color, numberOfShares, totalValue, rank,
        managerTenure, morningstarRating, returnRating, riskRating, netAssets,
        turnoverPercentage, medianHolding, minimumInvestment,
        frontLoadPercentage, experationPercentage, returnToDate,
        oneYearReturn, threeYearReturn, fiveYearReturn);
    var content = displayInfo;
    var searchTable = document.getElementById("mainPopUpArea");
    showPopUpPanel(block, content, -1, 20);
}

function highlightAddShares(on) {
    watchListTable = document.getElementById("watchListBanner")
    inputBox = document.getElementById("ns");
    if (on) {
        watchListTable.style.color = "#8b9dc3";
        inputBox.style.border = "2px solid #8b9dc3";
    } else {
        watchListTable.style.color = "#aaaaaa";
        inputBox.style.border = "2px solid #aaaaaa";
    }
}

function showSymbolPopUp(block, evt, symbol, numberOfShares, totalValue, quote, change, high, low, volume, target, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2) {
    var displayInfo = getSymbolDisplayBlock(symbol, numberOfShares, totalValue, quote, change, high, low, volume, target, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2);
    var content = displayInfo;
    var searchTable = document.getElementById("mainPopUpArea");
    // alert(block.style.border);
    // block.parentNode.style.border= "2px solid #8b9dc3";
    // block.innerHTML ="<div>asdf</div>";
    showPopUpPanel(block, content, -1, 26);
}

function hoverNegativeIndustrySelectionBlock(block, on, evt, symbol, numberOfShares, totalValue, quote, change, high, low, volume, target, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2) {
    if (on) {
        var imageToggle = document.getElementById(symbol + "_bar");
        imageToggle.style.background = "url('../images/barNegative_selected.jpg')";
        block.style.background = "#99CCFF";
        block.style.color = "white";
        showSymbolPopUp(block, evt, symbol, numberOfShares, totalValue, quote, change, high, low, volume, target, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2);
    } else {
        var imageToggle = document.getElementById(symbol + "_bar");
        imageToggle.style.background = "url('../images/barNegative.jpg')";
        block.style.background = "transparent";
        block.style.color = "#8b9dc3";
        removePopUpPanel();
    }
}

function hoverMinusIndustrySelectionBlock(block, on, evt, symbol, numberOfShares, totalValue, quote, change, high, low, volume, target, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2) {
    if (on) {
        var imageToggle = document.getElementById(symbol + "_bar");
        imageToggle.style.background = "url('../images/bar_selected.jpg')";
        block.style.background = "#99CCFF";
        block.style.color = "white";
        showSymbolPopUp(block, evt, symbol, numberOfShares, totalValue, quote, change, high, low, volume, target, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2);
    } else {
        var imageToggle = document.getElementById(symbol + "_bar");
        imageToggle.style.background = "url('../images/barMinus.jpg')";
        block.style.background = "transparent";
        block.style.color = "#8b9dc3";
        removePopUpPanel();
    }
}

function hoverPlusIndustrySelectionBlock(block, on, evt, symbol, numberOfShares, totalValue, quote, change, high, low, volume, target, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2) {
    if (on) {
        var imageToggle = document.getElementById(symbol + "_bar");
        imageToggle.style.background = "url('../images/bar_selected.jpg')";
        block.style.background = "#99CCFF";
        block.style.color = "white";
        showSymbolPopUp(block, evt, symbol, numberOfShares, totalValue, quote, change, high, low, volume, target, date, name, color, marketCap, bookValue, EBITDA, price1, price2, eps1, eps2, pe1, pe2);
    } else {
        var imageToggle = document.getElementById(symbol + "_bar");
        imageToggle.style.background = "url('../images/barPluss.jpg')";
        block.style.background = "transparent";
        block.style.color = "#8b9dc3";
        removePopUpPanel();
    }
}

function clickIndustrySelectionBlock(block, event, on) {
    var cellId = block.id;
    hiddenTip = false;
    showToolTip(event, block, cellId);
}

function hoverCorrelationCloudCellOff(id) {
    // var cell = document.getElementById(id);
    // cell.className = 'correlationCloudCell';
    // printToStatusBar(cell.className);
    hidePopUpPanel();
}

function hoverCorrelationCloudCellOn(id, first, second, corr, corrSize, corType, norp, color, isTable) {
    var cell = document.getElementById(id);
    title = "<font size='2' color='#8b9dc3'><b>" + norp + "</b></font>&nbsp;&nbsp;" +
        "<font size='4' color='" + color + "'><b>" + corType + "</b></font>";
    // alert(title);
    tip = "<div class='ui-widget-content ui-corner-all' style='border: 2px solid #8b9dc3; padding: 5px;'>" +
        "<table width='200' style='height: 50px;' cellpadding='3' cellspacing='3' border='0' bgcolor='#ffffff'>";
    tip += "<tr>" +
        "<td width='80px' valign='top' nowrap>" +
        "<div style='font-size: 3em;  padding: 2px; padding-bottom: 4px;'><font color='" + color + "' size='" + corrSize + "'><b>" + corr + "</b></font></div>" +
        "</td>" +
        "<td width='10px' nowrap>&nbsp;&nbsp;&nbsp;" +
        "</td>" +
        "<td valign='top' align='left' valign='middle' nowrap>" +
        "<div style='font-size: 1em; text-align:center;'>" + first + "</div>" +
        "<div style='font-size: 1em; text-align:center;'><b>vs</b></div>" +
        "<div style='font-size: 1em; text-align:center;'>" + second + "</div>" +
        "</td>" +
        "<td width='100%' nowrap>" +
        "</td>" +
        "</tr>" +
        "</table>" +
        "<div style='padding: 5px; padding-bottom: 2px;border-top: 1px dotted #dddddd;'>" +
        title + "</div></div>";
    if (isTable) {
        showPopUpPanel(cell, "<div style='padding:0px'>" + tip + "</div>", 1, 18);
    } else {
        showPopUpPanel(cell, "<div style='padding:0px'>" + tip + "</div>", 12, -62);
    }
    // alert(width);
    // cell.className = 'correlationCloudCellSelected';
    // printToStatusBar(cell.className);
    // alert(width);
}

function hoverCorrelationCell(block, event, on) {
    var cellId = block.id;
    var colId = cellId.substring(0, cellId.indexOf("_"));
    var rowId = cellId.substring(cellId.indexOf("_") + 1);
    var colBlock = document.getElementById("c_" + colId);
    var rowBlock = document.getElementById("r_" + rowId);
    if (on) {
        hiddenTip = false;
        colBlock.style.background = "#8b9dc3";
        rowBlock.style.background = "#8b9dc3";
        rowBlock.style.color = "#ffffff";
        colBlock.style.color = "#ffffff";
        block.style.color = "#ffffff";
        block.style.border = "2px solid #8b9dc3";
        var value = block.innerHTML;
        var valueStr = value;
        if (value < 0) {
            valueStr = "<font color='red'>" + value + "</font>";
        } else {
            valueStr = "<font color='green'>" + value + "</font>";
        }
        showToolTip(event, block, colId + " / " + rowId + "&nbsp;&nbsp;&nbsp;<b>" + valueStr + "</b><br><font color='#ffffff'><b>Click</b></font> to compare fundamentals");
    } else {
        hiddenTip = true;
        colBlock.style.background = "#FFFFFF";
        rowBlock.style.background = "#FFFFFF";
        rowBlock.style.color = "#8b9dc3";
        colBlock.style.color = "#8b9dc3";
        block.style.color = "#ffffff";
        block.style.border = "2px solid #ffffff";
        // hideddrivetip();
        hideCompareToolTip(event, block);
        hidePopUpPanel();
    }
}

function hoverCorrelationTotalCell(block, event, on) {
    var nameId = block.id;
    var valueId = nameId.substring(4);
    var valueBlock = document.getElementById(valueId + "_id");
    if (on) {
        valueBlock.style.background = "#0099CC";
        block.style.color = "#0099CC";
    } else {
        valueBlock.style.background = "#cccccc";
        block.style.color = "white";
    }
    var colId = valueId.substring(0, valueId.indexOf("_"));
    var rowId = valueId.substring(valueId.indexOf("_") + 1);
    var colBlock = document.getElementById("c_" + colId);
    var rowBlock = document.getElementById("r_" + rowId);
    if (on) {
        colBlock.style.background = "#8b9dc3";
        rowBlock.style.background = "#8b9dc3";
        rowBlock.style.color = "#FFFFFF";
        colBlock.style.color = "#FFFFFF";
    } else {
        colBlock.style.background = "#FFFFFF";
        rowBlock.style.background = "#FFFFFF";
        rowBlock.style.color = "#8b9dc3";
        colBlock.style.color = "#8b9dc3";
    }
}

function hoverSearchResultBlock(block, on) {
    hoverSingalSearchResultBlock(block, on);
    for (i = 0; i < 5; i++) {
        var otherB = document.getElementById("searchResult" + i);
        if (otherB) {
            hoverSingalSearchResultBlock(otherB, on);
        }
    }
}

function hoverSingalSearchResultBlock(block, on) {
    if (on) {
        block.style.background = "#99CCFF";
        block.style.color = "white";
    } else {
        block.style.background = "#e5ecf9";
        block.style.color = "#8b9dc3";
    }
}

function getFirstOptimizationDivId() {
    var optimizationBlock = document.getElementById("0_optimization_riskReturn");
    var optimizationBlockId;
    if (optimizationBlock == null) {
        for (i = 0; i < 5; i++) {
            var blockIdTest = i + "_optimization_riskReturn";
            optimizationBlock = document.getElementById(blockIdTest);
            if (optimizationBlock) {
                optimizationBlockId = blockIdTest;
                break;
            }
        }
    } else {
        optimizationBlockId = "0_optimization_riskReturn";
    }
    return optimizationBlockId;
}

function hoverSearchResultButton(block, on) {
    if (on) {
        block.style.background = "#99CCFF";
        block.style.color = "white";
    } else {
        block.style.background = "#e5ecf9";
        block.style.color = "#8b9dc3";
    }
}

function olddisplayToolTip(evt, sourceElem, toolTip) {
    positiontiponly(evt);
    showToolTip(evt, sourceElem, toolTip);
}

function hoverActionBlock(block, on, evt, toolTip) {
    if (on) {
        showToolTip(evt, block, toolTip);
    } else {
        // hideddrivetip();
    }
}

function hoverCompareResultRow(block, on, evt, symbol1, symbol2) {
    if (on) {
        // ddrivetip(this.getAttribute("tooltiptext"))
        block.style.background = "#99CCFF";
        block.style.color = "white";
        displayCompareToolTip(evt, block, symbol1, symbol2);
    } else {
        block.style.background = "#e5ecf9";
        block.style.color = "#8b9dc3";
        // hideddrivetip();
    }
}

function testValue(a) {
    alert(a);
}

function printToStatusBar(str) {
    window.status = str;
    return true;
}

function toggleModelError(symbolicId) {
    var popupMsg = document.getElementById("modelErrorsMessage" + symbolicId);
    btn = document.getElementById("modelErrorsMessageImage" + symbolicId);
    popupMsg.style.visibility = "visible";
    if (popupMsg.style.display == "block") {
        // popupMsg.style.display ="";
        // popupMsg.style.visibility = "hidden";
        $(popupMsg).slideUp(300);
        btn.src = "/images/viewModelRunDetails.gif";
    } else {
        // popupMsg.style.visibility = "visible";
        // popupMsg.style.display ="block";
        $(popupMsg).slideDown(300);
        btn.src = "/images/viewModelRunDetailsSelected.gif";
    }
}

function closeEnumPopUp(enumBoxId) {
    var popup = document.getElementById(enumBoxId);
    popup.style.display = "none";
}

function setEnumValue(valueHolderId, idValue, displayValue) {
    // alert(idValue);
    var l = document.getElementById(valueHolderId + "Enum");
    var v = document.getElementById(valueHolderId + "EnumInput");
    if (!v) {
        v = document.getElementById(valueHolderId);
    }
    closeEnumPopUp(valueHolderId + "EnumBox");
    if (l) {
        l.innerHTML = displayValue;
    }
    v.value = idValue;
}

function hoverAddSymbolButton(img, evt, symbol, on) {
    if (on) {
        var x = "";
        var n = document.getElementById("numberOfShares");
        if (n) {
            var val = n.value;
            if (val == "1") {
                x = "1 share of " + symbol + " ";
            } else {
                x = val + " shares of " + symbol + " ";
            }
        } else {
            x = symbol + " ";
        }
        showToolTip(evt, img, "Click to add <b>" + x + "</b><br>to your portfolio");
    } else {
        // hideddrivetip();
    }
}

function hoverCompanyImage(img, evt, on) {
    if (on) {
        img.src = "/images/macroaxis_logo_s.gif";
        // alert(getTypicalPopUpBlock("Macroaxis", "Real time interactive
        // <br>wealth management analytics"));
        // showPopUpPanel(img, getTypicalPopUpBlock("Macroaxis", "Real time
        // interactive <br>wealth management analytics"));
    } else {
        img.src = "/images/macroaxis_logo.gif";
        // hidePopUpPanel();
    }
}

function hoverRunImage(img, evt, on, pitchletName) {
    if (on) {
        img.src = "/images/runPitchlet_s.gif";
        showToolTip(evt, img, pitchletName + "<br><b>Click</b> to pitch this analytics");
    } else {
        img.src = "/images/runPitchlet.gif";
        // hideddrivetip();
    }
}

function isChild(s, d) {
    while (s) {
        if (s == d)
            return true;
        s = s.parentNode;
    }
    return false;
}

function getObj(objID) {
    if (document.getElementById) {
        return document.getElementById(objID);
    } else if (document.all) {
        return document.all[objID];
    } else if (document.layers) {
        return document.layers[objID];
    }
}

function hidePopUp(e, id) {
    CSE = evt.target ? evt.target : evt.srcElement;
    var pop = document.getElementById(id);
    if (pop) {
        if (CSE.className == "Icon") {
            return;
        }
        if (!isChild(CSE, pop)) {
            pop.style.display = 'none';
        }
    }
}

function hoverLogoutButton(img, evt, on) {
    if (on) {
        img.src = "/images/logout2_s.gif";
    } else {
        img.src = "/images/logout2.gif";
    }
}

function hoverLoginButton(img, evt, on) {
    if (on) {
        img.src = "/images/login2_s.gif";
    } else {
        img.src = "/images/login2.gif";
    }
}

function checkClick(e) {
    // alert(e);
    e ? evt = e : evt = event;
    CSE = evt.target ? evt.target : evt.srcElement;
    if (getObj('fc'))
        if (!isChild(CSE, getObj('fc')))
            getObj('fc').style.display = 'none';
    hidePopUp(e, 'benchmarkEnumBox');
    hidePopUp(e, 'ciEnumBox');
    hidePopUp(e, 'oldPopUp');
    hidePopUp(e, 'riskLevelEnumBox');
    hidePopUp(e, 'cashUsageEnumBox');
    hidePopUp(e, 'constraintEnumBox');
    hidePopUp(e, 'maxConstraintEnumBox');
    hidePopUp(e, 'riskFreeRateEnumBox');
    hidePopUp(e, 'minimumReturnEnumBox');
    hidePopUp(e, 'pitchletSelectorEnumBox');
    hidePopUp(e, 'industryEnumBox');
    hidePopUp(e, 'analyticsSelectorEnumBox');
    hidePopUp(e, 'analyticsSelectorEnumBox2');
    hidePopUp(e, 'portfolioManagerSelectorEnumBox');
    hidePopUp(e, 'marketBrosersSelectorEnumBox');
    hidePopUp(e, 'marketBrosersSelectorEnumBox2');
    hidePopUp(e, 'dynamicPopUpBox');
    hidePopUpPanel(e);
}
window.onerror = handleError; // safety net to trap all errors
function handleError(message, URI, line) {
    // alert the user that this page may not respond properly
    return true; // this will stop the default message
}

function clickFaq(id, img) {
    var thisImage = img;
    var box = document.getElementById("faq" + id);
    if (img.className == "faqHeader") {
        thisImage = document.getElementById("faq" + id + "Image");
    }
    // alert(box.style.display);
    if (box.style.display == "") {
        thisImage.src = "/images/hideFaq.gif";
        box.style.visibility = "visible";
        box.style.display = "block";
    } else {
        box.style.display = "";
        box.style.visibility = "hidden";
        thisImage.src = "/images/showFaq.gif";
    }
}

function hoverManageSymbol(img, evt, symbol, on) {
    if (on) {
        img.src = "/images/manageHovered_s.gif";
        showToolTip(evt, img, "<font color='#ffffff'><b>Click</b></font> <font color='#ffffff'>to manage <b>" + symbol + "</b></font>");
    } else {
        img.src = "/images/manageHovered.gif";
        // hideddrivetip();
    }
}

function hoverRebalancePortfolio(img, evt, symbol, on) {
    if (on) {
        img.src = "/images/rebalanceHovered_s.gif";
        showToolTip(evt, img, "<font color='#ffffff'><b>Click</b></font> <font color='#ffffff'>to rebalance<br><b>" + symbol + "</b></font>");
    } else {
        img.src = "/images/rebalanceHovered.gif";
        // hideddrivetip();
    }
}

function hoverBuilderLink(img, evt, symbol, on) {
    if (on) {
        img.src = "/images/go5.gif";
        showToolTip(evt, img, "<font color='#ffffff'><b>Use</b> trade triggers to rebalance </font><br><font color='#ffffff'><b>" + symbol + "</b></font>");
    } else {
        img.src = "/images/go5_s.gif";
        // hideddrivetip();
    }
}

function hoverSelectPortfolio(img, evt, symbol, on) {
    if (on) {
        img.src = "/images/go5.gif";
        showToolTip(evt, img, "<font color='#ffffff'>Click to use </font><br><font color='#ffffff'>portfolio <b>" + symbol + "</b></font>");
    } else {
        img.src = "/images/go5_s.gif";
        // hideddrivetip();
    }
}

function hoverOptimizePortfolio(img, evt, symbol, on) {
    if (on) {
        img.src = "/images/optimizeHovered_s.gif";
        showToolTip(evt, img, "<font color='#ffffff'><b>Click</b></font> <font color='#ffffff'>to optimize <br><b>" + symbol + "</b></font>");
    } else {
        img.src = "/images/optimizeHovered.gif";
        // hideddrivetip();
    }
}

function toggleSection(section1, section2) {
    var block1 = document.getElementById(section1);
    var block2 = document.getElementById(section2);
    if (!block1 || !block2) {
        return;
    }
    var style1 = block1.style;
    var style2 = block2.style;
    if (style1.display == "block") {
        style1.display = "none";
        style1.visibility = "hidden";
        style2.display = "block";
        style2.visibility = "visible";
    } else {
        style1.display = "block";
        style1.visibility = "visible";
        style2.display = "none";
        style2.visibility = "hidden";
    }
}

function submitForm(id_number) {
    eval('document.' + id_number + '.submit()');
}

function logMeIn(id_number) {
    eval('document.' + id_number + '.submit()');
    var newContainer = document.getElementById("container");
    newContainer.innerHTML = "<div class='pitchletProgress'>" +
        "Processing...<br>" +
        "Please allow few seconds to authenticate.</div>";
}

function logMeInGagdet(id_number) {
    // alert('ddd');
    eval('document.' + id_number + '.submit()');
    var newContainer = document.getElementById("container");
    newContainer.innerHTML = "<div class='pitchletProgress'>" +
        "Processing...<br>" +
        "Your Security is important to us. " +
        "Please allow few seconds to authenticate.</div>";
}

function toggleRememberMe() {
    var rmBlock = document.getElementById("rememberMeToggle");
    if (!rmBlock) {
        return;
    }
    var rmBlockStyle = rmBlock.style;
    if (rmBlockStyle.display == "block") {
        rmBlockStyle.display = "none";
        rmBlockStyle.visibility = "hidden";
    } else {
        rmBlockStyle.display = "block";
        rmBlockStyle.visibility = "visible";
    }
}

function toggleModelPortfolioInput() {
    var rmBlock = document.getElementById("modelPortfolioCheck");
    if (!rmBlock) {
        return;
    }
    var rmBlockStyle = rmBlock.checked;
    if (rmBlockStyle) {
        document.getElementById("modelPortfolio").disabled = false;
        document.getElementById("modelPortfolio").disabled = false;
        var but = document.getElementById("modelPopUpLink");
        but.style.background = "#dfe3ee";
        but.style.borderColor = "#aaaaaa";
        but.style.color = "#3B5998";
        // document.getElementById("modelPopArea").style.border= "2px solid
        // #eeeeee";
        document.getElementById("modelPortfolio").style.background = "#ffffff";
    } else {
        var but = document.getElementById("modelPopUpLink");
        but.style.borderColor = "#dddddd";
        but.style.color = "#3B5998";
        but.style.background = "#dddddd";
        document.getElementById("modelPortfolio").style.background = "#dddddd"
        document.getElementById("modelPortfolio").disabled = true;
        clearModelText();
    }
}

function closeResources(idname) {
    var helpDiv = document.getElementById(idname);
    helpDiv.innerHTML = "";
}

function checkCountry() {
    var country = document.getElementById('pcd');
    var cty = country.value;
    if (cty != 'US') {
        alert('International markets will be avaiable soon. Please keep checking back...');
        country.value = 'US';
    }
}

function noSymbolMessage() {
    var s = "Please specify valid symbol.";
    checkErrorMessageDialog("No Symbol Selected", s);
}

function activateMessage() {
    var s = "Your account is not active yet. You must activate your account before using our free services. " +
        "Please refer to the welcome email or go to your profile " +
        "section to activate your account.";
    checkErrorMessageDialog("Account Activation Error", s);
}

function maxPortfolio() {
    var s = "You have reached maximum number of portfolios in your account. " +
        "Please delete some of your existing portfolios to create more, or upgrade your account to premium license";
    checkErrorMessageDialog("License Warning", s);
}

function toggleTourImage(img, title, bodyTitle, body) {
    if (tourButton) {
        tourButton.className = "goButton";
    } else {
        buttonVar = document.getElementById("tourslide1");
        buttonVar.className = "goButton";
    }
    // alert(tourButton);
    tourButton = document.getElementById(img);
    // alert(tourButton);
    if (tourButton) {
        tourButton.className = "goButtonSelected";
    }
    var block = document.getElementById('tourImageBlock');
    block.innerHTML = "<img src='/images/slides/" + img + ".gif'>";
    block = document.getElementById('tourDescription');
    block.innerHTML = "<b><font color='gray'>" + bodyTitle + "</font></b><br /><br /><img align='absbottom' src='/images/quoteOpen.gif'><i>" + body +
        "</i><img align='right' src='/images/quoteClose.gif'>";
    block = document.getElementById('tourTitle');
    block.innerHTML = title;
}

function ScrollableTable(tableEl, tableHeight, tableWidth) {
    this.initIEengine = function() {
        alert(tableEl);
        this.containerEl.style.overflowY = 'auto';
        if (this.tableEl.parentElement.clientHeight - this.tableEl.offsetHeight < 0) {
            this.tableEl.style.width = this.newWidth - this.scrollWidth + 'px';
        } else {
            this.containerEl.style.overflowY = 'hidden';
            this.tableEl.style.width = this.newWidth + 'px';
        }
        if (this.thead) {
            var trs = this.thead.getElementsByTagName('tr');
            for (x = 0; x < trs.length; x++) {
                trs[x].style.position = 'relative';
                trs[x].style.setExpression("top", "this.parentElement.parentElement.parentElement.scrollTop + 'px'");
            }
        }
        if (this.tfoot) {
            var trs = this.tfoot.getElementsByTagName('tr');
            for (x = 0; x < trs.length; x++) {
                trs[x].style.position = 'relative';
                trs[x].style.setExpression("bottom", "(this.parentElement.parentElement.offsetHeight - this.parentElement.parentElement.parentElement.clientHeight - this.parentElement.parentElement.parentElement.scrollTop) + 'px'");
            }
        }
        eval("window.attachEvent('onresize', function () { document.getElementById('" + this.tableEl.id + "').style.visibility = 'hidden'; document.getElementById('" + this.tableEl.id + "').style.visibility = 'visible'; } )");
    };
    this.initFFengine = function() {
        alert(tableEl);
        this.containerEl.style.overflow = 'hidden';
        this.tableEl.style.width = this.newWidth + 'px';
        var headHeight = (this.thead) ? this.thead.clientHeight : 0;
        var footHeight = (this.tfoot) ? this.tfoot.clientHeight : 0;
        var bodyHeight = this.tbody.clientHeight;
        var trs = this.tbody.getElementsByTagName('tr');
        if (bodyHeight >= (this.newHeight - (headHeight + footHeight))) {
            this.tbody.style.overflow = '-moz-scrollbars-vertical';
            for (x = 0; x < trs.length; x++) {
                var tds = trs[x].getElementsByTagName('td');
                tds[tds.length - 1].style.paddingRight += this.scrollWidth + 'px';
            }
        } else {
            this.tbody.style.overflow = '-moz-scrollbars-none';
        }
        var cellSpacing = (this.tableEl.offsetHeight - (this.tbody.clientHeight + headHeight + footHeight)) / 4;
        this.tbody.style.height = (this.newHeight - (headHeight + cellSpacing * 2) - (footHeight + cellSpacing * 2)) + 'px';
    };
    this.tableEl = tableEl;
    this.scrollWidth = 16;
    this.originalHeight = this.tableEl.clientHeight;
    this.originalWidth = this.tableEl.clientWidth;
    this.newHeight = parseInt(tableHeight);
    this.newWidth = tableWidth ? parseInt(tableWidth) : this.originalWidth;
    this.tableEl.style.height = 'auto';
    this.tableEl.removeAttribute('height');
    this.containerEl = this.tableEl.parentNode.insertBefore(document.createElement('div'), this.tableEl);
    this.containerEl.appendChild(this.tableEl);
    this.containerEl.style.height = this.newHeight + 'px';
    this.containerEl.style.width = this.newWidth + 'px';
    var thead = this.tableEl.getElementsByTagName('thead');
    this.thead = (thead[0]) ? thead[0] : null;
    var tfoot = this.tableEl.getElementsByTagName('tfoot');
    this.tfoot = (tfoot[0]) ? tfoot[0] : null;
    var tbody = this.tableEl.getElementsByTagName('tbody');
    this.tbody = (tbody[0]) ? tbody[0] : null;
    if (!this.tbody) return;
    if (document.all && document.getElementById && !window.opera) this.initIEengine();
    if (!document.all && document.getElementById && !window.opera) this.initFFengine();
}

function getGoogleQuoteElement() {
    var e = document.getElementById("market_data_div");
    var obj = getSpanElementByClassName(e, "pr");
    obj = obj[0];
    return obj;
}

function getDivElementByClassName(clName) {
    var obj = getElementsByClassName(document, "div", clName);
    obj = obj[0];
    return obj;
}

function getSpanElementByClassName(rootElem, clName) {
    if (rootElem == null) {
        rootElem = document;
    }
    obj = getElementsByClassName(rootElem, "span", clName);
    obj = obj[0];
    return obj;
}

function getElementsByClassName(oElm, strTagName, oClassNames) {
    var arrElements = (strTagName == "*" && oElm.all) ? oElm.all : oElm.getElementsByTagName(strTagName);
    var arrReturnElements = new Array();
    var arrRegExpClassNames = new Array();
    if (typeof oClassNames == "object") {
        for (var i = 0; i < oClassNames.length; i++) {
            arrRegExpClassNames.push(new RegExp("(^|\\s)" + oClassNames[i].replace(/\-/g, "\\-") + "(\\s|$)"));
        }
    } else {
        arrRegExpClassNames.push(new RegExp("(^|\\s)" + oClassNames.replace(/\-/g, "\\-") + "(\\s|$)"));
    }
    var oElement;
    var bMatchesAll;
    for (var j = 0; j < arrElements.length; j++) {
        oElement = arrElements[j];
        bMatchesAll = true;
        for (var k = 0; k < arrRegExpClassNames.length; k++) {
            if (!arrRegExpClassNames[k].test(oElement.className)) {
                bMatchesAll = false;
                break;
            }
        }
        if (bMatchesAll) {
            arrReturnElements.push(oElement);
        }
    }
    return (arrReturnElements)
}
var map = null;
var geocoder = null;

function loadGoogleMap() {
    if (GBrowserIsCompatible()) {
        genericProgress(document.getElementById("map"));
        map = new GMap2(document.getElementById("map"));
        // map.setCenter(new GLatLng(37.4419, -122.1419), 13);
        geocoder = new GClientGeocoder();
        showAddress();
    }
}

function showPortfolioAddTip(str, t) {
    var vDiv = document.getElementById("t" + t);
    var rInput = document.getElementById("r" + t);
    if (vDiv != null && t != null) {
        // alert(t);
        vDiv0 = document.getElementById("t0");
        vDiv1 = document.getElementById("t1");
        vDiv2 = document.getElementById("t2");
        vDiv3 = document.getElementById("t3");
        vDiv4 = document.getElementById("t4");
        vDiv5 = document.getElementById("t5");
        vDiv6 = document.getElementById("t6");
        vDiv7 = document.getElementById("t7");
        // alert(vDiv7);
        // alert(vDiv.className);
        vDiv0.className = "createTemplate";
        vDiv1.className = "createTemplate";
        vDiv2.className = "createTemplate";
        vDiv3.className = "createTemplate";
        vDiv4.className = "createTemplate";
        vDiv5.className = "createTemplate";
        vDiv6.className = "createTemplate";
        vDiv7.className = "createTemplate";
        vDiv.className = "createTemplateSelected";
        // alert(vDiv.className);
        rInput.checked = "true";
    }
    v = document.getElementById("portfolioAddTip");
    v.innerHTML = str;
}

function showAddress(address) {
    if (address == null) {
        addressEl = document.getElementById("map_address");
        address = addressEl.value;
    }
    if (geocoder) {
        geocoder.getLatLng(
            address,
            (function(point) {
                if (!point) {
                    // alert(address);
                    document.getElementById("map").innerHTML = "<br><div style='text-align:center; color: #f60;'>Unable to locate this advisor on the map</div>";
                } else {
                    map.setCenter(point, 13);
                    var marker = new GMarker(point);
                    map.addOverlay(marker);
                    // marker.openInfoWindowHtml(address);
                    var mapTypeControl = new GMapTypeControl();
                    var topRight = new GControlPosition(G_ANCHOR_TOP_RIGHT, new GSize(10, 10));
                    var bottomRight = new GControlPosition(G_ANCHOR_BOTTOM_RIGHT, new GSize(10, 10));
                    map.addControl(mapTypeControl, bottomRight);
                    map.addControl(new GSmallMapControl());
                }
            })
        );
    }
}

function removeBodyProgress() {
    ptEl = document.getElementById('bodyProgress');
    if (ptEl) {
        ptEl.className = "";
        ptEl.innerHTML = "";
    }
    // $("#container").slideDown(1800);
}

function toggleDescription(s) {
    // alert(s);
    if (s) {
        s = "_" + s;
    } else {
        s = "";
    }
    img = document.getElementById("toggleId" + s);
    descBlock = document.getElementById("statSection_Profile" + s);
    // alert(img);
    // alert(descBlock);
    imgSrc = img.innerHTML;
    if (imgSrc.indexOf("descDown") > -1) {
        descLong = document.getElementById("longDescription" + s);
        descBlock.innerHTML = descLong.innerHTML;
        img.innerHTML = "less&nbsp;<img align='absbottom' src='/images/descUp.gif'>";
    } else {
        descShort = document.getElementById("shortDescription" + s);
        descBlock.innerHTML = descShort.innerHTML;
        img.innerHTML = "more&nbsp;<img align='absbottom' src='/images/descDown.gif'>";
    }
    // ptEl = document.getElementById(pitchType);
}

function toggleHomePitch(pitchType) {
    ptEl = document.getElementById(pitchType);
    var mainEl = document.getElementById("mainPitchBlock");
    mainEl.className = pitchType;
    var pt = ptEl.innerHTML;
    // alert(pt);
    var bEl = document.getElementById("pitchBlock");
    bEl.innerHTML = pt;
    // ptLogo = document.getElementById("homePitchImage");
    // ptLogo.className = pitchType+"Logo";
    var ptBn = document.getElementById("hostedPitchButton");
    ptBn.className = "homePitchButton";
    ptBn = document.getElementById("investorPitchButton");
    ptBn.className = "homePitchButton";
    ptBn = document.getElementById("advisorPitchButton");
    ptBn.className = "homePitchButton";
    ptBn = document.getElementById(pitchType + "Button");
    ptBn.className = "homePitchButtonSelected";
    // NLBfadeBg('homePitchBlock','#eeeeee','#ffffff','600');
}

function gotoPage(url) {
    if (url != '') {
        window.location = url;
    }
}

function openSeparatePage(url) {
    //top.location.href = url;
    window.open(url, "_blank");
}

function selectText(el) {
    el.focus();
    el.select();
}

function copyInput(elId) {
	var el = $("#"+elId);
    el.focus();
    el.select();
    document.execCommand('copy');
}

function copyWidgetToClipboard(el) {
    el.focus();
    el.select();
    document.execCommand('copy');
    popInfoMessageDialog("Your Widget Scriptlet is Copied", "You can now paste it into your HTML document. If you are using our free widget, please make sure to follow the proper attribution requirements specified below. Failure to provide attribution will immediately violate your license agreement.");
}

function fbConnect() {
    var uid = FB.Facebook.apiClient.get_session().uid;
    var profile = document.getElementById('yyy');
    profile.innerHTML = "<span><fb:profile-pic uid='loggedinuser'></fb:profile-pic></span>" +
        "<FORM name='fbConnect' METHOD=POST ACTION='/?pitch=connectSetup'>" +
        "<INPUT TYPE=hidden NAME='axis' value='" + uid + "'>" +
        "</FORM>";
    FB.XFBML.Host.parseDomTree();
    submitForm('fbConnect');
}

function popFeedback() {
    GSFN.feedback('http://getsatisfaction.com/macroaxis/feedback');
}

function getRandom(base) {
    var ranNum = Math.floor(Math.random() * base);
    return ranNum;
}

function openPortfolioHeader() {
    btnToggle = document.getElementById("portfolioHeaderToggle");
    headerBlock = document.getElementById("portfolioHeaderBlock");
    if (!btnToggle || !headerBlock) {
        return;
    }
    btnToggle.className = "colapsePortfolioHeader";
    headerBlock.style.display = "block";
    headerBlock.style.visibility = "visible";
    // alert(headerBlock);
    btnToggle = document.getElementById("titleScore");
    btnToggle.style.display = "none";
    btnToggle.style.visibility = "hidden";
    if (headerBlock) {
        refreshView = "";
        var v = document.getElementById("refreshView");
        if (v) {
            refreshView = v.value;
        }
        // if (refreshView != "myPortfolioBuilder") {
        // $( "#portfolioHeaderBlock" ).toggleClass(
        // "portfolioHeaderBlockSelected", 2000 );
        // }
    }
    //
    // var options = {};
    // $( "#portfolioHeaderBlock" ).show( "slide", options, 500,callback );
}

function callback() {
    setTimeout((function() {
        $("#portfolioHeaderBlock:visible").removeAttr("style").fadeOut();
    }), 1000);
};

function closePortfolioHeader() {
    btnToggle = document.getElementById("portfolioHeaderToggle");
    if (btnToggle == null) {
        return;
    }
    headerBlock = document.getElementById("portfolioHeaderBlock");
    if (headerBlock == null) {
        return;
    }
    btnToggle.className = "expandPortfolioHeader";
    headerBlock.style.display = "none";
    headerBlock.style.visibility = "hidden";
    btnToggle = document.getElementById("titleScore");
    btnToggle.style.display = "block";
    btnToggle.style.visibility = "visible";
    $("#portfolioHeaderBlock").toggleClass("portfolioHeaderBlock", 100);
}

function togglePortfolioHeader() {
    btnToggle = document.getElementById("portfolioHeaderToggle");
    headerBlock = document.getElementById("portfolioHeaderBlock");
    if (btnToggle.className == "expandPortfolioHeader") {
        openPortfolioHeader();
    } else {
        closePortfolioHeader();
    }
}

function setCookie(szName, szValue, szExpires, szPath, szDomain, bSecure) {
    var szCookieText = escape(szName) + '=' + escape(szValue);
    szCookieText += (szExpires ? '; EXPIRES=' + szExpires.toGMTString() : '');
    szCookieText += (szPath ? '; PATH=' + szPath : '');
    szCookieText += (szDomain ? '; DOMAIN=' + szDomain : '');
    szCookieText += (bSecure ? '; SECURE' : '');
    document.cookie = szCookieText;
}

function deleteCookie(szName) {
    var tmp = getCookie(szName);
    if (tmp) {
        setCookie(szName, tmp, (new Date(1)));
    }
}

function getModelInputString(type, value) {
    if (type == "riskLevel") {
        return getRiskLevelString(value);
    } else if (type == "cashUsage") {
        return getCashUsageString(value);
    } else if (type == "constraint") {
        return getMinConstraintString(value);
    } else if (type == "maxConstraint") {
        return getMaxConstraintString(value);
    } else if (type == "ci") {
        return getConfidenceIntervalString(value);
    } else if (type == "riskFreeRate") {
        return getRiskFreeRateString(value);
    } else if (type == "minimumReturn") {
        return getMinimumReturnString(value);
    } else if (type == "shortSellLevel") {
        return getShortSellLevelString(value);
    } else if (type == "dayRange") {
        return getTimeInterval(value);
    } else if (type == "valueType") {
        return getValueTypeString(value);
    } else if (type == "equityFilterPerformance") {
        return getFilterPerformanceString(value);
    } else if (type == "equityFilterDistress") {
        return getFilterDistressString(value);
    } else {
        return value;
    }
}

function getRiskLevelString(myInt) {
    var totalStyle = "";
    if (myInt == 100) {
        totalStyle = "I am willing to take <span class='modelValueCell'>any risk</span>";
    } else if (myInt >= 90) {
        totalStyle = "I love taking <span class='modelValueCell'>a lot of risk</span>";
    } else if (myInt >= 80) {
        totalStyle = "I am an <span class='modelValueCell'>aggressive</span> risk taker";
    } else if (myInt >= 70) {
        totalStyle = "I can tolerate <span class='modelValueCell'>above average</span> risk";
    } else if (myInt >= 60) {
        totalStyle = "I am an <span class='modelValueCell'>educated risk taker</span>";
    } else if (myInt > 50) {
        totalStyle = "I am an <span class='modelValueCell'>average risk taker</span>";
    } else if (myInt == 50) {
        totalStyle = "I am completely <span class='modelValueCell'>risk neutral</span>";
    } else if (myInt >= 40) {
        totalStyle = "I can tolerate <span class='modelValueCell'>below average</span> risk";
    } else if (myInt >= 30) {
        totalStyle = "I am an educated <span class='modelValueCell'>risk avoider</span>";
    } else if (myInt >= 20) {
        totalStyle = "I am a <span class='modelValueCell'>conservative</span> investor";
    } else if (myInt >= 10) {
        totalStyle = "I am a <span class='modelValueCell'>very conservative</span> investor";
    } else if (myInt > 0) {
        totalStyle = "I want to <span class='modelValueCell'>avoid any risk if possible</span>";
    } else if (myInt == 0) {
        totalStyle = "I want to <span class='modelValueCell'>avoid taking any risk</span>";
    }
    var riskPrefEl = document.getElementById("riskPref");
    if (riskPrefEl) {
        riskPrefEl.value = myInt;
        // alert(riskPrefEl.value);
    }
    return totalStyle;
}

function getValueTypeString(myInt) {
    var totalStyle = "";
    if (myInt == 0) {
        totalStyle = "Use Daily Prices";
    } else {
        totalStyle = "Use Daily Returns";
    }
    return totalStyle;
}

function getFilterDistressString(myInt) {
    var totalStyle = "";
    if (myInt == 0) {
        totalStyle = "Do <span class='modelValueCell'>not set</span> distress constraints";
    } else {
        totalStyle = "Use equities with less then <span class='modelValueCell'>" + myInt + "%</span> chance of distress";
    }
    return totalStyle;
}

function getFilterPerformanceString(myInt) {
    var totalStyle = "";
    if (myInt == 0) {
        totalStyle = "Do <span class='modelValueCell'>not set</span> performance constraints";
    } else {
        totalStyle = "Use equities with <span class='modelValueCell'>" + myInt + "</span> or above performance score";
    }
    return totalStyle;
}

function getMinConstraintString(myInt) {
    var totalStyle = "";
    if (myInt == 0) {
        totalStyle = "Do <span class='modelValueCell'>not set</span> minimum weight constraints";
    } else {
        totalStyle = "Invest at least <span class='modelValueCell'>" + myInt + "%</span> in each asset";
    }
    return totalStyle;
}

function getMaxConstraintString(myInt) {
    var totalStyle = "";
    if (myInt == 100) {
        totalStyle = "Do <span class='modelValueCell'>not set</span> maximum weight constraints";
    } else {
        totalStyle = "Invest no more than <span class='modelValueCell'>" + myInt + "%</span> in each asset";
    }
    return totalStyle;
}

function getConfidenceIntervalString(myInt) {
    return "I prefer to use <span class='modelValueCell'>" + (myInt) + "%</span> confidence interval";
}

function getRiskFreeRateString(myInt) {
    if (myInt == 0) {
        return "Ignore risk free rate";
    }
    return "Assume <span class='modelValueCell'>" + myInt + "%</span> daily risk free rate";
}

function getShortSellLevelString(myInt) {
    if (myInt == 0) {
        return "Do not short sell any of my assets";
    }
    return "Short sell some assets if possible";
}

function getMinimumReturnString(myInt) {
    if (myInt < 0) {
        return "Do <span class='modelValueCell'>not set</span> any return constraints";
    } else if (myInt == 0) {
        return "Use all assets with <span class='modelValueCell'>positive expected returns</span>";
    }
    return "Ignore assets with less than <span class='modelValueCell'>" + myInt + "%</span> expected return";
}

function getLicensedHorizonRange(selectedRange) {
    var needsLicenseEl = document.getElementById("needsLicense");
    var needsLoginEl = document.getElementById("needsLogin");
    // alert(selectedRange+" needs: "+needsLoginEl.value);
    if (needsLoginEl) {
        if (selectedRange <= 1) {
            return selectedRange;
        } else {
            return 1;
        }
    } else {
        return selectedRange;
    }
}

function getTimeInterval(myInt) {
    isLicensed = true;
    isLoggedIn = true;
    var needsLogginEl = document.getElementById("needsLogin");
    var needsLicenseEl = document.getElementById("needsLicense");
    // alert(needsLogginEl);
    if (myInt > 1 && needsLogginEl) {
        if (needsLogginEl) {
            if (myInt <= 1) {
                isLoggedIn = true;
            } else {
                isLoggedIn = false;
                myInt = 1;
            }
        } else {
            isLoggedIn = true;
        }
    }
    var totalStyle = "";
    if (!isLoggedIn) {
        totalStyle = "Sign In Required"
    } else if (!isLicensed) {
        totalStyle = "Upgrade Required"
    }
    // alert(historyUpgradeDiv);
    if (isLicensed && isLoggedIn) {
        if (myInt == 0) {
            totalStyle = "<span class='modelValueCell'>2</span>&nbsp;&nbsp;Weeks";
        } else if (myInt == 1) {
            totalStyle = "<span class='modelValueCell'>30</span>&nbsp;&nbsp;Days";
        } else if (myInt == 12) {
            totalStyle = "<span class='modelValueCell'>1</span>&nbsp;&nbsp;Year";
        } else if (myInt == 24) {
            totalStyle = "<span class='modelValueCell'>2</span>&nbsp;&nbsp;Years";
        }
        // else if (myInt == 36) {
        // totalStyle= "<span class='modelValueCell'>3</span>&nbsp;&nbsp;Years or more";
        // }
        else {
            totalStyle = "<span class='modelValueCell'>" + myInt + "</span>&nbsp;&nbsp;Months";
        }
    }
    var dayRangeEl = document.getElementById("timePref");
    if (dayRangeEl) {
        dayRangeEl.value = myInt;
    }
    return totalStyle;
}

function getCashUsageString(myInt) {
    var totalStyle = "";
    if (myInt == 100) {
        totalStyle = "Invest <span class='modelValueCell'>all 100%</span> of my cash";
    } else if (myInt == 0) {
        totalStyle = "<span class='modelValueCell'>Do not re-invest</span> my cash";
    } else {
        totalStyle = "Invest <span class='modelValueCell'>" + myInt + "%</span> of my cash position";
    }
    return totalStyle;
}

function popUpScoreInfoDialog(symbol) {
    // alert(symbol);
    // var scoreBody = document.getElementById("scoreBodyBlock");
    // alert(symbol+" "+scoreBody);
    var buttonGo = "";
    var moreInfo =
        "<a class='underlinedLink' href='/invest/macroaxisScoreInfo'>More Information</a>" +
        "<div style='height:8px;'></div>";
    // alert(buttonGo);
    var scoreBody = "<div style=\"text-align: left;\"><h2 style=\"padding-top:0px;\">Performance evaluation methodology</h2>" +
        "<div style='padding:2px;font-size:12px;'>Macroaxis grades portfolios and equities in two separate categories</div>" +
        "<h3 style=\"text-align: left;\">1. Risk-Adjusted Performance Score</h3>" +
        "<div style='padding:2px;font-size:12px;'>Relative market performance <b>score</b> is an " +
        "integer <strong>between 0 and 100</strong>. " +
        "For individual equities the formula is " +
        "based on multiple <b>non</b>-fundamental factors including expected return and market volatility, " +
        "industry specifications, most recent price movement and media hype as well as types of securities that compose user portfolios. " +
        "For portfolios of equities this score is generated from placing the portfolio it on the efficient frontier and comparing it against " +
        "the current <strong>Most Efficient Portfolio</strong> that is found on the Efficient Frontier. " +
        "Within this framework the scores of individual equity instruments" +
        " will always be inferior to the scores of portfolios of equities " +
        "as portfolios typically diversify most of unsystematic risk away." +
        "</div>" +
        "<h3 style=\"text-align: left;\">2. Chance of Financial Distress</h3>" +
        "<div style='padding:2px;font-size:12px;'>" +
        "This score is used to predict probability of a firm, fund, or ETF experiencing financial distress " +
        "in the next 24 months. For stocks, the formula is based on Altman Z-Score. For funds and ETFs it is based on " +
        "a fundamental model developed by Macroaxis. " +
        "In both cases the methodology is based on " +
        "simple, linear, multi-factor function that measures " +
        "the financial health and economic stability of a company fund or ETF based on <b>fundamental</b> factors." +
        "<br/><br/>" + moreInfo + "</div></div>";
    Swal.fire({
        title: "",
        width: 600,
        html: scoreBody,
        allowEscapeKey: false,
        allowOutsideClick: false,
        showOKButton: true,
        confirmButtonColor: "#cccccc",
        confirmButtonText: "Close"
    }, (function() {}));
}

function popUpSelectPortfolioDialog(e, element) {
    var content = document.getElementById('portfolioPopUp');
    document.getElementById('selectPortfolioDialog').innerHTML = content.innerHTML;
    $("#selectPortfolioDialog").dialog({
        modal: true,
        show: 'fade',
        width: 570,
        maxWidth: 600,
        height: 'auto',
        fluid: true, // new option
        draggable: false,
        autoOpen: false,
        title: "Select Portfolio",
        buttons: {
            Ok: function() {
                $(this).dialog('close');
            }
        }
    });
    decorateOkButton();
    $('#selectPortfolioDialog').dialog('open');
    updateFilters();
}

function showIndicatorPopUpBox(e, title, pid) {
    var content = document.getElementById(pid);
    // alert(content.innerHTML);
    document.getElementById('modelDialog').innerHTML = content.innerHTML;
    $("#modelDialog").dialog({
        modal: true,
        show: 'fade',
        width: 460,
        maxWidth: 600,
        height: 'auto',
        fluid: true, // new option
        draggable: false,
        autoOpen: false,
        title: title,
        buttons: {
            Ok: function() {
                $(this).dialog('close');
            }
        }
    });
    decorateOkButton();
    $('#modelDialog').dialog('open');
}

function showFundamentalsPopUpBox(e, title, pid) {
    var content = document.getElementById(pid);
    // alert(content.innerHTML);
    // document.getElementById('modelDialog').innerHTML="<h1>"+title+"</h1>"+content.innerHTML;
    Swal.fire({
        title: title,
        html: content.innerHTML,
        showCancelButton: false,
        allowEscapeKey: false,
        allowOutsideClick: false,
        confirmButtonText: "Close",
    }, (function() {}));
    // $("#modelDialog").dialog({
    // modal: true,
    // width: 650,
    // height: 'auto',
    // fluid: true, //new option
    // show: 'slide',
    // draggable: false,
    // autoOpen: false,
    // buttons: {
    //			
    // Close: function() {
    // $(this).dialog('close');
    // }
    // }
    // });
    //		
    // decorateOkButton();
    // $('#modelDialog').dialog('open');
    // removeDialogTitle("#modelDialog");
    // $('#modelDialog').dialog('open');
}

function popUpModelPortfolioDialog(e) {
    // alert($("#dialog"));
    var rmBlock = document.getElementById("modelPortfolioCheck");
    if (!rmBlock) {
        return;
    }
    var rmBlockStyle = rmBlock.checked;
    if (!rmBlockStyle) {
        popErrorMessageDialog("Model Input Disabled", "Please enable your model portfolio input to specify model portfolio or ideas");
    } else {
        var content = document.getElementById('modelPortfolioPopUp');
        // alert(content.innerHTML);
        var text = content.innerHTML;
        // document.getElementById('modelDialog').innerHTML="<h2>Add symbols
        // from model portfolios or ideas</h2>"+content.innerHTML;
        Swal.fire({
            title: "<h3 style=\"text-align:left;\">Add symbols from model portfolios or themes</h3>",
            width: 700,
            html: text,
            showOKButton: true,
            allowEscapeKey: false,
            allowOutsideClick: false,
            confirmButtonColor: "#cccccc",
            confirmButtonText: "Close"
        }, (function() {}));
        // $("#modelDialog").dialog({
        // modal: true,
        // width: 850,
        // height: 600,
        // fluid: true, //new option
        // show: 'slide',
        // hide: "slide", //put the fade effect
        // draggable: false,
        // autoOpen: false,
        // //title: "Add symbols from model portfolios or themes",
        // buttons: {
        //				
        // Close: function() {
        // $(this).dialog('close');
        // }
        // }
        // });
        // decorateOkButton();
        // $("#modelDialog").dialog("option", "position", [e.pageX+64]);
        // removeDialogTitle("#modelDialog");
        // $('#modelDialog').dialog('open');
        updateFilters();
    }
}

function popChangeCountryDialog() {
    //alert('a');
    var postData = "/countrySelectorIncludePopUp.jsp";
    $.get({
        url: postData
    }).done((function(data) {
        swal.queue([{
            title: "Update Country",
            html: "<div id='countryContent'></div>",
            footer: "Select your default market and click 'update' button",
            confirmButtonText: 'Update',
            confirmButtonColor: "green",
            showCancelButton: true,
            popup: 'swal2-show',
            width: 330,
            backdrop: 'swal2-backdrop-show',
            icon: 'swal2-icon-show',
            showConfirmButton: true,
            allowEscapeKey: false,
            allowOutsideClick: false,
            cancelButtonColor: "#aaa",
            type: "question",
            showLoaderOnConfirm: true,
            preConfirm: function() {
                return new Promise(function(resolve) {
                    var countryInput = document.getElementById('country');
                    var postTo = "/login?action=updateCountry&pcd=";
                    if (countryInput != null) {
                        var countryInputValue = countryInput.value;
                        postTo += countryInputValue;
                    }
                    $.post(postTo, (function(data) {
                        if (data == "done") {
                            Swal.fire({
                                title: "Updated",
                                footer: "Your default country was updated!",
                                type: "success",
                                allowEscapeKey: true,
                                allowOutsideClick: true,
                                confirmButtonText: "OK",
                                showCancelButton: false,
                                confirmButtonColor: "green"
                            }).then((result) => {
                                window.location.reload();
                            })
                        } else {
                            Swal.fire({
                                title: "Error!",
                                text: "Unable to update your country!",
                                type: "error",
                                showConfirmButton: false,
                                allowOutsideClick: true,
                                timer: 3500
                            })
                        }
                    }))
                })
            }
        }]).catch(swal.noop);
        //alert('a');
        $("#countryContent").html(data);
    }));
}

function popChangeHorizonDialog() {
    var postData = "/horizonSelectorIncludePopUp.jsp";
    $.get({
        url: postData
    }).done((function(data) {
        swal.queue([{
            title: "Update Horizon",
            html: "<div id='horiContent'></div>",
            confirmButtonText: 'Update',
            confirmButtonColor: "green",
            showCancelButton: true,
            popup: 'swal2-show',
            width: 340,
            backdrop: 'swal2-backdrop-show',
            icon: 'swal2-icon-show',
            showConfirmButton: true,
            allowEscapeKey: false,
            allowOutsideClick: false,
            cancelButtonColor: "#aaa",
            type: "question",
            showLoaderOnConfirm: true,
            preConfirm: function() {
                return new Promise(function(resolve) {
                    var dayRange = document.getElementById('dayRange');
                    var postTo = "/act.ma?action=updateHorizon&dayRange=";
                    if (dayRange != null) {
                        var dayRangeValue = dayRange.value;
                        postTo += dayRangeValue;
                    }
                    $.post(postTo, (function(data) {
                        if (data == "done") {
                            Swal.fire({
                                title: "Updated",
                                footer: "Your current investment horizon was updated!",
                                type: "success",
                                allowEscapeKey: true,
                                allowOutsideClick: true,
                                confirmButtonText: "OK",
                                showCancelButton: false,
                                confirmButtonColor: "green"
                            }).then((result) => {
                                window.location.reload();
                            })
                        } else {
                            Swal.fire({
                                title: "Error!",
                                text: "Unable to update your horizon!",
                                type: "error",
                                showConfirmButton: false,
                                allowOutsideClick: true,
                                timer: 3500
                            })
                        }
                    }))
                })
            }
        }]).catch(swal.noop);
        //alert('a');
        $("#horiContent").html(data);
    }));
}

function initHorizonSlider() {
    //alert('c');
    $('#nstSliderHorizon').nstSlider({
        "left_grip_selector": ".leftGrip",
        "value_bar_selector": ".bar",
        "value_changed_callback": function(cause, leftValue, rightValue) {
            var $container = $(this).parent();
            processHorizonValue($container, leftValue);
            //alert('d');
        }
        //alert('d');
    });
}

function updateHorizonSlider() {
    //alert('c');
    $('#nstSliderHorizon').nstSlider({
        "left_grip_selector": ".leftGrip",
        "value_bar_selector": ".bar",
        "value_changed_callback": function(cause, leftValue, rightValue) {
            var $container = $(this).parent();
            processHorizonValue($container, leftValue);
            //alert('d');
        },
        "user_mouseup_callback": function(value, oldValue, rv) {
            var l = replaceUrlParam(location.href, "dayRange", value);
            location.href = l;
            //alert('d');
        }
        //alert('d');
    });
}

function popUpPortfolioEditDialog(pid) {
    var postData = "/changePortfolio.jsp?xd=" + pid;
    $.ajax({
        async: false,
        url: postData
    }).done((function(data) {
        Swal.fire({
            title: "",
            html: data,
            width: 600,
            showCancelButton: true,
            confirmButtonText: "Submit",
            allowEscapeKey: true,
            allowOutsideClick: false,
            confirmButtonColor: "green"
        }).then((function() {
            addPortfolio();
        }));
    }));
    updateFilters();
}

function popUpPortfoliosFilterDialog() {
    postData = "/filterPortfolios.jsp";
    var v = document.getElementById("refreshView");
    refreshView = "portfolioDashboard";
    if (v) {
        refreshView = v.value;
    }
    postData = postData + "?refreshView=" + refreshView;
    updateFilters();
    $("#modal-content-filter").load(postData);
    var color = "lightblue";
    $('#modalFilter').attr('data-modal-color', color);
    $('#modalFilter').modal('show');
    updateFilters();
}

function popUpBacktestingDialog(backtestUrl) {
    // $("#backTestDialog").dialog("destroy");
    var spinner = "<div class='performenceProgress'><br />" +
        "<br /><br />" +
        "<b>Processing</b><br />Generating backtesting data. Please wait...</div>";
    document.getElementById('backTestDialog').innerHTML = spinner;
    // alert(backtestUrl);
    $("#backTestDialog").dialog({
        bgiframe: true,
        autoOpen: false,
        modal: true,
        width: 890,
        maxWidth: 600,
        height: 'auto',
        fluid: true, // new option
        title: "Backtest Portfolio",
        buttons: {
            Close: function() {
                $(this).dialog('close');
            }
        }
    });
    // document.getElementById('backTestDialog').innerHTML=backtestUrl;
    $('#backTestDialog').dialog('open');
    $("#backTestDialog").load(backtestUrl);
    decorateOkButton();
}

function popUpSymbolDialog() {
    // $( "#actionRadioBlock" ).buttonset();
    // $( "#actionRadioBlock" ).buttonset();
    $("#pdate").datepicker({
        maxDate: '0',
        beforeShowDay: $.datepicker.noWeekends
    });
    $("#addSymbolDialog").dialog({
        bgiframe: false,
        autoOpen: true,
        show: 'fade',
        modal: true,
        width: 982,
        height: 766,
        fluid: true, // new option
        buttons: {
            Cancel: function() {
                $(this).dialog('close');
            },
            Ok: function() {
                addSymbol();
                $(this).dialog('close');
            }
        }
    });
    decorateOkButton();
    $('#addSymbolDialog').dialog('open');
    removeDialogTitle("#addSymbolDialog");
    $("#actionRadioBlock").buttonset();
    // $("#portfolioCombo").combobox();
}

function popUpShareDialog() {
    $("#shareDialog").dialog({
        bgiframe: true,
        autoOpen: false,
        modal: true,
        width: 900,
        maxWidth: 600,
        height: 'auto',
        fluid: true, // new option
        show: 'slide',
        buttons: {
            Cancel: function() {
                $(this).dialog('close');
            }
        }
    });
    $('#shareDialog').dialog('open');
    removeDialogTitle("#shareDialog");
}

function popQuickImportHelpDialog() {
    $("#quickImportHelpDialog").dialog({
        bgiframe: true,
        autoOpen: false,
        modal: true,
        width: 500,
        maxWidth: 600,
        height: 'auto',
        fluid: true, // new option
        buttons: {
            Ok: function() {
                $(this).dialog('close');
            }
        }
    });
    $('#quickImportHelpDialog').dialog('open');
}

function validatePortfolioInput() {
    var nameEl = document.getElementById("pnd");
    var methodEl = document.getElementById("useEmpty");
    var budEl = document.getElementById("pBudget");
    if (nameEl.value.trim() == "") {
        popErrorMessageDialog("Portfolio Error", "Please specify name of your portfolio", null);
        return false;
    }
    return true;
}

function popImportHelpDialog() {
    $("#importHelpDialog").dialog({
        bgiframe: true,
        autoOpen: false,
        modal: true,
        width: 650,
        maxWidth: 600,
        height: 'auto',
        fluid: true, // new option
        buttons: {
            Ok: function() {
                $(this).dialog('close');
            }
        }
    });
    $('#importHelpDialog').dialog('open');
}

function dummy() {
    // nothing
}

function decorateOkButton() {
    $("div[role=dialog] button:contains('Close')").css("background", "#35586C");
    $("div[role=dialog] button:contains('Close')").css("color", "white");
    $("div[role=dialog] button:contains('Close')").css("class", "btn-success");
    $("div[role=dialog] button:contains('Close')").css("border", "1px solid black;");
    // $("div[role=dialog] button:contains('Close')").css("border", "1px solid
    // #8b9dc3");
    $("div[role=dialog] button:contains('Ok')").css("background", "#35586C");
    $("div[role=dialog] button:contains('Ok')").css("color", "white");
    $("div[role=dialog] button:contains('Ok')").css("color", "white");
    $("div[role=dialog] button:contains('Ok')").css("border", "1px solid black;");
    // $("div[role=dialog] button:contains('Ok')").css("border", "1px solid
    // #8b9dc3");
}

function popUpPortfolioSimpleDialog() {
    $("#portfolioDialog").dialog({
        bgiframe: true,
        autoOpen: true,
        modal: true,
        width: 800,
        maxWidth: 600,
        height: 550,
        fluid: true, // new option
        show: 'fade',
        buttons: {
            Ok: function() {
                // var opt = document.getElementById("pot");
                if (criatePortfolioType == 0 || criatePortfolioType == 3 || criatePortfolioType == 2 || criatePortfolioType == 1 || criatePortfolioType == 4) {
                    if (validatePortfolioInput()) {
                        // setTimeout("dummy();",1000)
                        $("#portfolioDialog").dialog("close");
                        addPortfolioSimple();
                    }
                } else {
                    alert("Your license does not allow this feature. Please upgrade");
                }
            },
            Cancel: function() {
                $(this).dialog('close');
            }
        }
    });
    decorateOkButton();
    // initializePortfolioSlider();
    // setTimeout("initializePortfolioSlider()",1);
    $('#portfolioDialog').dialog('open');
    removeDialogTitle("#portfolioDialog");
    // updateFilters();
}

function popUpExportAsImageDialog() {
    $("#chartImage").dialog({
        bgiframe: true,
        autoOpen: true,
        modal: true,
        width: 640,
        height: 'auto',
        fluid: true, // new option
        buttons: {
            Close: function() {
                document.getElementById('chartImageBody').innerHTML = '';
                document.getElementById('downloadAsImage').innerHTML = '';
                $(this).dialog('close');
            }
        }
    });
    decorateOkButton();
    // initializePortfolioSlider();
    // setTimeout("initializePortfolioSlider()",1);
    $('#chartImage').dialog('open');
    removeDialogTitle("#chartImage");
}

function popUpStartOptimizationDialog(pid) {
    var text = $("#startOptimizationDialog").html();
    //	
    // $("#startOptimizationDialog").dialog({
    // autoOpen: true,
    // modal: true,
    // show: 'fade',
    // width:700,
    // height: 630,
    // fluid: true, //new option
    // buttons: {
    //			
    // Cancel: function() {
    // $(this).dialog('close');
    //				
    // }
    // }
    // });
    //	
    // $('#startOptimizationDialog').dialog('open');
    // removeDialogTitle('#startOptimizationDialog');
    //	
    Swal.fire({
        title: "",
        width: 560,
        html: text,
        showOKButton: true,
        allowEscapeKey: false,
        allowOutsideClick: false,
        confirmButtonColor: "#cccccc",
        confirmButtonText: "Close"
    }, (function() {}));
}

function popUpFollowEquityDialog(symbol, name) {
    //alert(symbol);
    addEquityToWatchList(symbol, name, null);
}

function initializePortfolioSlider() {}

function popUpSuggestionDialog(idOfContent) {
    $("#dialog").dialog({
        bgiframe: true,
        autoOpen: false,
        modal: true,
        width: 760,
        height: 'auto',
        fluid: true, // new option
        buttons: {
            Ok: function() {
                $(this).dialog('close');
            }
        }
    });
    $('#dialog').dialog('open');
}

function mergePortfolio(pidThis) {
  
	var pidMerge = -1;
    var selectedNameS = "";
    var pidD = document.getElementById("selectedPortfolioId");
    pidMerge = pidD.value;
    selectedNameS = $('#selectedPortfolioName').text();
    //alert(selectedNameS);
    if (!pidMerge || pidMerge == null || pidMerge == "null" || selectedNameS == "Select Portfolio") {
        popErrorMessageDialog("Select Your Portfolio", "Please select one of your portfolio to merge from", null);
        return;
    }
   
    var postData = "/act.ma?action=pMerge&xd=" + pidThis+"&xdm="+pidMerge;
   // alert(selectedNameS);
    swal.queue([{
        title: "You are merging " + selectedNameS,
        confirmButtonText: 'Yes, Go ahead!',
        confirmButtonColor: "green",
        showCancelButton: true,
        showConfirmButton: true,
        allowEscapeKey: false,
        allowOutsideClick: false,
        cancelButtonColor: "#aaa",
        type: "question",
        footer: "This will merge all positions from portfolio '" + selectedNameS + "' to this portfolio",
        showLoaderOnConfirm: true,
        preConfirm: function() {
            return new Promise(function(resolve) {
                $.get(postData)
                    .done((function(data) {
                        if (data.startsWith("Error:")) {
                            Swal.fire({
                                title: "Error",
                                footer: data,
                                type: "error",
                                showConfirmButton: false,
                                allowOutsideClick: true,
                                timer: 3500
                            })
                        } else {
                            Swal.fire({
                                title: "Portfolio Merged",
                                footer: "The portfolio was succesfully merged from " + selectedNameS,
                                type: "success",
                                allowEscapeKey: false,
                                allowOutsideClick: false,
                                cancelButtonText: "Continue Merging",
                                showCancelButton: true,
                                confirmButtonText: "View Portfolio",
                                confirmButtonColor: "green",
                            }).then((result) => {
                                // alert(data);
                                if (result.value) {
                                    goToPortfolioManager(pidThis);
                                } else {
                                    window.location.reload();
                                }
                            })
                        }
                    }))
            })
        }
    }]).catch(swal.noop);
}

function clonePortfolio(pid) {
    var nE = document.getElementById("pnm");
    var dE = document.getElementById("pdesc");
    var nameV = nE.value;
    var descV = dE.value;
    var selectedNameS = "";
    //if (!pid || pid == null || pid == "null") {
        var pidD = document.getElementById("selectedPortfolioId");
        if (pidD) {
        	pid = pidD.value;
        }
    //}
    selectedNameS = $('#selectedPortfolioName').text();
    // alert(selectedNameS);
    if (!pid || pid == null || pid == "null" || selectedNameS == "Select Portfolio") {
        popErrorMessageDialog("Select Your Portfolio", "Please select one of your portfolio to clone", null);
        return;
    }
    if (selectedNameS) {
        if (selectedNameS.length > 20) {
            selectedNameS = selectedNameS.substring(0, 20) + "...";
        }
    }
    // alert(nameV +" "+descV);
    // $(this).dialog('close');
    var postData = "/act.ma?action=pClone&xd=" + pid +
        "&nm=" + nameV +
        "&desc=" + descV;
    swal.queue([{
        title: "You are cloning " + selectedNameS,
        confirmButtonText: 'Yes, Go ahead!',
        confirmButtonColor: "green",
        showCancelButton: true,
        showConfirmButton: true,
        allowEscapeKey: false,
        allowOutsideClick: false,
        cancelButtonColor: "#aaa",
        type: "question",
        footer: "This will add new portfolio called '" + nameV + "' to your active account",
        showLoaderOnConfirm: true,
        preConfirm: function() {
            return new Promise(function(resolve) {
                $.get(postData)
                    .done((function(data) {
                        if (data.startsWith("Error:")) {
                            Swal.fire({
                                title: "Error",
                                footer: data,
                                type: "error",
                                showConfirmButton: false,
                                allowOutsideClick: true,
                                timer: 3500
                            })
                        } else {
                            Swal.fire({
                                title: "New Portfolio Created",
                                footer: "The portfolio " + nameV + " was succesfully cloned from " + selectedNameS,
                                type: "success",
                                allowEscapeKey: false,
                                allowOutsideClick: false,
                                cancelButtonText: "Continue Cloning",
                                showCancelButton: true,
                                confirmButtonText: "View New Portfolio",
                                confirmButtonColor: "green",
                            }).then((result) => {
                                // alert(data);
                                if (result.value) {
                                    goToPortfolioManager(data);
                                } else {
                                    window.location.reload();
                                }
                            })
                        }
                    }))
            })
        }
    }]).catch(swal.noop);
}

function clonePortfolioOld(pid) {
    showProgressDialog();
    var nE = document.getElementById("pnm");
    var dE = document.getElementById("pdesc");
    nameV = nE.value;
    descV = dE.value;
    if (!pid || pid == null || pid == "null") {
        var pidD = document.getElementById("selectedPortfolioId");
        pid = pidD.value;
    }
    if (!pid || pid == null || pid == "null") {
        popErrorMessageDialog("Select Your Portfolio", "Please select one of your portfolio to clone", null);
        return;
    }
    // alert(nameV +" "+descV);
    // $(this).dialog('close');
    postData = "/act.ma?action=pClone&xd=" + pid +
        "&nm=" + nameV +
        "&desc=" + descV;
    updateProgressDialog("Cloning <b>" + nameV + ".</b> It may take some time to generate all the trades. Please wait! ");
    updater = new RemoteUpdater(postData, 'POST', "processDiv", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        var infoMsg = document.getElementById("infoHint");
        // alert(infoMsg.innerHTML);
        var errorMsg = document.getElementById("errorHint");
        if (infoMsg) {
            // updateProgressDialog(infoMsg.innerHTML);
            popCloneDoneDialog(infoMsg.innerHTML);
            // setTimeout("openPage('/invest/allPortfoliosDashboard?xd="+pid+"');",
            // 1000);
            // window.location.reload();
        } else {
            hideProgressDialog();
            var goToPage = "/invest/myPortfolio?xd=" + pid;
            // alert(goToPage);
            popErrorMessageDialog("Transaction Failed", errorMsg.innerHTML, goToPage);
        }
        // setTimeout("openPage('/invest/menu/pitchletHome/allPortfoliosDashboard?xd="+pid+"');",
        // 1000);
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function popCloneDoneDialog(pid) {
    Swal.fire({
        title: "Portfolio Copy is Complete",
        html: "",
        type: "info",
        showCancelButton: false,
        confirmButtonColor: "#f44336",
        allowEscapeKey: false,
        allowOutsideClick: false,
        confirmButtonText: "Manage New Portfolio"
    }).then((function() {
        var goToPage = "/invest/myPortfolio?xd=" + pid;
        openPage(goToPage);
    }))
}

function popUpCloneDialog(pid) {
    openPage("/invest/clonePortfolio?xd=" + pid);
}

function runPortfolioReport(pid) {
    showProgressDialog();
    postData = "/act.ma?action=reportPortfolio&xd=" + pid;
    updateProgressDialog("Generating portfolio report. Please wait!");
    updater = new RemoteUpdater(postData, 'POST', "reportProcessDiv", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        var reportUrl = document.getElementById("reportUrl");
        var errorMsg = document.getElementById("errorHint");
        if (reportUrl) {
            hideProgressDialog();
            popRoportFinishedDialog2(reportUrl.innerHTML, "portfolioReport");
            // setTimeout("openPage('/invest/menu/pitchletHome/allPortfoliosDashboard?xd="+pid+"');",
            // 1000);
        } else {
            hideProgressDialog();
            checkErrorMessageDialog("Report Failed", errorMsg.innerHTML);
        }
        // setTimeout("openPage('/invest/menu/pitchletHome/allPortfoliosDashboard?xd="+pid+"');",
        // 1000);
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function runAllPortfoliosReport() {
    showProgressDialog();
    postData = "/act.ma?action=reportAllPortfolios";
    updateProgressDialog("<b>Generating portfolios report</b><br/> It may take some time <br/>Please wait!");
    updater = new RemoteUpdater(postData, 'POST', "reportProcessDiv", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        var reportUrl = document.getElementById("reportUrl");
        var errorMsg = document.getElementById("errorHint");
        if (reportUrl) {
            hideProgressDialog();
            popRoportFinishedDialog2(reportUrl.innerHTML, "myPortfoliosReport");
            // setTimeout("openPage('/invest/menu/pitchletHome/allPortfoliosDashboard?xd="+pid+"');",
            // 1000);
        } else {
            hideProgressDialog();
            checkErrorMessageDialog("Report Failed", errorMsg.innerHTML);
        }
        // setTimeout("openPage('/invest/menu/pitchletHome/allPortfoliosDashboard?xd="+pid+"');",
        // 1000);
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function popUpHelpDialog() {
    $("#helpDialog").dialog({
        bgiframe: true,
        autoOpen: false,
        modal: true,
        width: 600,
        height: 'auto',
        fluid: true, // new option
        buttons: {
            Ok: function() {
                $(this).dialog('close');
            }
        }
    });
    decorateOkButton();
    $('#helpDialog').dialog('open');
    removeDialogTitle("#helpDialog");
}

function popUpDialog(idOfContent) {
    $("#dialog").dialog({
        bgiframe: true,
        autoOpen: false,
        modal: true,
        width: 760,
        height: 'auto',
        fluid: true, // new option
        buttons: {
            Ok: function() {
                $(this).dialog('close');
            }
        }
    });
    $('#dialog').dialog('open');
}

function popUpPayDialog() {
    $("#payDialog").dialog({
        bgiframe: true,
        autoOpen: false,
        modal: true,
        width: 700,
        height: 'auto',
        fluid: true, // new option
        buttons: {
            Close: function() {
                $(this).dialog('close');
            }
        }
    });
    $('#payDialog').dialog('open');
    removeDialogTitle("#payDialog");
}

function hexFromRGB(r, g, b) {
    var hex = [
        r.toString(16),
        g.toString(16),
        b.toString(16)
    ];
    $.each(hex, (function(nr, val) {
        if (val.length == 1) {
            hex[nr] = '0' + val;
        }
    }));
    return hex.join('').toUpperCase();
}

function getHorizonFromGreen(green) {
    var totalStyle = "I have time; don't worry about it";
    if (green == 0) {
        totalStyle = "I want to invest for 2 weeks max... ";
    } else if (green < 5) {
        totalStyle = "I need the returns very soon. Cannot wait";
    } else if (green < 10) {
        totalStyle = "I have about a month for this strategy";
    } else if (green < 18) {
        totalStyle = "I have 3 months for this investment";
    } else if (green < 22) {
        totalStyle = "I have 5 months for this undertaking";
    } else if (green < 28) {
        totalStyle = "I have about 8 months for this investment";
    } else if (green < 35) {
        totalStyle = "I plan to wait 10 months to check out the returns";
    } else if (green < 40) {
        totalStyle = "I plan to invest this for just under a year";
    } else if (green < 50) {
        totalStyle = "I can invest this for about a year";
    } else if (green < 58) {
        totalStyle = "I can invest this for about a year or so";
    } else if (green < 65) {
        totalStyle = "I have about 18 months in my current time horizon";
    } else if (green < 75) {
        totalStyle = "I have 20 months to make money on this investment";
    } else if (green < 80) {
        totalStyle = "I have under 2 years for this undertaking";
    } else if (green < 90) {
        totalStyle = "I have about two years for this investment";
    } else if (green <= 100) {
        totalStyle = "I can invest this for over two years";
    }
    // } else if (green < 75) {
    // totalStyle="I have two years and 6 months for this investment";
    // } else if (green <= 85) {
    // totalStyle="I have over two and a half months for this investment";
    // }else if (green <= 90) {
    // totalStyle="I have almost three years for this investment";
    // }else if (green <= 100) {
    // totalStyle="I can invest this for about 3 years";
    // }
    return totalStyle;
}

function getRiskFromRed(red) {
    var totalStyle = "I love taking a lot of risk";
    if (red == 0) {
        totalStyle = "I am complete idiot when it comes to risk questions; so I avoid it at all cost";
    } else if (red < 10) {
        totalStyle = "I do not associate with risk";
    } else if (red < 20) {
        totalStyle = "I want to avoid taking any risk";
    } else if (red < 30) {
        totalStyle = "I want to avoid any risk if possible";
    } else if (red < 40) {
        totalStyle = "I am very conservative investor";
    } else if (red < 45) {
        totalStyle = "I am conservative investor";
    } else if (red < 50) {
        totalStyle = "I am educated risk avoider";
    } else if (red < 55) {
        totalStyle = "I can tolerate below average risk";
    } else if (red < 60) {
        totalStyle = "I am completely risk neutral";
    } else if (red < 70) {
        totalStyle = "I can tolerate above average risk";
    } else if (red < 75) {
        totalStyle = "I am educated risk taker";
    } else if (red < 83) {
        totalStyle = "I love taking a lot of risk";
    } else if (red <= 88) {
        totalStyle = "I am aggressive risk taker, but not a nut";
    } else if (red <= 95) {
        totalStyle = "I am very aggressive risk taker";
    } else if (red <= 100) {
        totalStyle = "I am a total nut when it comes to risky investing";
    }
    return totalStyle;
}

function getTradingFromBlue(blue) {
    var totalStyle = "I will trade when I want to";
    if (blue == 0) {
        totalStyle = "I will not trade at all";
    } else if (blue < 10) {
        totalStyle = "I do not plan to trade, but may buy or sell one or two times";
    } else if (blue < 20) {
        totalStyle = "I may buy or sell few times";
    } else if (blue < 25) {
        totalStyle = "I may trade on occasion";
    } else if (blue < 30) {
        totalStyle = "I am planning to trade if needed";
    } else if (blue < 35) {
        totalStyle = "I will most likely trade few times";
    } else if (blue < 40) {
        totalStyle = "I will trade when I want to enhance returns";
    } else if (blue < 50) {
        totalStyle = "I will trade somewhat actively";
    } else if (blue < 60) {
        totalStyle = "I will trade more or less actively";
    } else if (blue < 65) {
        totalStyle = "I am going to buy or sell when I have to";
    } else if (blue < 70) {
        totalStyle = "I am going to trade based on market conditions";
    } else if (blue < 80) {
        totalStyle = "I will definitely trade";
    } else if (blue <= 88) {
        totalStyle = "I am planning to trade aggressively";
    } else if (blue <= 95) {
        totalStyle = "I will trade every day";
    } else if (blue <= 100) {
        totalStyle = "I will have automated trading going to catch any arbitrage";
    }
    return totalStyle;
}

function setInvestingMood(red, green, blue) {
    if (red < 10) {}
}

function removeSelectedTheme(idTheme) {
    var theme = document.getElementById(idTheme).value;
    removeTheme(theme);
}

function hasSelectedThemes() {
    theme1 = document.getElementById("theme1").value;
    theme2 = document.getElementById("theme2").value;
    theme3 = document.getElementById("theme3").value;
    theme4 = document.getElementById("theme4").value;
    if (theme1 || theme2 || theme3 || theme4) {
        return true;
    } else {
        return false;
    }
}

function removeTheme(name) {
    // alert(name);
    theme1 = document.getElementById("theme1").value;
    theme2 = document.getElementById("theme2").value;
    theme3 = document.getElementById("theme3").value;
    theme4 = document.getElementById("theme4").value;
    if (theme1 == name) {
        theme1 = "";
        removeDeleteThemeIcon("theme1");
    } else if (theme2 == name) {
        theme2 = "";
        removeDeleteThemeIcon("theme2");
    } else if (theme3 == name) {
        theme3 = "";
        removeDeleteThemeIcon("theme3");
    } else if (theme4 == name) {
        theme4 = "";
        removeDeleteThemeIcon("theme4");
    } else {
        return false;
    }
    // alert(theme1+" "+theme2+" "+theme3+" "+theme4);
    document.getElementById("theme1").value = theme1;
    document.getElementById("theme2").value = theme2;
    document.getElementById("theme3").value = theme3;
    document.getElementById("theme4").value = theme4;
    unDecorateSelectedTheme(name);
    return true;
}

function selectTheme(name) {
    // alert(name);
    if (removeTheme(name)) {
        return;
    }
    theme1 = document.getElementById("theme1").value;
    theme2 = document.getElementById("theme2").value;
    theme3 = document.getElementById("theme3").value;
    theme4 = document.getElementById("theme4").value;
    if (theme1 == null || theme1 == "") {
        theme1 = name;
        displayDeleteThemeIcon("theme1");
    } else if (theme2 == null || theme2 == "") {
        theme2 = name;
        displayDeleteThemeIcon("theme2");
    } else if (theme3 == null || theme3 == "") {
        theme3 = name;
        displayDeleteThemeIcon("theme3");
    } else if (theme4 == null || theme4 == "") {
        theme4 = name;
        displayDeleteThemeIcon("theme4");
    } else {
        unDecorateSelectedTheme(theme4);
        theme4 = name;
    }
    // alert(theme1+" "+theme2+" "+theme3+" "+theme4);
    document.getElementById("theme1").value = theme1;
    document.getElementById("theme2").value = theme2;
    document.getElementById("theme3").value = theme3;
    document.getElementById("theme4").value = theme4;
    decorateSelectedTheme(name);
}

function refreshSuggestions(name) {
    // alert(name);
    showProgressDialog();
    updateProgressDialog("Refreshing suggestion landscape. </b><br/><b>Please wait!</b>")
    var actionUrl = "/act.ma?action=themeSuggestions";
    actionUrl = addSuggestionDataToPost(actionUrl);
    // alert(actionUrl);
    setTimeout("openSeparatePage('" + actionUrl + "');", 1500)
}

function refreshTheme(path) {
    // alert(name);
    showProgressDialog();
    updateProgressDialog("Refreshing theme landscape. </b><br/><b>Please wait!</b>")
    if (path) {
        var actionUrl = "/invest/" + path;
    } else {
        var actionUrl = "/act.ma?action=themeRefresh";
    }
    actionUrl = addSuggestionDataToPost(actionUrl);
    // alert(actionUrl);
    setTimeout("openSeparatePage('" + actionUrl + "');", 1500)
}

function viewTheme(name) {
    showProgressDialog();
    updateProgressDialog("Generating theme landscape. Please wait!")
    // alert('a');
    var actionUrl = "/act.ma?action=themeView&theme=" + name;
    // alert(actionUrl);
    setTimeout("openPage('" + actionUrl + "');", 2500)
    // alert("c");
}

function unDecorateSelectedTheme(name) {
    var onClick = "onclick=\"selectTheme('" + name + "');\" ";
    var onViewClick = "onclick=\"viewTheme('" + name + "');\" ";
    var themeBotton = "themeButton_" + name;
    var themeBottonVar = document.getElementById(themeBotton);
    themeBottonVar.innerHTML = "<div class=\"addPortfolioThemeButton\">" +
        "<a " + onClick + " title=\"" + name + "\" href=\"javascript:void(null);\">Select</a>&nbsp;&nbsp;&nbsp;" +
        "<a " + onViewClick + " title=\"" + name + "\" href=\"javascript:void(null);\">Preview</a></div>";
    var portfolioThemeWrapper = document.getElementById("portfolioThemeWrapper_" + name);
    portfolioThemeWrapper.className = "portfolioThemeWrapper";
    hideThemeButton(name);
}

function decorateSelectedTheme(name) {
    var themeBotton = "themeButton_" + name;
    var themeBottonVar = document.getElementById(themeBotton);
    themeBottonVar.innerHTML = "<div class=\"removePortfolioThemeButton\">" +
        "<a onclick =\"removeTheme('" + name + "');\" title=\"" + name + "\" href=\"javascript:void(null);\">" +
        "Remove This Theme</a></div>";
    var portfolioThemeWrapper = document.getElementById("portfolioThemeWrapper_" + name);
    portfolioThemeWrapper.className = "portfolioThemeWrapperActive";
}

function removeDeleteThemeIcon(themeId) {
    var removeThemeBotton = "removeIcon_" + themeId;
    var removeThemeBottonVar = document.getElementById(removeThemeBotton);
    removeThemeBottonVar.className = "removeThemeIcon";
}

function displayDeleteThemeIcon(themeId) {
    var removeThemeBotton = "removeIcon_" + themeId;
    var removeThemeBottonVar = document.getElementById(removeThemeBotton);
    removeThemeBottonVar.className = "removeThemeIconSelected";
}

function refreshSwatch() {}

function togglePortfolioStyle(t) {
    // alert(t);
    criatePortfolioType = t;
    var rmBlock = document.getElementById("portfolioStyle");
    var imBlock = document.getElementById("portfolioImport");
    var emBlock = document.getElementById("portfolioEmpty");
    var tmBlock = document.getElementById("portfolioTemplate");
    var wlBlock = document.getElementById("portfolioImportWL");
    var brBlock = document.getElementById("portfolioImportBR");
    // alert(imBlock);
    var rmBlockStyle = rmBlock.style;
    var imBlockStyle = imBlock.style;
    var emBlockStyle = emBlock.style;
    var tmBlockStyle = tmBlock.style;
    var wlBlockStyle = wlBlock.style;
    var brBlockStyle = brBlock.style;
    rmBlockStyle.display = "none";
    rmBlockStyle.visibility = "hidden";
    imBlockStyle.display = "none";
    imBlockStyle.visibility = "hidden";
    emBlockStyle.display = "none";
    emBlockStyle.visibility = "hidden";
    tmBlockStyle.display = "none";
    tmBlockStyle.visibility = "hidden";
    wlBlockStyle.display = "none";
    wlBlockStyle.visibility = "hidden";
    brBlockStyle.display = "none";
    brBlockStyle.visibility = "hidden";
    if (t == '1') {
        rmBlockStyle.display = "block";
        rmBlockStyle.visibility = "visible";
    } else if (t == '2') {
        imBlockStyle.display = "block";
        imBlockStyle.visibility = "visible";
    } else if (t == '3') {
        tmBlockStyle.display = "block";
        tmBlockStyle.visibility = "visible";
    } else if (t == '4') {
        wlBlockStyle.display = "block";
        wlBlockStyle.visibility = "visible";
    } else if (t == '5') {
        brBlockStyle.display = "block";
        brBlockStyle.visibility = "visible";
    } else if (t == '0') {
        emBlockStyle.display = "block";
        emBlockStyle.visibility = "visible";
    }
}

function getHorizonValue() {}

function runPortfolioBacktest(pid) {
    var urls = "/invest/myPortfolioBacktesting&t=8&xd=" + pid;
    // alert(urls);
    urls = addSuggestionDataToPost(urls);
    // alert(urls);
    openPage(urls);
}

function runBacktest(bttype) {
    // alert(bttype);
    if (bttype == 7) {
        var symbols = getInputString();
        if (symbols && symbols != "null") {
            var arr = symbols.split(',');
            // alert(arr);
            var counter = 0;
            while (counter < arr.length) {
                var sn = arr[counter];
                if (sn) {
                    var arrSN = sn.split(':');
                    var s = arrSN[0];
                    var n = arrSN[1];
                    if (s == null || s.trim() == "") {
                        alert("Please make sure all symbols are filled in!");
                        return;
                    }
                    if (n == null || n.trim() == "") {
                        alert("Please make sure all symbols have correct quantity!");
                        return;
                    }
                }
                counter++;
            }
        } else {
            alert("Please make sure symbols are specified!");
        }
        var urls = "/invest/myPortfolioBacktesting&t=7&s=" + symbols;
        // alert(urls);
        urls = addSuggestionDataToPost(urls);
        // alert(urls);
        openPage(urls);
    } else if (bttype == 5) {
        var urls = "/invest/myPortfolioBacktesting&t=5";
        urls = addSuggestionDataToPost(urls);
        // alert(urls);
        openPage(urls);
    }
}

function getQuickImportAction() {
    var act = "BUY";
    var sEl = document.getElementById("SELL");
    var eEl = document.getElementById("EDIT");
    var epEl = document.getElementById("EDIT_P");
    var dEl = document.getElementById("REMOVE");
    if (sEl.checked) {
        act = "SELL";
    } else if (eEl.checked) {
        act = "EDIT";
    } else if (dEl.checked) {
        act = "REMOVE";
    } else if (epEl.checked) {
        act = "EDIT_P";
    }
    return act;
}

function validateImportType() {
    var act = getQuickImportAction();
    var unitEl = document.getElementById("unit");
    var totalAmountEl = document.getElementById("totalMoney");
    var totalLabelEl = document.getElementById("totalLabel");
    var hiddenAmount = document.getElementById("hiddenAmount");
    var hiddenBudget = document.getElementById("hiddenBudget");
    if (act == "EDIT_P") {
        unitEl.innerHTML = "%&nbsp;Amount";
        totalLabelEl.innerHTML = "Budget: ";
        totalAmountEl.innerHTML = "<input class='text ui-widget-content ui-corner-all' style='padding:3px;padding-bottom:3px; border:1px solid #dddddd;' type='text' id='budget' name='budget' value='" + hiddenBudget.innerHTML + "' />";
    } else {
        unitEl.innerHTML = "#&nbsp;Shares";
        totalLabelEl.innerHTML = "Total: ";
        totalAmountEl.innerHTML = hiddenAmount.innerHTML;
    }
    var symbols = document.getElementById("assets");
    var budget = document.getElementById("hiddenBudget");
    // deleteAll();
    if (symbols && symbols.value && symbols.value != "null") {
        var arr = symbols.value.split(',');
        var counter = 0;
        while (counter < arr.length) {
            var sn = arr[counter];
            if (sn) {
                var arrSN = sn.split(':');
                var s = arrSN[0];
                var n = arrSN[1];
                var p = arrSN[2];
                var d = arrSN[3];
                if (act == "EDIT_P") {
                    n = parseInt(((parseInt(p) * parseInt(n)) / parseInt(hiddenAmount.innerHTML)) * 100);
                    // alert(n);
                }
                // alert(s+": "+n);
                // addRowToTable(counter,s,n,p,d);
            }
            counter++;
        }
    }
}

function runQuickImport(act) {
    var symbols = getInputString();
    // alert(symbols);
    var portIdEl = document.getElementById("pid");
    var isEditOnlyMode = true;
    if (!act) {
        act = getQuickImportAction();
        isEditOnlyMode = false;
    }
    var budgetForWeight = 0;
    // alert(act);
    if (act == "EDIT_P") {
        var budgetEl = document.getElementById("budget");
        // alert(budgetEl.value);
        budgetForWeight = budgetEl.value;
        // alert(budgetForWeight);
    }
    var pid = portIdEl.value;
    var bodyText = "";
    var title = "Confirm Transactions"
    if (symbols == null || symbols == "") {
        checkErrorMessageDialog("Import Failed", "Please make sure <b>at least one position</b> is properly specified.");
        return;
    }
    if (symbols && symbols != "null" && symbols != "") {
        var arr = symbols.split(',');
        // alert(arr);
        var counter = 0;
        var weightCounter = parseInt("0");
        while (counter < arr.length) {
            var sn = arr[counter];
            if (sn) {
                var arrSN = sn.split(':');
                var s = arrSN[0];
                var n = arrSN[1];
                var p = arrSN[2];
                var d = arrSN[3];
                // alert(s);
                if (s == null || s.trim() == "") {
                    checkErrorMessageDialog("Import Failed", "Please make sure <b>all symbols</b> are filled in properly.");
                    return;
                }
                if (act == "EDIT_P") {
                    weightCounter = weightCounter + parseInt(n);
                }
                if (act != "REMOVE" && (n == null || n.trim() == "")) {
                    checkErrorMessageDialog("Import Failed", "Please make sure <b>all symbols</b> have correct quantity.");
                    return;
                }
            }
            counter++;
        }
        if (act == "EDIT_P") {
            // alert(weightCounter);
            if (weightCounter > 100) {
                checkErrorMessageDialog("Import Failed", "Total weight is <b>" + weightCounter + "%</b>. Please make sure position percentages add up to <b>100%</b>.");
                return;
            } else if (weightCounter < 100) {
                checkErrorMessageDialog("Import Failed", "Total weight is <b>" + weightCounter + "%</b></b>. Please make sure position percentages add up to <b>100%</b>.");
                return;
            }
        }
        if (act == "BUY") {
            if (counter == 1) {
                bodyText = "You are about to import one <b>buy</b> transaction.";
            } else {
                bodyText = "You are about to import " + counter + " <b>buy</b> transactions.";
            }
        } else if (act == "SELL") {
            if (counter == 1) {
                bodyText = "You are about to <b>sell</b> one equity.";
            } else {
                bodyText = "You are about to <b>sell</b> " + counter + " equities.";
            }
        } else if (act == "EDIT") {
            if (counter == 1) {
                bodyText = "You are about to <b>edit</b> one position. This will <b>permanently remove</b> all previous transactions associated with this portfolio.";
            } else {
                bodyText = "You are about to <b>edit</b> " + counter + " positions. This will <b>remove</b> all previous transactions associated with this portfolio.";
            }
        } else if (act == "EDIT_P") {
            bodyText = "You are about to <b>update</b> this portfolio with custom weights. This will <b>permanently remove</b> all previous transactions.";
        } else if (act == "REMOVE") {
            if (counter == 1) {
                bodyText = "You are about to permanently <b>remove</b> one asset from your portfolio.";
            } else {
                bodyText = "You are about to permanently <b>remove</b> " + counter + " assets from your portfolio.";
            }
        }
        bodyText += " Click <b>OK</b> to execute or click <b>Cancel</b> if you have changed your mind."
    } else {
        // alert(pid);
        checkErrorMessageDialog("Import Failed", "Please make sure <b>at least one position</b> is properly specified.");
        return;
    }
    popTransactionConfirmDialog(title, bodyText, pid, symbols, act, budgetForWeight, isEditOnlyMode);
}

function processQuickEdit(pid, symbols, act, budget) {
    alert(pid + " " + symbols + " " + act);
    var actionUrl = "/act.ma?action=pQuickEdit&xd=" + pid + "&s=" + symbols + "&t=" + act + "&budget=" + budget;
    // alert(ajaxUrl);
    showProgressDialog();
    updater = new RemoteUpdater(actionUrl, 'POST', "importResults", null, RemoteUpdater.prototype.RESOLVE);
    var action = function() {
        var infoMsg = document.getElementById("infoHint");
        var errorMsg = document.getElementById("errorHint");
        if (infoMsg) {
            updateProgressDialog(infoMsg.innerHTML);
        } else {
            hideProgressDialog();
            checkErrorMessageDialog("Transaction Failed", errorMsg.innerHTML);
        }
        // hideProgressDialog();
        var urls = "/?pitch=quickPortfolioEdit&xd=" + pid;
        if (errorMsg) {
            popErrorMessageDialog("Transaction Warning", errorMsg.innerHTML, urls);
            // setTimeout("openPage('"+urls+"')", 4000);
        } else {
            setTimeout("openPage('" + urls + "')", 2000);
        }
        // openPage(urls);
    };
    updater.setPostResponseAction(action);
    updater.update();
}

function processQuickImport(pid, symbols, act, budget) {
    alert(pid + " " + symbols + " " + act);
    var actionUrl = "/act.ma?action=pQuickImport&xd=" + pid + "&s=" + symbols + "&t=" + act + "&budget=" + budget;
    // alert(ajaxUrl);
    showProgressDialog();
    updater = new RemoteUpdater(actionUrl, 'POST', "importResults", null, RemoteUpdater.prototype.RESOLVE);
    var action = function() {
        var infoMsg = document.getElementById("infoHint");
        var errorMsg = document.getElementById("errorHint");
        if (infoMsg) {
            updateProgressDialog(infoMsg.innerHTML);
        } else {
            // hideProgressDialog();
            checkErrorMessageDialog("Transaction Failed", errorMsg.innerHTML);
            // hideProgressDialog();
        }
        // hideProgressDialog();
        var urls = "/?pitch=quickPortfolioImport&xd=" + pid;
        if (errorMsg) {
            popErrorMessageDialog("Transaction Warning", errorMsg.innerHTML, urls);
            // setTimeout("openPage('"+urls+"')", 4000);
        } else {
            setTimeout("openPage('" + urls + "')", 2000);
        }
        // openPage(urls);
    };
    updater.setPostResponseAction(action);
    updater.update();
}

function addToPortfolio(symbol) {
    var idElement = document.getElementById("selectedPortfolioId");
    var portfolioId = idElement.value;
    // alert(portfolioId);
    var nsElement = document.getElementById("numberOfShares");
    // alert(nsElement.innerHTML);
    var numberShares = nsElement.value;
    return processQuickAdd(portfolioId, symbol, numberShares);
}

function processQuickAdd(portfolioId, symbol, numberShares) {
    // alert(portfolioId+" "+symbol+" "+numberShares);
    var postData = "/act.ma?action=pAddToPortfolio&xd=" + portfolioId + "&s=" + symbol + "&ns=" + numberShares;
    // alert(postData);
    swal.queue([{
        title: "You are adding a position",
        confirmButtonText: 'Yes, Add it!',
        confirmButtonColor: "green",
        showCancelButton: true,
        showConfirmButton: true,
        allowEscapeKey: false,
        allowOutsideClick: false,
        cancelButtonColor: "#aaa",
        type: "question",
        footer: "This will add " + numberShares + " shares of " + " " + symbol + "  into your selected portfolio",
        showLoaderOnConfirm: true,
        preConfirm: function() {
            return new Promise(function(resolve) {
                $.get(postData)
                    .done((function(data) {
                        if (data == "added") {
                            Swal.fire({
                                title: "Added!",
                                footer: "The position has been added.",
                                type: "success",
                                allowEscapeKey: true,
                                allowOutsideClick: true,
                                confirmButtonText: "View Portfolio",
                                cancelButtonText: "OK",
                                showCancelButton: false,
                                confirmButtonColor: "green"
                            }).then((result) => {
                                goToQuickPortfolioManager(portfolioId);
                            })
                        } else if (data == "invalid") {
                            Swal.fire({
                                title: "Error!",
                                text: "The position has NOT been added. Please check the symbol, price, and quantity and try again!",
                                type: "error",
                                showConfirmButton: false,
                                allowOutsideClick: true,
                                timer: 3500
                            })
                        } else {
                            Swal.fire({
                                title: "Error!",
                                text: data,
                                type: "error",
                                showConfirmButton: false,
                                allowOutsideClick: true,
                                timer: 5500
                            })
                        }
                    }))
            })
        }
    }]).catch(swal.noop);
}

function runWorldMarketCorrelation() {
    var postData = "/invest/worldMarketCorrelation";
    postData = addSuggestionDataToPost(postData);
    openPage(postData);
}

function runSymbolReport(s) {
    // popErrorMessageDialog("Entity Reporting","Coming up. Please stay
    // tuned",null);
    showProgressDialog();
    postData = "/act.ma?action=reportSymbol&s=" + s;
    updateProgressDialog("Generating entity report. Please wait!");
    updater = new RemoteUpdater(postData, 'POST', "reportProcessDiv", null, RemoteUpdater.prototype.RESOLVE);
    var postAction = function() {
        var reportUrl = document.getElementById("reportUrl");
        var errorMsg = document.getElementById("errorHint");
        if (reportUrl) {
            hideProgressDialog();
            popRoportFinishedDialog2(reportUrl.innerHTML, "entityReport");
            // setTimeout("openPage('/invest/menu/pitchletHome/allPortfoliosDashboard?xd="+pid+"');",
            // 1000);
        } else {
            hideProgressDialog();
            checkErrorMessageDialog("Report Failed", errorMsg.innerHTML);
        }
        // setTimeout("openPage('/invest/menu/pitchletHome/allPortfoliosDashboard?xd="+pid+"');",
        // 1000);
    };
    updater.setPostResponseAction(postAction);
    updater.update();
}

function showHypeVolatilityHelp(symbol, name) {
    popModelHelpMessageDialog("Implied Hype Volatility: " + name, "The higher the average after-hype volatility the less accurate is the prediction of potential return on next major news" +
        ". <div style='margin-top:12px; margin-bottom:12px; border-bottom:1px solid #cccccc;'></div>" +
        "Factors that affect " + name + " hype volatility are:<p>" +
        "<div style='font-size:0.9em;'>" +
        "<li>Average period news density<br/>" +
        "<li>Daily volatility of returns<br/>" +
        "<li>Average returns on the past headlines<br/>" +
        "<li>Historical correlation with market</div></p>");
}

function clickNoLicenseAction(title, actionName) {
    var buttonGo = "<div class=\"addSymbolToPortfolio\" style=\"margin-top:20px; margin-bottom:6px; text-align: center; width: 130px;\">" +
        "<a style=\"color: white; \" href='/invest/portfolioPackages'>Try it free for a week</a></div>";
    popErrorMessageDialog(title + " - Need License", "", "");
}

function clickAddSymbolToPortfolio(loggedIn, symbol, name) {
    if (!loggedIn) {
        popErrorMessageDialog("Cannot add " + name, "Please&nbsp;<a href='/?pitch=login'>login</a>&nbsp;to your account " +
            "to add positions to your portfolios", "");
    } else {
        clickTradeSymbol(symbol, 'BUY', '-1');
    }
}

function clickReportPortfolio() {
    popErrorMessageDialog("Portfolio Reporting", "Coming up. Please stay tuned", null);
}

function clickReportAllPortfolios() {
    popErrorMessageDialog("Portfolio Reporting", "Coming up. Please stay tuned", null);
}

function displayAllocationByCategory(pid, at, tabId) {
    newButton = document.getElementById("type33");
    newButton.className = "tabberinactive";
    newButton = document.getElementById("type34");
    newButton.class
    newButton = document.getElementById("type35");
    newButton.className = "tabberinactive";
    newButton = document.getElementById("type36");
    newButton.className = "tabberinactive";
    newButton = document.getElementById(tabId);
    newButton.className = "tabberactive";
    postData = "/act.ma?action=allocationUpdate&xd=" + pid + "&mini=true&at=" + at
    var upWindow = document.getElementById("myPortfolioOverviewInput");
    updater = new RemoteUpdater(postData, 'POST', "myPortfolioOverviewInput", null, RemoteUpdater.prototype.RESOLVE);
    updater.update();
}

function closeReportDialog() {
    $("#reportFinishedDialog").dialog("close");
}

function popRoportFinishedDialog(link, reportName) {
    // alert(link);
    var bl = document.getElementById("reportFinishedBody");
    var viewReportActon = "/act.ma?action=vr&rn=" + reportName + "&ru=" + link;
    var downloadReportActon = "/act.ma?action=dr&rn=" + reportName + "&ru=" + link
    var buttonView = "<div class=''><img src='/images/menus/viewReport.gif' /><div></div>" +
        "<a onclick='closeReportDialog()' target='_blank' href='" + viewReportActon + "'>View report</a>";
    var buttonDownload = "<div class=''><img src='/images/menus/reportDownload.gif' /><div></div>" +
        "<a  onclick='closeReportDialog()' href='" + downloadReportActon + "'>Download Report</a>";
    var blockContent = "";
    blockContent += "<table cellpadding='2' cellspacing='2' width='100%'  border='0'>";
    blockContent += "<tr><td align='center'>" + buttonView + "</td><td>&nbsp</td><td  align='center'>" + buttonDownload + "</td></tr></table>";
    bl.innerHTML = "<br/><br/>" + blockContent;
    openReportDoneDialog();
}

function openReportDoneDialog() {
    $("#reportFinishedDialog").dialog({
        bgiframe: true,
        autoOpen: false,
        modal: true,
        width: 380,
        maxWidth: 600,
        height: 'auto',
        fluid: true, // new option
        buttons: {
            Close: function() {
                $(this).dialog('close');
            }
        }
    });
    $('#reportFinishedDialog').dialog('open');
    removeDialogTitle("#reportFinishedDialog");
}

function openReportPdf(reportUrl) {
    window.open(reportUrl, 'ReportViewer');
}

function openReportViewer(reportUrl) {
    closeReportDialog();
    openReportPdf(reportUrl);
}

function popRoportFinishedDialog2(link, reportName) {
    var bl = document.getElementById("reportFinishedBody");
    var viewReportActon = link; // act.ma?action=vr&rn="+reportName+"&ru="+link;
    // var viewReportActon
    // ="https://docs.google.com/gview?url=www.macroaxis.com"+link+"&chrome=true";//"/act.ma?action=vr&rn="+reportName+"&ru="+link;
    var downloadReportActon = link; // "/act.ma?action=dr&rn="+reportName+"&ru="+link
    var buttonView = "<div class=''><img src='/images/menus/viewReport.gif' /><div></div>" +
        "<a href='#' onclick=\"openReportViewer('" + viewReportActon + "');\">View report</a>";
    var buttonDownload = "<div class=''><img src='/images/menus/reportDownload.gif' /><div></div>" +
        "<a  onclick='closeReportDialog()' href='" + downloadReportActon + "'>Download Report</a>";
    var blockContent = "";
    blockContent += "<table cellpadding='2' cellspacing='2' width='100%'  border='0'>";
    blockContent += "<tr><td align='center'>" + buttonView + "</td></tr></table>";
    bl.innerHTML = "<br/><br/>" + blockContent;
    openReportDoneDialog();
}

function getRefreshView() {
    var v = document.getElementById("refreshView");
    rv = "portfolioDashboard";
    if (v) {
        rv = v.value;
    }
    return rv;
}

function firePortfolioFocus(focus) {
    var refreshView = "myPortfolio";
    var v = document.getElementById("refreshView");
    if (v) {
        refreshView = v.value;
    }
    focus = focus.slice(6, focus.length);
    var portId = parent.document.getElementById('pid');
    var pid = portId.value;
    var post = "/invest/" + refreshView + "?xd=" + pid + "&portfolioFocus=" + focus;
    // alert(post);
    openPage(post);
}

function firePortfolioPositionFocus(focus) {
    var bButton = "<br/><div class='ui-widget-content ui-corner-all' " +
        "style=\"padding:9px; width:170px; color: white; background: #f44336; " +
        "border: 1px dashed red;\" onclick='openPage(\"/?pitch=settingHome\");'>" +
        "<a style=\"color: white; \" href='javascript:void();'>Upgrade Account</a></div>";
    $("#positionsCombo").val("6");
    checkErrorMessageDialog("Specify another position size", "This option is not available in a free account. " +
        "Please upgrade your account or register.<br/></br/> " + bButton);
}

function popUpLicenseDialog() {
    $("#licenseDialog").dialog({
        bgiframe: true,
        autoOpen: false,
        modal: true,
        maxWidth: 600,
        height: 'auto',
        fluid: true, // new option
        buttons: {
            Ok: function() {
                $(this).dialog('close');
                getTimeInterval(12);
            }
        }
    });
    $('#licenseDialog').dialog('open');
}

function scrollMarkedContent() {
    // scrollpane parts
    var scrollPane = $('.scroll-pane');
    var scrollContent = $('.scroll-content');
    // build slider
    var scrollbar = $(".scroll-bar").slider({
        slide: function(e, ui) {
            if (scrollContent.width() > scrollPane.width()) {
                scrollContent.css('margin-left', Math.round(ui.value / 100 * (scrollPane.width() - scrollContent.width())) + 'px');
            } else {
                scrollContent.css('margin-left', 0);
            }
        }
    });
    // append icon to handle
    var handleHelper = scrollbar.find('.ui-slider-handle')
        .mousedown((function() {
            scrollbar.width(handleHelper.width());
        }))
        .mouseup((function() {
            scrollbar.width('100%');
        }))
        .append('<span class="ui-icon ui-icon-grip-dotted-vertical"></span>')
        .wrap('<div class="ui-handle-helper-parent"></div>').parent();
    // change overflow to hidden now that slider handles the scrolling
    scrollPane.css('overflow', 'hidden');
    // size scrollbar and handle proportionally to scroll distance
    function sizeScrollbar() {
        var remainder = scrollContent.width() - scrollPane.width();
        var proportion = remainder / scrollContent.width();
        var handleSize = scrollPane.width() - (proportion * scrollPane.width());
        scrollbar.find('.ui-slider-handle').css({
            width: handleSize,
            'margin-left': -handleSize / 2
        });
        handleHelper.width('').width(scrollbar.width() - handleSize);
    }
    // reset slider value based on scroll content position
    function resetValue() {
        var remainder = scrollPane.width() - scrollContent.width();
        var leftVal = scrollContent.css('margin-left') == 'auto' ? 0 : parseInt(scrollContent.css('margin-left'));
        var percentage = Math.round(leftVal / remainder * 100);
        scrollbar.slider("value", percentage);
    }
    // if the slider is 100% and window gets larger, reveal content
    function reflowContent() {
        var showing = scrollContent.width() + parseInt(scrollContent.css('margin-left'));
        var gap = scrollPane.width() - showing;
        if (gap > 0) {
            scrollContent.css('margin-left', parseInt(scrollContent.css('margin-left')) + gap);
        }
    }
    // change handle position on window resize
    $(window)
        .resize((function() {
            resetValue();
            sizeScrollbar();
            reflowContent();
        }));
    // init scrollbar size
    setTimeout(sizeScrollbar, 10); // safari wants a timeout
}
// this is jscroll
// start of jscroll
(function($) {
    $.fn.jScroll = function(e) {
        var f = $.extend({}, $.fn.jScroll.defaults, e);
        return this.each((function() {
            var a = $(this);
            var b = $(window);
            var c = new location(a);
            b.scroll((function() {
                a.stop().animate(c.getMargin(b), f.speed)
            }))
        }));

        function location(d) {
            this.min = d.offset().top;
            this.originalMargin = parseInt(d.css("margin-top"), 10) || 0;
            this.getMargin = function(a) {
                var b = d.parent().height() - d.outerHeight();
                var c = this.originalMargin;
                if (a.scrollTop() >= this.min) c = c + f.top + a.scrollTop() - this.min;
                if (c > b) c = b;
                return ({
                    "marginTop": c + 'px'
                })
            }
        }
    };
    $.fn.jScroll.defaults = {
        speed: "slow",
        top: 10
    }
})(jQuery);
// end of jscroll
function popUpCreatePortfolioDialog(isDashboard) {
    openPage("/invest/createNewPortfolio");
}

function setCurrency(url, c) {
    var postData = "/login?action=filterCurrency&pcurd=" + c + url;
    openPage(postData);
}

function checkDecorateSearch() {
    var box = document.getElementById("basicSearchBox");
    if (box.value == 'Type Equity...') {
        box.value = '';
    }
}

function isHome() {
    return document.getElementById("isHome");
}

function unDecorateSearch() {
    var box = document.getElementById("basicSearchBox");
    // alert(box);
    box.style.backgroundColor = "#C7D3E8";
    box.style.color = "#8b9dc3";
    box.value = 'Type...';
    if (isHome()) {
        $("#basicSearchBox").animate({
            width: 64
        }, 'slow');
    } else {
        $("#basicSearchBox").animate({
            width: 54
        }, 'slow');
    }
}

function decorateSearch() {
    box = document.getElementById("basicSearchBox");
    // alert(box);
    box.value = 'Type Equity...';
    box.style.color = "gray";
    box.style.backgroundColor = "#ffffff";
    if (isHome()) {
        $("#basicSearchBox").animate({
            width: 100
        }, 'slow');
    } else {
        $("#basicSearchBox").animate({
            width: 84
        }, 'slow');
    }
    box.focus();
    box.setSelectionRange(0, 0);
}

function roundToSix(value) {
    return (Math.round(value * 1000000) / 1000000);
}

function roundToTwo(value) {
    return (Math.round(value * 100) / 100);
}

function myRound(value, places) {
    var multiplier = Math.pow(10, places);
    return (Math.round(value * multiplier) / multiplier);
}
/*
 * tabSlideOUt v1.3
 * 
 * By William Paoli: http://wpaoli.building58.com
 * 
 * To use you must have an image ready to go as your tab Make sure to pass in at
 * minimum the path to the image and its dimensions:
 * 
 * example:
 * 
 * $('.slide-out-div').tabSlideOut({ tabHandle: '.handle', //class of the
 * element that will be your tab -doesnt have to be an anchor pathToTabImage:
 * 'images/contact_tab.gif', //relative path to the image for the tab *required*
 * imageHeight: '133px', //height of tab image *required* imageWidth: '44px',
 * //width of tab image *required* });
 * 
 * 
 */
(function($) {
    $.fn.tabSlideOut = function(callerSettings) {
        var settings = $.extend({
            tabHandle: '.handle',
            speed: 300,
            action: 'click',
            tabLocation: 'left',
            topPos: '200px',
            leftPos: '20px',
            fixedPosition: false,
            positioning: 'absolute',
            pathToTabImage: null,
            imageHeight: null,
            imageWidth: null,
            onLoadSlideOut: false
        }, callerSettings || {});
        settings.tabHandle = $(settings.tabHandle);
        var obj = this;
        if (settings.fixedPosition === true) {
            settings.positioning = 'fixed';
        } else {
            settings.positioning = 'absolute';
        }
        // ie6 doesn't do well with the fixed option
        if (document.all && !window.opera && !window.XMLHttpRequest) {
            settings.positioning = 'absolute';
        }
        // set initial tabHandle css
        if (settings.pathToTabImage != null) {
            settings.tabHandle.css({
                'background': 'url(' + settings.pathToTabImage + ') no-repeat',
                'width': settings.imageWidth,
                'height': settings.imageHeight
            });
        }
        settings.tabHandle.css({
            'display': 'block',
            'textIndent': '-99999px',
            'outline': 'none',
            'position': 'absolute'
        });
        obj.css({
            'line-height': '1',
            'position': settings.positioning
        });
        var properties = {
            containerWidth: parseInt(obj.outerWidth(), 10) + 'px',
            containerHeight: parseInt(obj.outerHeight(), 10) + 'px',
            tabWidth: parseInt(settings.tabHandle.outerWidth(), 10) + 'px',
            tabHeight: parseInt(settings.tabHandle.outerHeight(), 10) + 'px'
        };
        // set calculated css
        if (settings.tabLocation === 'top' || settings.tabLocation === 'bottom') {
            obj.css({
                'left': settings.leftPos
            });
            settings.tabHandle.css({
                'right': 0
            });
        }
        if (settings.tabLocation === 'top') {
            obj.css({
                'top': '-' + properties.containerHeight
            });
            settings.tabHandle.css({
                'bottom': '-' + properties.tabHeight
            });
        }
        if (settings.tabLocation === 'bottom') {
            obj.css({
                'bottom': '-' + properties.containerHeight,
                'position': 'fixed'
            });
            settings.tabHandle.css({
                'top': '-' + properties.tabHeight
            });
        }
        if (settings.tabLocation === 'left' || settings.tabLocation === 'right') {
            obj.css({
                'height': properties.containerHeight,
                'top': settings.topPos
            });
            settings.tabHandle.css({
                'top': 0
            });
        }
        if (settings.tabLocation === 'left') {
            obj.css({
                'left': '-' + properties.containerWidth
            });
            settings.tabHandle.css({
                'right': '-' + properties.tabWidth
            });
        }
        if (settings.tabLocation === 'right') {
            obj.css({
                'right': '-' + properties.containerWidth
            });
            settings.tabHandle.css({
                'left': '-' + properties.tabWidth
            });
            $('html').css('overflow-x', 'hidden');
        }
        // functions for animation events
        settings.tabHandle.click((function(event) {
            event.preventDefault();
        }));
        var slideIn = function() {
            if (settings.tabLocation === 'top') {
                obj.animate({
                    top: '-' + properties.containerHeight
                }, settings.speed).removeClass('open');
            } else if (settings.tabLocation === 'left') {
                obj.animate({
                    left: '-' + properties.containerWidth
                }, settings.speed).removeClass('open');
            } else if (settings.tabLocation === 'right') {
                obj.animate({
                    right: '-' + properties.containerWidth
                }, settings.speed).removeClass('open');
            } else if (settings.tabLocation === 'bottom') {
                obj.animate({
                    bottom: '-' + properties.containerHeight
                }, settings.speed).removeClass('open');
            }
        };
        var slideOut = function() {
            if (settings.tabLocation == 'top') {
                obj.animate({
                    top: '-3px'
                }, settings.speed).addClass('open');
            } else if (settings.tabLocation == 'left') {
                obj.animate({
                    left: '-3px'
                }, settings.speed).addClass('open');
            } else if (settings.tabLocation == 'right') {
                obj.animate({
                    right: '-3px'
                }, settings.speed).addClass('open');
            } else if (settings.tabLocation == 'bottom') {
                obj.animate({
                    bottom: '-3px'
                }, settings.speed).addClass('open');
            }
        };
        var clickScreenToClose = function() {
            obj.click((function(event) {
                event.stopPropagation();
            }));
            $(document).click((function() {
                slideIn();
            }));
        };
        var clickAction = function() {
            settings.tabHandle.click((function(event) {
                if (obj.hasClass('open')) {
                    slideIn();
                } else {
                    slideOut();
                }
            }));
            clickScreenToClose();
        };
        var hoverAction = function() {
            obj.hover(
                (function() {
                    slideOut();
                }),
                (function() {
                    slideIn();
                }));
            settings.tabHandle.click((function(event) {
                if (obj.hasClass('open')) {
                    slideIn();
                }
            }));
            clickScreenToClose();
        };
        var slideOutOnLoad = function() {
            slideIn();
            setTimeout(slideOut, 500);
        };
        // choose which type of action to bind
        if (settings.action === 'click') {
            clickAction();
        }
        if (settings.action === 'hover') {
            hoverAction();
        }
        if (settings.onLoadSlideOut) {
            slideOutOnLoad();
        };
    };
})(jQuery);
// value slider:
function processRiskValue(container, v) {
    var vl = getModelInputString("riskLevel", v);
    $('#leftLabelRisk').hide().html(vl).show('slide');
    $('#riskLevel').val(v);
}

function processHorizonValue(container, v) {
    var s = Math.round(v);
    // alert(s);
    var vl = getModelInputString("dayRange", v);
    // alert(vl);
    if (s == 1) {
        $('#leftLabelHorizon').hide().html(vl).show('slide');
    } else {
        $('#leftLabelHorizon').hide().html(vl).show('slide');
    }
    $('#dayRange').val(s);
}

function replaceUrlParam(url, paramName, paramValue) {
    var pattern = new RegExp('(\\?|\\&)(' + paramName + '=).*?(&|$)')
    var newUrl = url
    if (url.search(pattern) >= 0) {
        newUrl = url.replace(pattern, '$1$2' + paramValue + '$3');
    } else {
        newUrl = newUrl + (newUrl.indexOf('?') > 0 ? '&' : '?') + paramName + '=' + paramValue
    }
    return newUrl
}

function toggleTopQuestion() {
    var text = document.getElementById("topQuestion");
    var btn = document.getElementById("topButtons");
    //
    // alert(text.innerHTML);
    // if (text.innerHTML.startsWith("Would you like")) {
    text.innerHTML = "You don't want to protect your portfolios?";
    btn.innerHTML = "&nbsp;&nbsp;<a href='/finance/login/home' title='Register for Macroaxis as Investor' " +
        "class='button ui red small'>Of course I do!</a>";
    $(btn).hide();
    $(text).hide();
    $(text).show("fade", 300);
    $(btn).show("pulsate", 200);
    // }
}

function toggleTopQuestion2() {
    var text = document.getElementById("topQuestion");
    var btn = document.getElementById("topButtons");
    //
    // alert(text.innerHTML);
    // if (text.innerHTML.startsWith("Would you like")) {
    text.innerHTML = "You don't want to enhance expected returns on your portfolios and reduce risk?&nbsp;&nbsp;&nbsp;";
    btn.innerHTML = "<a href='/invest/portfolioPackages' title='Upgrade to build optimal portfolios' " +
        "class='button ui red small'>Yes, I do!</a>";
    $(btn).hide();
    $(text).hide();
    $(text).show("fade", 300);
    $(btn).show("pulsate", 200);
    // }
}
var chartColors = ["#FF0F00", "#FF6600", "#FF9E01", "#FCD202", "#F8FF01", "#B0DE09", "#04D215", "#0D8ECF", "#0D52D1", "#2A0CD0", "#8A0CCF", "#CD0D74", "#754DEB", "#DDDDDD", "#999999", "#333333", "#000000", "#57032A", "#CA9726", "#990000", "#4B0C25", "#C7C7C7", "#C9C9C9", "#CDCDCD", "#CCCCCC", "#CFCFCF",
    "#D1D1D1", "#D4D4D4", "#D3D3D3", "#D3D3D3", "#D6D6D6", "#D9D9D9",
    "#DCDCDC", "#DBDBDB", "#DEDEDE", "#E0E0E0", "#E3E3E3", "#E5E5E5",
    "#E8E8E8", "#EBEBEB", "#EDEDED", "#F0F0F0", "#F2F2F2", "#F5F5F5",
    "#F7F7F7", "#FAFAFA", "#FCFCFC"
];
var chartColors2 = ["#3b5998", "#1A69FC", "#347AFC", "#4E8BFC", "#689CFD", "#82ADFD", "#9CBEFD", "#B0CBFE", "#C5D9FE", "#DAE7FE", "#EAF1FE", "#F9FBFE", "#FFFFFF", "#EBEBEB", "#EDEDED", "#F0F0F0", "#F2F2F2", "#F5F5F5",
    "#F7F7F7", "#FAFAFA", "#FCFCFC"
]
var buySellColors = ["#0B3B0B", "#088A08", "#BDBDBD", "#FA5858", "#8A0808"];
var assetsColors = ["#70db70", "#29a329", "#2eb82e", "#196619", "#145214", "#0f3d0f", "#cccccc", "#eeeeee", "#FCFCFC"];
var binaryColors = ["#AAAAAA", "#FF0F00"];
var cachDebtColors = ["#FF6600", "#33cc33"];
var prefixesOfBigNumbers = [{
    number: 1e+3,
    prefix: "K"
}, {
    number: 1e+6,
    prefix: "M"
}, {
    number: 1e+9,
    prefix: "B"
}, {
    number: 1e+12,
    prefix: "T"
}, {
    number: 1e+15,
    prefix: "P"
}, {
    number: 1e+18,
    prefix: "E"
}, {
    number: 1e+21,
    prefix: "Z"
}, {
    number: 1e+24,
    prefix: "Y"
}];
// var chartColors = ["#3B5998", "#C7D3E8"];
Array.prototype.getMax = function() {
    var max = Number.MIN_VALUE,
        v, len = this.length,
        i = 0;
    for (; i < len; ++i)
        if (typeof(v = this[i]) == 'number')
            max = Math.max(max, v);
    return max;
}
Array.prototype.getMin = function() {
    var min = Number.MAX_VALUE,
        v, len = this.length,
        i = 0;
    for (; i < len; ++i)
        if (typeof(v = this[i]) == 'number')
            min = Math.min(min, v);
    return min;
}
var scrollableDataProvider;
var scrollableChart;
var scrollableChartCursor;
var symbolAndIndexNewsChart;
var densityChart;
var hypeChart;
var performanceChart;
var minRatio;
var maxRatio;
var cap;

function displayFundAllocationBars(maxValue) {
    displayGenericBarsChartNew(fundAllocationChartData, "fundAllocationBars")
}

function displayProfitabilityBars() {
    var chart = new AmCharts.AmSerialChart();
    chart.panEventsEnabled = false;
    chart.dataProvider = profitabilityChartData;
    chart.categoryField = "allocation";
    decorateBarChart(chart);
    var graph = new AmCharts.AmGraph();
    graph.valueField = "value";
    graph.colorField = "color";
    graph.lineColorField = "color";
    decorateBarGraph(graph);
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor);
    chart.addChartCursor(chartCursor);
    chart.addGraph(graph);
    chart.export = buildExportConfig("profitabilityBars");
    addChartWaterMark(chart);
    chart.write("profitabilityBars");
}

function displayAvarageCompareBars(chartDataProvider, chartDivId) {
	//displayGenericBarsChartNew(chartDataProvider, chartDivId);
	displaySolidGaugeChartNew(chartDataProvider, chartDivId);
}

function displayFundReturnsBars(maxValue) {
    displayGenericBarsChartNew(fundReturnsChartData, "fundReturnsBars");
}

function displayPmPie() {
    var chart = new AmCharts.AmPieChart();
    chart.dataProvider = pmPieChartData;
    chart.marginRight = 0;
    chart.addClassNames = true;
    chart.marginLeft = 0;
    chart.marginBottom = 0;
    chart.marginTop = 0;
    chart.titleField = "balance";
    chart.valueField = "value";
    chart.colors = chartColors;
    chart.labelRadius = 5;
    decorateBalloon(chart.balloon);
    chart.labelText = "[[title]]";
    addChartWaterMark(chart);
    chart.write("pmPie");
}

function displayOmPie() {
    var chart = new AmCharts.AmPieChart();
    chart.addClassNames = true;
    chart.dataProvider = omPieChartData;
    chart.marginRight = 0;
    chart.marginLeft = 0;
    chart.marginBottom = 0;
    chart.marginTop = 0;
    chart.titleField = "balance";
    chart.valueField = "value";
    chart.labelColor = "#cccccc";
    chart.colors = chartColors;
    chart.labelRadius = 5;
    decorateBalloon(chart.balloon);
    chart.labelText = "[[title]]";
    chart.write("omPie");
}

function displayRoaPie() {
    displayGenericPieChartInlineNew(roaPieChartData, "roaPie", false);
}

function displayRoePie() {
    displayGenericPieChartInlineNew(roePieChartData, "roePie", false);
}

function displayTotalComparePie(chartDataProvider, chartDivId) {
    displayGenericPieChartInlineNew(chartDataProvider, chartDivId, false);
    // var chart = new AmCharts.AmPieChart();
    // chart.addClassNames= true;
    // chart.dataProvider = chartDataProvider;
    // //setUpPieMargings(chart);
    // chart.titleField = "balance";
    // chart.valueField = "value";
    // chart.colors = chartColors;
    // chart.color = "#aaaaaa";
    // chart.labelColor = "#cccccc";
    // chart.outlineThickness = 1;
    // chart.innerRadius = "75%";
    // chart.labelRadius =15;
    // decorateBalloon(chart.balloon);
    // chart.labelText = "[[title]]";
    // chart.write(chartDivId);
}

function displayTotalCompareFunnel(chartDataProvider, chartDivId) {
    // alert('a');
    var chart = new AmCharts.AmFunnelChart();
    chart.dataProvider = chartDataProvider;
    setUpFunnelMargings(chart, 10);
    chart.neckWidth = "40%";
    chart.startAlpha = 0;
    chart.neckHeight = "30%";
    chart.fontSize = 12;
    chart.labelPosition = "center";
    chart.groupPercent = 0;
    chart.titleField = "balance";
    chart.valueField = "value";
    chart.colors = chartColors;
    chart.labelRadius = 14;
    chart.labelText = "[[title]]";
    decorateBalloon(chart.balloon);
    chart.color = "#aaa";
    chart.groupPercent = 0;
    chart.labelPosition = "right";
    chart.marginRight = 100;
    chart.write(chartDivId);
}

function displayCashToDebtAllocationFunnel() {
    var chart = new AmCharts.AmFunnelChart();
    chart.dataProvider = cashToDebtAllocationChartData;
    setUpFunnelMargings(chart, 5);
    chart.titleField = "balance";
    chart.valueField = "value";
    chart.colors = chartColors;
    chart.labelRadius = 5;
    chart.labelText = "[[title]]";
    chart.write("cashToDebtAllocationFunnel");
}

function displayCashToDebtAllocationPie() {
  
    displayGenericPieChartInlineNew(cashToDebtAllocationChartData, "cashToDebtAllocationPie", false);
}

function displayPBBars() {
//    var chart = new AmCharts.AmSerialChart();
//    chart.panEventsEnabled = false;
//    chart.dataProvider = pbBarsChartData;
//    chart.categoryField = "account";
//    decorateBarChart(chart);
//    var graph = new AmCharts.AmGraph();
//    graph.valueField = "value";
//    graph.colorField = "color";
//    graph.lineColorField = "color";
//    decorateBarGraph(graph);
//    var chartCursor = new AmCharts.ChartCursor();
//    decorateCursor(chartCursor);
//    chart.addChartCursor(chartCursor);
//    addChartWaterMark(chart);
//    chart.export = buildExportConfig("pbBars");
//    chart.addGraph(graph);
//    chart.write("pbBars");
    displayGenericPieChartInlineNew(pbBarsChartData, "pbBars", false);
}

function displayPmOmBars() {
    var chart = new AmCharts.AmSerialChart();
    chart.panEventsEnabled = false;
    chart.dataProvider = pmomBarsChartData;
    chart.categoryField = "account";
    decorateBarChart(chart);
    var graph = new AmCharts.AmGraph();
    graph.valueField = "value";
    graph.colorField = "color";
    graph.lineColorField = "color";
    decorateBarGraph(graph);
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor);
    chart.addChartCursor(chartCursor);
    chart.addGraph(graph);
    addChartWaterMark(chart);
    chart.export = buildExportConfig("pmomBars");
    chart.write("pmomBars");
}

function displayPmBars() {

    
    
    //var chartData = pmBarsChartData;
    //alert(chartData);
    //var radarBlockId = "pmBars";
    //if (chartData && chartData.length > 0) {
        displaySolidGaugeChartNew(pmBarsChartData, "pmBars");
    //}
    
    
}

function displayOmBars() {
    // displayGenericBarsChartNew(omBarsChartData, "omBars");
    //displayGenericRadarChartInlineNew(omBarsChartData, "omBars");
    displaySolidGaugeChartNew(omBarsChartData, "omBars");
}

function displayRoaBars() {
    displayGenericBarsChartNew(roaBarsChartData, "roaBars");
    // var chart = new AmCharts.AmSerialChart();
    // chart.panEventsEnabled = false;
    // chart.dataProvider = roaBarsChartData;
    // chart.categoryField = "account";
    // decorateBarChart(chart);
    // var graph = new AmCharts.AmGraph();
    // graph.valueField = "value";
    // graph.colorField = "color";
    // graph.lineColorField = "color";
    // decorateBarGraph(graph);
    // var chartCursor = new AmCharts.ChartCursor();
    // decorateCursor(chartCursor);
    // chart.addChartCursor(chartCursor);
    // chart.addGraph(graph);
    // chart.export = buildExportConfig("roaBars");
    // addChartWaterMark(chart);
    // chart.write("roaBars");
}

function displayRoeBars() {
   // displayGenericBarsChartNew(roeBarsChartData, "roeBars");
    //displayGenericRadarChartInlineNew(roeBarsChartData, "roeBars",true);
    displaySolidGaugeChartNew(roeBarsChartData, "roeBars",true);
    // var chart = new AmCharts.AmSerialChart();
    // chart.panEventsEnabled = false;
    // chart.dataProvider = roeBarsChartData;
    // chart.categoryField = "account";
    // decorateBarChart(chart);
    // var graph = new AmCharts.AmGraph();
    // graph.valueField = "value";
    // graph.colorField = "color";
    // graph.lineColorField = "color";
    // decorateBarGraph(graph);
    // var chartCursor = new AmCharts.ChartCursor();
    // decorateCursor(chartCursor);
    // chart.addChartCursor(chartCursor);
    // chart.addGraph(graph);
    // chart.export = buildExportConfig("roeBars");
    // addChartWaterMark(chart);
    // chart.write("roeBars");
    // alert(chart);
}

function displayOwnershipAllocationBars() {
    var chart = new AmCharts.AmSerialChart();
    chart.panEventsEnabled = false;
    chart.dataProvider = ownershipAllocationChartData;
    chart.categoryField = "label";
    decorateBarChart(chart);
    var graph = new AmCharts.AmGraph();
    graph.valueField = "weight";
    graph.colorField = "color";
    graph.lineColorField = "color";
    decorateBarGraph(graph);
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor);
    chart.addChartCursor(chartCursor);
    chart.addGraph(graph);
    chart.export = buildExportConfig("ownershipAllocationBars");
    addChartWaterMark(chart);
    chart.write("ownershipAllocationBars");
}

function decorateBarGraph(graph) {
    graph.type = "column";
    // graph.cornerRadiusTop = 20;
    graph.fillAlphas = 0.6;
    // graph.cornerRadiusTop =0;
    graph.lineThickness = 1;
    // graph.negativeLineColor = "#f44336";
    graph.negativeFillColors = "#f44336";
    // graph.lineColor="#000000";
    graph.lineAlpha = 0.6;
    graph.negativeLineAlpha = 0.6;
    graph.labelPosition = "middle";
    graph.color = "#dddddd";
    graph.labelText = "[[value]]";
    graph.cornerRadiusTop = 0;
}

function decorateCompareBubbleYAxis(valueAxis, isLogarithmic) {
    valueAxis.axisAlpha = 0;
    valueAxis.inside = false;
    valueAxis.position = "left";
    // valueAxis.offset = 50;
    // valueAxis.fontSize =0;
    valueAxis.color = "#aaaaaa";
    valueAxis.axisAlpha = 0.1;
    valueAxis.fillAlpha = 0;
    valueAxis.gridColor = "#ffffff";
    valueAxis.fillColor = "#dddddd";
    valueAxis.gridAlpha = 0;
    valueAxis.showLastLabel = false;
    valueAxis.visibleInLegend = true;
    valueAxis.logarithmic = isLogarithmic;
}

function decorateCompareBubbleXAxis(xAxis, isLogarithmic) {
    // alert("BubbleXAxis: "+xAxis);
    xAxis.position = "bottom";
    xAxis.inside = false;
    // xAxis.fontSize = 11;
    xAxis.gridCount = 5;
    xAxis.fillAlpha = 0;
    xAxis.fillColor = "#cccccc";
    xAxis.axisAlpha = 0.01;
    xAxis.gridColor = "#ffffff";
    xAxis.gridAlpha = 0.1;
    xAxis.color = "#aaaaaa";
    xAxis.tickLength = 0;
    xAxis.axisAlpha = 0.1;
    xAxis.showFirstLabel = false;
    xAxis.showLastLabel = false;
    xAxis.skipFirst = true;
    xAxis.skipLast = true;
    xAxis.visibleInLegend = true;
    xAxis.logarithmic = isLogarithmic;
}

function decorateRadarValueAxis(valAxis) {
    valAxis.axisAlpha = 0.35;
    valAxis.color = "#f7f7f7";
    valAxis.fontSize = 11;
    valAxis.axisTitleOffset = 10;
    valAxis.gridCount = 3;
}

function decorateCategoryAxis(catAxis) {
    catAxis.inside = false;
    catAxis.gridAlpha = 0;
    catAxis.tickLength = 0;
    catAxis.dashLength = 0;
    catAxis.axisAlpha = 0;
    catAxis.color = "#cccccc";
    catAxis.axisColor = "#cccccc";
    catAxis.axisThickness = 0;
    catAxis.fillAlpha = 0;
    catAxis.gridColor = "#ffffff";
    catAxis.fillColor = "#cccccc";
    catAxis.startOnAxis = true;
    // catAxis.autoWrap=true;
    // catAxis.ignoreAxisWidth=true;
}

function decorateValueAxis(valueAxis) {
    // alert("Value Axis: "+valueAxis);
    valueAxis.axisAlpha = 0;
    valueAxis.inside = false;
    valueAxis.position = "left";
    // valueAxis.offset = 50;
    valueAxis.gridAlpha = 0;
    // valueAxis.fontSize =0;
    valueAxis.color = "#cccccc";
    valueAxis.fillAlpha = 0.1;
    valueAxis.gridColor = "#aaaaaa";
    valueAxis.fillColor = "#cccccc";
}

function decorateBarCategoryAxis(catAxis, divid) {
    catAxis.inside = false;
    catAxis.gridAlpha = 0;
    catAxis.gridColor = "#ffffff";
    catAxis.tickLength = 0;
    catAxis.dashLength = 0;
    // catAxis.offset = -20;
    catAxis.axisThickness = 0.02;
    catAxis.axisAlpha = 0;
    catAxis.fillColor = "#cccccc";
    if ("etfInd" != divid) {
        // alert(divid);
        catAxis.labelFunction = formatCategoryLabels;
    }
    // catAxis.labelFunction ="function(valueText, serialDataItem, categoryAxis)
    // {
    // if (valueText.length > 15)
    // return valueText.substring(0, 15) + '...';
    // else
    // return valueText;
    // }
    // catAxis.ignoreAxisWidth=true;
}

function decorateBarValueAxis(valueAxis) {
    // alert("Bar Value Axis: "+valueAxis);
    valueAxis.axisAlpha = 0;
    valueAxis.inside = false;
    valueAxis.position = "left";
    // valueAxis.offset = 50;
    valueAxis.gridAlpha = 0;
    // valueAxis.fontSize =0;
    valueAxis.color = "#cccccc";
    valueAxis.axisAlpha = 0.1;
    valueAxis.fillAlpha = 0;
    valueAxis.gridColor = "#ffffff";
    valueAxis.fillColor = "#cccccc";
    valueAxis.gridAlpha = 0;
    valueAxis.showLastLabel = false;
    valueAxis.visibleInLegend = true;
}

function decorateBarChart(chart) {
    // alert(chart);
    setUpLineMargings(chart);
    chart.panEventsEnabled = false;
    chart.borderAlpha = 0;
    chart.startDuration = 0.8;
    chart.color = "#3B5998";
    // chart.lineColor="#3B5998";
    chart.plotAreaFillAlphas = 0;
    chart.prefixesOfBigNumbers = prefixesOfBigNumbers;
    chart.usePrefixes = true;
    var valueAxis = new AmCharts.ValueAxis();
    decorateBarValueAxis(valueAxis);
    chart.addValueAxis(valueAxis);
    var catAxis = chart.categoryAxis;
    decorateBarCategoryAxis(catAxis);
    valueAxis.equalSpacing = false;
    catAxis.equalSpacing = true;
    decorateBalloon(chart.balloon);
}

function filterStakeholders(equityType) {
    // alert(equityType);
    // var min = $( sliderDiv).slider( "values", 0 );
    // var toggleVar = $('input[name=toggles]:checked').val();
    var idTenure = $("input[name='tenureToggles']:checked").attr('id');
    // alert(idTenure);
    var idTitle = $("input[name='toggles']:checked").attr('id');
    // alert(idTenure+ " "+idTitle);
    var indEl = document.getElementById("industryCombo");
    // alert(indEl);
    var post = "/invest/manager/filter?sht=" + equityType + "&min=" + minRatio +
        "&max=" + maxRatio;
    // alert(equityType);
    // alert(equityType);
    if (equityType == "1") {
        if (idTenure) {
            post += "&tre=" + idTenure;
        }
        if (idTitle) {
            post += "&ttl=" + idTitle;
        }
    } else {
        if (idTitle) {
            post += "&rh=" + idTitle;
        }
    }
    if (indEl != null) {
        var indValue = indEl.value;
        post += "&sgr=" + indValue;
    } else {
        post += "&sgr=any";
    }
    // alert(post);
    // var max = $( sliderDiv).slider( "values",1 );
    // http://localhost:8081/invest/ratio/Return_On_Equity
    setTimeout("openPage('" + post + "');", 300);
}

function displayAvarageCompareRadar(chartDataProvider, chartDivId) {
    // alert(chartDataProvider);
    var chart = new AmCharts.AmRadarChart();
    // alert(document.getElementById(chartDivId+"Data"));
    chart.dataProvider = chartDataProvider;
    chart.categoryField = "allocation";
    var valueAxis = new AmCharts.ValueAxis();
    decorateRadarValueAxis(valueAxis);
    chart.addValueAxis(valueAxis);
    var graph = new AmCharts.AmGraph();
    graph.valueField = "value";
    graph.colorField = "color";
    graph.bullet = "round";
    graph.bulletSize = 20;
    graph.balloonText = "[[value]]";
    chart.addGraph(graph);
    chart.write(chartDivId);
}

function displayAvarageComparePiramid(chartDataProvider, chartDivId) {
    // alert(chartDivId);
    chart = new AmCharts.AmFunnelChart();
    chart.rotate = true;
    chart.balloon.fixedPosition = true;
    // setUpFunnerMargings(chart, 5);
    chart.marginRight = 100;
    chart.labelPosition = "right";
    chart.valueField = "value";
    chart.colors = chartColors;
    chart.dataProvider = chartDataProvider;
    chart.titleField = "label";
    chart.categoryField = "label";
    decorateBalloon(chart.balloon);
    chart.write(chartDivId);
    // alert(chartDivId);
}

function filterFundamental(sliderDiv, ratio, equityType) {
    // var min = $( sliderDiv).slider( "values", 0 );
    var post = "/invest/ratio/" + ratio + "?min=" + minRatio + "&max=" +
        maxRatio + "&t=" + equityType;
    if (cap) {
        post += "&cap=" + cap;
    }
    var indEl = document.getElementById("industryCombo");
    if (indEl != null) {
        var indValue = indEl.value;
        post += "&sgr=" + indValue;
    } else {
        post += "&sgr=any";
    }
    // alert(indEl+" "+indValue);
    // var max = $( sliderDiv).slider( "values",1 );
    // http://localhost:8081/invest/ratio/Return_On_Equity
    setTimeout("openPage('" + post + "');", 300);
}

function searchInsiders(iType) {
    var sInput = document.getElementById("insiderSearchBox");
    vSearch = sInput.value;
    // alert(vSearch);
    if (vSearch == "Type insider name...") {
        vSearch = "A";
    } else if (vSearch == "") {
        vSearch = "A";
    } else {}
    var tpost = "/invest/stakeholderDirectory/" + iType + "/" + vSearch;
    setTimeout("openPage('" + tpost + "');", 300);
}

function asa() {
    alert(a);
}

function searchAdvisers() {
    var sInput = document.getElementById("adviserSearchBox");
    vSearch = sInput.value;
    // alert(vSearch);
    if (vSearch == "Type adviser name...") {
        vSearch = "A";
    } else if (vSearch == "") {
        vSearch = "A";
    } else {}
    var tpost = "/invest/financialAdviserDirectory/" + vSearch;
    setTimeout("openPage('" + tpost + "');", 300);
}

function initializeStakeholderToggle() {
    $("#tenureToggles").buttonset();
    $("#toggles").buttonset({
        icons: {
            primary: 'ui-icon-gear',
            secondary: 'ui-icon-triangle-1-s'
        }
    });
    // alert("ggod");
}

function initializeRatioSlider(sliderDiv, inputDiv, minValue, maxValue,
    defaultMin, defaultMax, stepValue) {
    cap = stepValue;
    // alert(cap);
    var suffixEl = document.getElementById("suffix");
    var suffix = suffixEl.value;
    minRatio = defaultMin;
    maxRatio = defaultMax;
    // $("#toggles").buttonset();
    // alert(stepValue);
    $(sliderDiv).slider({
        range: true,
        min: minValue,
        max: maxValue,
        step: stepValue,
        values: [minRatio, maxRatio],
        slide: function(event, ui) {
            minRatio = ui.values[0];
            maxRatio = ui.values[1];
            $(inputDiv).text(
                "From " + formatBigNumber(minRatio) + suffix +
                " To " + formatBigNumber(maxRatio) +
                suffix);
            // $( inputDiv).val(minRatio + suffix + " to " + maxRatio +
            // suffix);
        }
    });
    minRatio = $(sliderDiv).slider("values", 0);
    maxRatio = $(sliderDiv).slider("values", 1);
    // alert($("sliderDiv").find("a").css("border","1px solid black"));
    // alert($("sliderDiv").find("a").css("background","black"));
    $(inputDiv).text(
        "From " + formatBigNumber(minRatio) + suffix + " To " +
        formatBigNumber(maxRatio) + suffix);
    // alert("a");
}

function formatBigNumber(bigNumber) {
    number = "0.0";
    if (bigNumber >= 0) {
        if (bigNumber >= 1000000000) {
            number = roundNumber(bigNumber / 1000000000, 0) + "B";
        } else if (bigNumber >= 1000000) {
            number = roundNumber(bigNumber / 1000000, 0) + "M";
        } else if (bigNumber > 1000) {
            number = roundNumber(bigNumber / 1000, 0) + "K";
        } else if (bigNumber > 100) {
            number = roundNumber(bigNumber, 2);
        } else {
            number = bigNumber;
        }
    } else {
        if (bigNumber <= -1000000000) {
            number = roundNumber(bigNumber / 1000000000, 0) + "B";
        } else if (bigNumber <= -1000000) {
            number = roundNumber(bigNumber / 1000000, 0) + "M";
        } else if (bigNumber < -1000) {
            number = roundNumber(bigNumber / 1000, 0) + "K";
        } else if (bigNumber < -100) {
            number = roundNumber(bigNumber, 2);
        } else {
            number = bigNumber;
        }
        // alert(number);
    }
    // alert(number);
    return number;
}

function fireInsiderDirectoryFor(title, startsWith) {
    var path = "/invest/stakeholderDirectory/" + title + "/" + startsWith;
    openPage(path);
}

function roundNumber(rnum, rlength) { // Arguments: number to round, number of
    // decimal places
    var newnumber = Math.round(rnum * Math.pow(10, rlength)) /
        Math.pow(10, rlength);
    return parseFloat(newnumber); // Output the result to the form field
    // (change for your purposes)
}
$((function() {
    updateFilters();
}));
String.prototype.startsWith = function(str) {
    return this.indexOf(str) == 0;
};
String.prototype.endsWith = function(str) {
    var lastIndex = this.lastIndexOf(str);
    // alert(this);
    return (lastIndex != -1) && (lastIndex + str.length == this.length);
}

function handleComboSelectionClick(item) {
    var post = "/act.ma?action=pFilterFirst";
    var typeEl = document.getElementById("typeCombo");
    var tagEl = document.getElementById("tagCombo");
    var styleEl = document.getElementById("styleCombo");
    if (typeEl != null) {
        var typeValue = typeEl.value;
        post += "&ptype=" + typeValue.slice(5, typeValue.length);
    }
    if (tagEl != null) {
        var tagValue = tagEl.value;
        post += "&ptag=" + tagValue.slice(4, tagValue.length);
    }
    if (styleEl != null) {
        var styleValue = styleEl.value;
        post += "&pstyle=" + styleValue.slice(6, styleValue.length);
    }
    openPage(post);
}

function pushMinMaxData(chartData, minX, minY, maxX, maxY) {
    chartData.push({
        min_x: minX,
        min_y: minY,
        color: "#ffffff",
        description: ""
    });
    chartData.push({
        max_x: maxX,
        max_y: maxY,
        color: "#ffffff",
        description: ""
    });
}

function displayCompareBubbles(chartDiv, symbolX, symbolY, symbolName, othersX,
    othersY, othersName, titleX, titleY, minX, minY, maxX, maxY) {

        //var chart;
        if (minX == null) {
            minX = othersX.getMin();
            // alert(minX);
            minX = Math.min(minX, symbolX);
            minX = Math.min(minX, 0);
            minX = scaleMin(minX);
        }
        if (minY == null) {
            minY = othersY.getMin();
            minY = Math.min(minY, symbolY);
            minY = Math.min(minY, 0);
            minY = scaleMin(minY);
        }
        if (maxX == null) {
            maxX = othersX.getMax();
            maxX = Math.max(maxX, symbolX);
            maxX = scaleMax(maxX);
        }
        if (maxY == null) {
            maxY = othersY.getMax();
            maxY = Math.max(maxY, symbolY);
            maxY = scaleMax(maxY);
        }
        var chartData = [{
            symbol_x: symbolX,
            symbol_y: symbolY,
            color: "#3B5998",
            description: symbolName
        }];
        var size = othersX.length;
        for (var i = 0; i < size; i++) {
            var x = othersX[i];
            var y = othersY[i];
            var color = "#C7D3E8";
            var desc = othersName[i];
            // alert(desc);
            chartData.push({
                other_x: x,
                other_y: y,
                color: color,
                description: desc
            });
        }
        pushMinMaxData(chartData, minX, minY, maxX, maxY);
        // alert(chartData);
        //addLoadEvent((function drowBubbles() {
        var  chart = new AmCharts.AmXYChart();
            // chart.pathToImages = "/images/charts/";
            chart.dataProvider = chartData;
            chart.prefixesOfBigNumbers = [{
                number: 1e+3,
                prefix: "K"
            }, {
                number: 1e+6,
                prefix: "M"
            }, {
                number: 1e+9,
                prefix: "B"
            }, {
                number: 1e+12,
                prefix: "T"
            }, {
                number: 1e+15,
                prefix: "P"
            }, {
                number: 1e+18,
                prefix: "E"
            }, {
                number: 1e+21,
                prefix: "Z"
            }, {
                number: 1e+24,
                prefix: "Y"
            }];
            chart.usePrefixes = true;
            chart.startDuration = 0;
            setUpLineMargings(chart);
            // alert('');
            // decorateBalloon(chart.balloon);
            var xAxis = new AmCharts.ValueAxis();
            decorateCompareBubbleXAxis(xAxis);
            chart.addValueAxis(xAxis);
            var yAxis = new AmCharts.ValueAxis();
            decorateCompareBubbleYAxis(yAxis);
            chart.addValueAxis(yAxis);
            var othersGraph = new AmCharts.AmGraph();
            othersGraph.addListener("clickGraphItem", handleBubbleCompareClick);
            decorateCompareOthersBubble(othersGraph, titleX, titleY);
            chart.addGraph(othersGraph);
            var minGraph = new AmCharts.AmGraph();
            decorateCompareMinBubble(minGraph);
            chart.addGraph(minGraph);
            var maxGraph = new AmCharts.AmGraph();
            decorateCompareMaxBubble(maxGraph);
            chart.addGraph(maxGraph);
            var symbolGraph = new AmCharts.AmGraph();
            decorateCompareSymbolBubble(symbolGraph, titleX, titleY);
            chart.addGraph(symbolGraph);
            decorateBalloon(chart.balloon);
            // chart.balloon.borderColor = "#3B5998";
            // chart.balloon.borderThickness = 0;
            // chart.balloon.fillColor = "#3B5998";
            // chart.balloon.fillAlpha = 1;
            // chart.balloon.color = "#000000";
            var chartCursor = new AmCharts.ChartCursor();
            decorateCursor(chartCursor);
            chart.addChartCursor(chartCursor);
            // chart.addLabel(250, 206, titleX, "left", 18, "#848180",0,true);
            // chart.addLabel(-10, 120, titleY, "left", 22, "#848180",270,true);
            addChartWaterMark(chart);
            // chart.panelsSettings.fontFamily = 'Arial';
            chart.export = buildExportConfig(chartDiv);
            chart.write(chartDiv);
       // }))

}

function decorateCompareMaxBubble(maxGraph) {
    maxGraph.xField = "max_x";
    maxGraph.yField = "max_y";
    maxGraph.descriptionField = "";
    maxGraph.colorField = "color";
    maxGraph.lineAlpha = 0;
    maxGraph.fontSize = 0;
    maxGraph.balloonText = "";
    maxGraph.labelText = "";
    maxGraph.bulletSize = 1;
    maxGraph.visibleInLegend = false;
}

function decorateCompareMinBubble(minGraph) {
    minGraph.xField = "min_x";
    minGraph.yField = "min_y";
    minGraph.descriptionField = "";
    minGraph.colorField = "color";
    minGraph.lineAlpha = 0;
    minGraph.fontSize = 0;
    minGraph.balloonText = "";
    minGraph.labelText = "";
    minGraph.bulletSize = 1;
    minGraph.visibleInLegend = false;
}

function decorateCompareOthersBubble(othersGraph, titleX, titleY) {
    othersGraph.xField = "other_x";
    othersGraph.yField = "other_y";
    othersGraph.urlField = "url";
    othersGraph.descriptionField = "description";
    othersGraph.colorField = "color";
    othersGraph.lineAlpha = 0;
    othersGraph.bullet = "round";
    othersGraph.fontSize = 9;
    othersGraph.balloonText = "[[description]]</br>" + titleX + ": [[other_y]]</br>" + titleY + ": [[other_x]]";
    othersGraph.labelText = "[[description]]";
    othersGraph.labelPosition = "middle";
    othersGraph.bulletBorderThickness = 2;
    othersGraph.bulletBorderAlpha = 1;
    othersGraph.bulletSize = 80;
    othersGraph.bulletAlpha = 0.7;
    // decorateCompareBubbleGridFill(othersGraph);
}

function decorateCompareBubbleGridFill(aGraph) {
    aGraph.negativeBase = 0;
    aGraph.negativeFillAlphas = .1;
    aGraph.fillColors = "#aaaaaa";
    aGraph.fillAlphas = .2;
}

function decorateCompareSectorBubble(sectorGraph) {
    sectorGraph.xField = "sector_x";
    sectorGraph.yField = "sector_y";
    sectorGraph.descriptionField = "description";
    sectorGraph.colorField = "color";
    sectorGraph.urlField = "url";
    sectorGraph.lineAlpha = 0
    sectorGraph.bullet = "round";
    sectorGraph.balloonText = "[[description]]";
    sectorGraph.labelText = "Industry";
    sectorGraph.labelPosition = "middle";
    sectorGraph.color = "#000000";
    sectorGraph.bulletBorderColor = '#ADDEEE';
    sectorGraph.bulletBorderThickness = 2;
    sectorGraph.bulletBorderAlpha = 1;
    sectorGraph.bulletSize = 70;
    sectorGraph.bulletAlpha = 0.8
    decorateCompareBubbleGridFill(sectorGraph);
}

function decorateCompareSymbolBubble(symbolGraph, titleX, titleY) {
    // alert('a');
    symbolGraph.xField = "symbol_x";
    symbolGraph.yField = "symbol_y";
    symbolGraph.descriptionField = "description";
    symbolGraph.colorField = "color";
    symbolGraph.lineAlpha = 0;
    symbolGraph.bullet = "round";
    symbolGraph.balloonText = "[[description]]</br>" + titleX + ": [[symbol_y]]</br>" + titleY + ": [[symbol_x]]";
    symbolGraph.labelText = "[[description]]";
    symbolGraph.labelPosition = "middle";
    symbolGraph.color = "#ffffff";
    symbolGraph.bulletBorderThickness = 2;
    symbolGraph.bulletBorderAlpha = 0.9;
    symbolGraph.bulletSize = 80;
    symbolGraph.bulletAlpha = 0.7;
    // decorateCompareBubbleGridFill(symbolGraph);
}

function displayCompareRadar(chartDiv, othersX, othersY, othersName, titleX,
    titleY, useLog) {
    // alert(chartDiv);
    var chart;
    var chartData = [{
        name: othersName[0],
        thisValueX: othersX[0],
        thisValueY: othersY[0]
    }, {
        name: othersName[1],
        valueX: othersX[1],
        valueY: othersY[1]
    }, {
        name: othersName[2],
        valueX: othersX[2],
        valueY: othersY[2]
    }, {
        name: othersName[3],
        valueX: othersX[3],
        valueY: othersY[3]
    }, {
        name: othersName[4],
        valueX: othersX[4],
        valueY: othersY[4]
    }, {
        name: othersName[5],
        valueX: othersX[5],
        valueY: othersY[5]
    }];
    // alert(chartData);
    // addLoadEvent(function drowRadar() {
    chart = new AmCharts.AmRadarChart();
    // alert(chartDiv);
    chart.dataProvider = chartData;
    chart.categoryField = "name";
    var valueAxis = new AmCharts.ValueAxis();
    if (useLog) {
        valueAxis.logarithmic = true;
    }
    chart.addValueAxis(valueAxis);
    var graphX = new AmCharts.AmGraph();
    graphX.valueField = "valueX";
    graphX.bullet = "round";
    graphX.title = "Competition " + titleX;
    graphX.bulletSize = 8;
    graphX.balloonText = "[[value]]";
    graphX.lineColor = "#000000"
    graphX.fillAlphas = 0.5;
    graphX.addListener("clickGraphItem", handleBubbleCompareClick);
    chart.addGraph(graphX);
    var graphY = new AmCharts.AmGraph();
    graphY.valueField = "valueY";
    graphY.bullet = "round";
    graphY.title = "Competition " + titleY;
    graphY.bulletSize = 8;
    graphY.balloonText = "[[value]]";
    graphY.lineColor = "#000000"
    graphY.fillAlphas = 0.2;
    graphY.addListener("clickGraphItem", handleRadarCompareClick);
    chart.addGraph(graphY);
    var graphThisX = new AmCharts.AmGraph();
    graphThisX.valueField = "thisValueX";
    graphThisX.bullet = "round";
    graphThisX.title = othersName[0] + " " + titleX;
    graphThisX.bulletSize = 17;
    graphThisX.balloonText = "[[value]]";
    graphThisX.lineColor = "#086A87"
    graphThisX.fillAlphas = 0.9;
    graphThisX.addListener("clickGraphItem", handleBubbleCompareClick);
    chart.addGraph(graphThisX);
    var graphThisY = new AmCharts.AmGraph();
    graphThisY.valueField = "thisValueY";
    graphThisY.bullet = "round";
    graphThisY.title = othersName[0] + " " + titleY;
    graphThisY.bulletSize = 17;
    graphThisY.balloonText = "[[value]]";
    graphThisY.lineColor = "#aaaaaa"
    graphThisY.fillAlphas = 0.9;
    graphThisY.addListener("clickGraphItem", handleRadarCompareClick);
    chart.addGraph(graphThisY);
    var legend = new AmCharts.AmLegend();
    legend.position = "bottom";
    legend.autoMargins = false;
    legend.align = "center";
    legend.labelText = "[[title]]";
    legend.markerType = "circle";
    chart.addLegend(legend);
    chart.write(chartDiv);
    // })
}

function displayCompareRadarTest() {
    var chart;
    var chartData = [{
        country: "Czech Republic",
        litres: 156.90
    }, {
        country: "Ireland",
        litres: 131.10
    }, {
        country: "Germany",
        litres: 115.80
    }, {
        country: "Australia",
        litres: 109.90
    }, {
        country: "Austria",
        litres: 108.30
    }, {
        country: "UK",
        litres: 99.00
    }];
    window.onload = function() {
        chart = new AmCharts.AmRadarChart();
        chart.dataProvider = chartData;
        chart.categoryField = "country";
        chart.startDuration = 0;
        var valueAxis = new AmCharts.ValueAxis();
        decorateRadarValueAxis(valueAxis);
        chart.addValueAxis(valueAxis);
        var graph = new AmCharts.AmGraph();
        graph.valueField = "litres";
        graph.bullet = "round";
        graph.balloonText = "[[value]] litres of beer per year"
        chart.addGraph(graph);
        chart.write("radar")
    }
}

function handleRadarCompareClick(event) {
    var graphDataItem = event.item;
    alert(graphDataItem.description);
}

function handleBubbleCompareClick(event) {
    var graphDataItem = event.item;
    //alert(symbol);
    // portIdEl = document.getElementById('pid');
    // var pid = -1;
    // if (portIdEl) {
    // pid = portIdEl.value;
    // }
    var symbol = graphDataItem.description;
    symbol = symbol.replace("New Position:", "").trim();
    // alert(symbol);
    openSeparatePage("/invest/market/" + symbol);
    // } else {
    // showTradeBlock(symbol, 1, pid);
    // }
    // alert(graphDataItem.description);
}

function handleEventClick(event) {
    var graphDataItem = event.item;
    // alert(event);
}

function buildDistressGuadge(guadgeDivId, cursorValue, useLabel) {
    var label = "Bankruptcy";
    if (!useLabel) {
        label = "";
    }
    // Draw the gauge using custom settings (medium)
    var gm_options = {
        value: 0,
        label: label,
        unitsLabel: '',
        colorOfText: '#aaaaaa',
        colorOfCenterCircleFill: '#3B5998',
        colorOfCenterCircleStroke: '#bbbbbb',
        colorOfPointerStroke: '#3B5998',
        colorOfPointerFill: '#3B5998',
        colorOfFill: ['#dddddd', '#cccccc', '#eeeeee', '#eeeeee'],
        min: 0,
        max: 100,
        majorTicks: 6,
        minorTicks: -1, // small ticks inside each major tick
        greenFrom: 0,
        greenTo: 20,
        yellowFrom: 20,
        yellowTo: 80,
        redFrom: 80,
        redTo: 100
    };
    gm = new Gauge(document.getElementById(guadgeDivId), gm_options);
    gm.setValue(cursorValue);
}

function buildGuadge(guadgeDivId, cursorValue, useLabel) {
    var label = "Performance";
    if (!useLabel) {
        label = "";
    }
    // Draw the gauge using custom settings
    var options = {
        value: 0,
        label: label,
        unitsLabel: '%',
        colorOfText: '#aaaaaa',
        colorOfCenterCircleFill: '#3B5998',
        colorOfCenterCircleStroke: '#bbbbbb',
        colorOfPointerStroke: '#3B5998',
        colorOfPointerFill: '#3B5998',
        colorOfFill: ['#dddddd', '#cccccc', '#eeeeee', '#eeeeee'],
        min: 0,
        max: 100,
        majorTicks: 4,
        minorTicks: -1, // small ticks inside each major tick
        greenFrom: 33,
        greenTo: 100,
        yellowFrom: 5,
        yellowTo: 33,
        redFrom: 0,
        redTo: 5
    };
    gm = new Gauge(document.getElementById(guadgeDivId), options);
    gm.setValue(cursorValue);
}

function displayTwoSymbolsCompareChart(chartDivId, chartData, label1, label2) {
    chart = new AmCharts.AmSerialChart();
    setUpLineMargingsOn(chart, false);
    chart.dataProvider = chartData;
    chart.categoryField = "date";
    chart.panEventsEnabled = true;
    var graph1 = new AmCharts.AmGraph();
    graph1.lineColor = "#3B5998";
    graph1.fillColors = "#3B5998";
    graph1.title = label1;
    graph1.lineAlpha = 1;
    graph1.fillAlphas = 0.5;
    graph1.valueField = "value1";
    graph1.type = "smoothedLine";
    graph1.balloonText = "[[title]] [[value]]%";
    chart.addGraph(graph1);
    var graph2 = new AmCharts.AmGraph();
    graph2.title = label2;
    graph2.lineColor = "#f44336";
    graph2.fillColors = "#f44336";
    graph2.fillAlphas = 0.5;
    graph2.lineAlpha = 1;
    graph2.valueField = "value2";
    graph2.type = "smoothedLine";
    graph2.balloonText = "[[title]] [[value]]%";
    chart.addGraph(graph2);
    var catAxis = chart.categoryAxis;
    decorateCategoryAxis(catAxis);
    catAxis.parseDates = true;
    catAxis.autoGridCount = true;
    var valAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valAxis);
    valAxis.fillAlpha = 0.05;
    valAxis.gridAlpha = 0.07;
    valAxis.inside = true;
    chart.addValueAxis(valAxis);
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor);
    decorateBalloon(chart.balloon);
    chart.addChartCursor(chartCursor);
    addChartWaterMark(chart);
    setLegendForLineChart(chart);
    chart.legend.color = "#000000";
    chart.export = buildExportConfig(chartDivId);
    chart.write(chartDivId);
}

function displaySymbolAndIndexAreaChart(chartDivId, chartData, title, benchmark) {
    symbolAndIndexNewsChart = new AmCharts.AmSerialChart();
    setUpLineMargingsOn(symbolAndIndexNewsChart, false);
    symbolAndIndexNewsChart.dataProvider = chartData;
    symbolAndIndexNewsChart.categoryField = "date";
    symbolAndIndexNewsChart.panEventsEnabled = true;
    graph1 = new AmCharts.AmGraph();
    graph1.lineColor = "#3B5998";
    graph1.fillColors = "#3B5998";
    graph1.negativeLineColor = "#DF0101";
    graph1.negativeFillColors = "#DF0101";
    graph1.lineAlpha = 1;
    graph1.fillAlphas = 0.6;
    graph1.valueField = "value1";
    graph1.labelPosition = "right";
    graph1.balloonText = "News";
    graph1.showBalloon = true;
    graph1.bullet = "round";
    graph1.labelText = "[[labelText]]";
    graph1.labelPosition = "inside";
    graph1.bulletColor = "orange";
    graph1.bulletSizeField = "bulletSize"; // indicate which field should be
    // used for bullet size
    graph1.bulletBorderAlpha = 0;
    graph1.color = "#3B5998";
    // graph1.bulletColor = "#3B5998";
    graph1.useDataSetColors = true;
    graph1.title = title;
    graph1.type = "smoothedLine";
    graph1.lineThickness = 1;
    graph1.balloonText = "[[title]] [[value]]%";
    symbolAndIndexNewsChart.addGraph(graph1);
    graph0 = new AmCharts.AmGraph();
    graph0.lineThickness = 0;
    graph0.lineAlpha = 0;
    graph0.valueField = "value0";
    graph0.showBalloon = true;
    graph0.title = title + " Dividend";
    graph0.labelText = "";
    graph0.color = "#ffffff";
    graph0.labelPosition = "middle";
    graph0.bullet = "round";
    graph0.bulletSizeField = "bulletSize"; // indicate which field should be
    // used for bullet size
    graph0.bulletBorderAlpha = 0.5;
    graph0.bulletBorderThickness = 0;
    graph0.bulletBorderColor = "black";
    graph0.balloonText = "[[bubbleText]]";
    graph0.bulletColor = "#0B610B";
    graph0.type = "smoothedLine";
    graph0.lineColor = "#0B610B";
    graph0.lineThickness = 0;
    symbolAndIndexNewsChart.addGraph(graph0);
    graph2 = new AmCharts.AmGraph();
    graph2.lineColor = "#6E6E6E";
    graph2.fillColors = "#aaaaaa";
    graph2.negativeLineColor = "#aaaaaa";
    graph2.negativeFillColors = "#aaaaaa";
    graph2.fillAlphas = 0;
    graph2.lineAlpha = 1;
    graph2.title = "Benchmark " + benchmark;
    graph2.showBalloon = true;
    graph2.lineThickness = 3;
    graph2.valueField = "value2";
    graph2.type = "smoothedLine";
    graph2.balloonText = "[[title]] [[value]]%";
    graph0.fillToGraph = graph2;
    symbolAndIndexNewsChart.addGraph(graph2);
    var catAxis = symbolAndIndexNewsChart.categoryAxis;
    decorateCategoryAxis(catAxis);
    catAxis.parseDates = true;
    catAxis.position = "bottom";
    catAxis.autoGridCount = true;
    var valAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valAxis);
    valAxis.inside = true;
    symbolAndIndexNewsChart.addValueAxis(valAxis);
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor);
    symbolAndIndexNewsChart.addChartCursor(chartCursor);
    decorateBalloon(symbolAndIndexNewsChart.balloon);
    var legend = new AmCharts.AmLegend();
    legend.bulletType = "round";
    legend.equalWidths = false;
    legend.marginLeft = 13;
    legend.valueWidth = 520;
    legend.markerBorderThickness = 3;
    legend.color = "#6E6E6E";
    legend.markerType = "circle";
    legend.markerBorderColor = "#aaaaaa";
    legend.markerBorderThickness = 2;
    legend.markerSize = 24;
    // legend.borderAlpha = 1;
    legend.textClickEnabled = true;
    legend.autoMargins = false;
    legend.useGraphSettings = false;
    // legend.color = "#000000";
    symbolAndIndexNewsChart.addLegend(legend);
    // symbolAndIndexNewsChart.pathToImages = "/images/charts/";
    var guide = new AmCharts.Guide();
    guide.value = 1;
    guide.lineAlpha = 0.1;
    valAxis.addGuide(guide);
    setLegendForLineChart(symbolAndIndexNewsChart);
    addChartWaterMark(symbolAndIndexNewsChart);
    symbolAndIndexNewsChart.export = buildExportConfig(chartDivId);
    symbolAndIndexNewsChart.write(chartDivId);
    // addLabel(x, y, text, align, size, color, rotation, alpha, bold, url)
}

function displaySymbolAreaChartWithStory(chartDivId, chartData) {
    // alert(chartDivId);
    chart = new AmCharts.AmSerialChart();
    setUpLineMargings(chart);
    chart.dataProvider = chartData;
    chart.categoryField = "date";
    chart.panEventsEnabled = true;
    graph1 = new AmCharts.AmGraph();
    graph1.lineColor = "#3B5998";
    graph1.fillColors = "#3B5998";
    graph1.negativeLineColor = "#f44336";
    graph1.negativeFillColors = "#f44336";
    graph1.lineAlpha = 0.5;
    graph1.fillAlphas = 0.3;
    graph1.lineThickness = 1;
    graph1.bullet = "round";
    graph1.valueField = "value1";
    graph1.bulletSizeField = "bulletSize";
    graph1.customBulletField = "bullet";
    graph1.labelText = "[[labelText]]";
    graph1.type = "column";
    graph1.bulletColor = "#FFA500";
    graph1.balloonText = "[[value]]";
    chart.addGraph(graph1);
    var catAxis = chart.categoryAxis;
    decorateCategoryAxis(catAxis);
    catAxis.parseDates = true;
    var valAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valAxis);
    chart.addValueAxis(valAxis);
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor);
    chart.addChartCursor(chartCursor);
    chart.export = buildExportConfig(chartDivId);
    decorateBalloon(chart.balloon);
    addChartWaterMark(chart);
    chart.write(chartDivId);
}

function displayPortfolioPerformanceChart(chartDivId, chartData, mainPortfolioTitle, marketTitle, otherPortfolioTitle, benchmarkTitle) {
    // alert(chartDivId);
    performanceChart = new AmCharts.AmSerialChart();
    // performanceChart.pathToImages = "/images/charts/";
    performanceChart.autoMargins = false;
    performanceChart.marginTop = 40;
    performanceChart.marginLeft = 0;
    performanceChart.marginBottom = 0;
    performanceChart.marginRight = 0;
    performanceChart.dataProvider = chartData;
    performanceChart.categoryField = "date";
    performanceChart.panEventsEnabled = true;
    var onePortfolio = false;
    if (mainPortfolioTitle == null || mainPortfolioTitle == "null" || mainPortfolioTitle == "Portfolio") {
        mainPortfolioTitle = "Portfolio";
        onePortfolio = true;
    }
    if (marketTitle == null || marketTitle == "null") {
        marketTitle = "Market";
    }
    mainPortfolioGraph = new AmCharts.AmGraph();
    mainPortfolioGraph.showBalloon = true;
    mainPortfolioGraph.lineColor = "#008000";
    mainPortfolioGraph.fillColors = "#008000";
    if (!chartDivId == "portfolioBacktestPerformance") {
        mainPortfolioGraph.negativeLineColor = "#DF0101";
        mainPortfolioGraph.negativeFillColors = "#DF0101";
    }
    mainPortfolioGraph.lineAlpha = 1;
    mainPortfolioGraph.title = mainPortfolioTitle;
    mainPortfolioGraph.fillAlphas = 0.3;
    mainPortfolioGraph.valueField = "mainPortfolio";
    mainPortfolioGraph.type = "smoothedLine";
    mainPortfolioGraph.lineThickness = 2;
    mainPortfolioGraph.balloonText = "[[title]] [[value]]%";
    performanceChart.addGraph(mainPortfolioGraph);
    marketGraph = new AmCharts.AmGraph();
    marketGraph.lineColor = "#f44336";
    marketGraph.fillColors = "#f44336";
    if (!chartDivId == "portfolioBacktestPerformance") {
        marketGraph.negativeLineColor = "#aaaaaa";
        marketGraph.negativeFillColors = "#aaaaaa";
    }
    marketGraph.fillAlphas = 0.1;
    marketGraph.lineThickness = 2;
    marketGraph.lineAlpha = 0.8
    marketGraph.title = marketTitle;
    marketGraph.dashLength = 3;
    marketGraph.valueField = "market";
    marketGraph.type = "smoothedLine";
    marketGraph.balloonText = "[[title]] [[value]]%";
    marketGraph.showBalloon = true;
    performanceChart.addGraph(marketGraph);
    // alert(otherPortfolioTitle);
    if (otherPortfolioTitle != null && otherPortfolioTitle != "null") {
        otherPortfolioGraph = new AmCharts.AmGraph();
        otherPortfolioGraph.showBalloon = true;
        otherPortfolioGraph.lineColor = "#3B5998";
        otherPortfolioGraph.fillColors = "#3B5998";
        otherPortfolioGraph.lineAlpha = 1;
        otherPortfolioGraph.fillAlphas = 0;
        otherPortfolioGraph.title = otherPortfolioTitle;
        otherPortfolioGraph.valueField = "otherPortfolio";
        otherPortfolioGraph.type = "smoothedLine";
        otherPortfolioGraph.lineThickness = 2;
        otherPortfolioGraph.balloonText = "[[title]] [[value]]%";
        performanceChart.addGraph(otherPortfolioGraph);
    } else {}
    if (onePortfolio) {
        mainPortfolioGraph.lineColor = "#3B5998";
        mainPortfolioGraph.fillColors = "#3B5998";
    }
    if (benchmarkTitle != null && benchmarkTitle != "null") {
        benchmarkGraph = new AmCharts.AmGraph();
        benchmarkGraph.showBalloon = true;
        benchmarkGraph.lineColor = "#3B5998";
        benchmarkGraph.fillColors = "#3B5998";
        benchmarkGraph.negativeLineColor = "#DF0101";
        benchmarkGraph.negativeFillColors = "#DF0101";
        benchmarkGraph.lineAlpha = 1;
        benchmarkGraph.title = benchmarkTitle;
        benchmarkGraph.fillAlphas = 0;
        benchmarkGraph.dashLength = 11;
        benchmarkGraph.valueField = "benchmark";
        benchmarkGraph.type = "smoothedLine";
        benchmarkGraph.lineThickness = 3;
        benchmarkGraph.balloonText = "[[title]] [[value]]%";
        performanceChart.addGraph(benchmarkGraph);
    }
    var catAxis = performanceChart.categoryAxis;
    decorateCategoryAxis(catAxis);
    catAxis.parseDates = true;
    catAxis.autoGridCount = true;
    catAxis.showLastLabel = false;
    catAxis.equalSpacing = false;
    catAxis.startOnAxis = false;
    catAxis.offset = 10;
    catAxis.showFirstLabel = false;
    catAxis.inside = false;
    catAxis.color = "#f7f7f7";
    catAxis.position = "top";
    var valAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valAxis);
    valAxis.inside = true;
    valAxis.position = "left";
    valAxis.color = "#fff";
    valAxis.axisAlpha = 0;
    valAxis.fillAlpha = 0;
    valAxis.gridColor = "#ffffff";
    valAxis.fillColor = "#cccccc";
    valAxis.gridAlpha = 0;
    performanceChart.addValueAxis(valAxis);
    // var valAxis2 = new AmCharts.ValueAxis();
    // decorateValueAxis(valAxis2);
    // valAxis2.position="right";
    // performanceChart.addValueAxis(valAxis2);
    // CURSOR
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor);
    chartCursor.categoryBalloonDateFormat = "MM-DD-YYYY";
    chartCursor.behindColumns = true;
    chartCursor.valueBalloonsEnabled = true;
    decorateBalloon(performanceChart.balloon);
    performanceChart.addChartCursor(chartCursor);
    // alert("1");
    // SCROLLBAR
    var chartScrollbar = new AmCharts.ChartScrollbar();
    chartScrollbar.graph = mainPortfolioGraph;
    decorateScrollBarChart(chartScrollbar);
    performanceChart.addChartScrollbar(chartScrollbar);
    chartScrollbar.scrollbarHeight = 40;
    // alert("2");
    // LEGEND
    setLegendForLineChart(performanceChart);
    // performanceChart.addLegend(legend);
    // performanceChart.addLabel(0,20,"Macroaxis
    // Charts","center",12,"#aaaaaa",0,0.5,false,"http://www.macroaxis.com");
    addChartWaterMark(performanceChart);
    performanceChart.export = buildExportConfig(chartDivId);
    performanceChart.write(chartDivId);
    var newContainer = document.getElementById("performanceProgress");
    // alert(newContainer);
    if (newContainer) {
        newContainer.innerHTML = "";
    }
}

function displayThemePerformanceChart(chartDivId, chartData, themeTitle, optimimalThemeTitle, marketTitle, themeBenchmarkTitle) {
    performanceChart = new AmCharts.AmSerialChart();
    // performanceChart.pathToImages = "/images/charts/";
    setUpLineMargings(performanceChart);
    performanceChart.autoMargins = false;
    performanceChart.marginTop = -10;
    performanceChart.marginLeft = -1;
    performanceChart.marginBottom = 30;
    performanceChart.marginRight = 0;
    performanceChart.dataProvider = chartData;
    performanceChart.categoryField = "date";
    // alert(chartData);
    graph1 = new AmCharts.AmGraph();
    graph1.showBalloon = true;
    graph1.lineColor = "#3B5998";
    graph1.fillColors = "#3B5998";
    graph1.lineAlpha = 0.9;
    graph1.title = themeTitle;
    graph1.fillAlphas = 0.1;
    graph1.valueField = "value1";
    graph1.type = "smoothedLine";
    graph1.lineThickness = 3;
    graph1.balloonText = "[[title]] [[value]]%";
    performanceChart.addGraph(graph1);
    if (optimimalThemeTitle != null && optimimalThemeTitle != "null") {
        graph2 = new AmCharts.AmGraph();
        graph2.showBalloon = true;
        graph2.lineColor = "#0B610B";
        graph2.fillColors = "#0B610B";
        graph2.lineAlpha = 0.9;
        graph2.title = optimimalThemeTitle;
        graph2.fillAlphas = 0.1;
        graph2.valueField = "value2";
        graph2.type = "smoothedLine";
        graph2.lineThickness = 3;
        graph2.balloonText = "[[title]] [[value]]%";
        graph2.showBalloon = true;
        performanceChart.addGraph(graph2);
    }
    graph3 = new AmCharts.AmGraph();
    graph3.lineColor = "#f44336";
    graph3.fillColors = "#f44336";
    graph3.fillAlphas = 0.2;
    graph3.lineThickness = 3;
    graph3.lineAlpha = 0.9
    graph3.title = marketTitle;
    graph3.valueField = "value3";
    graph3.type = "smoothedLine";
    graph3.balloonText = "[[title]] [[value]]%";
    graph3.showBalloon = true;
    performanceChart.addGraph(graph3);
    // alert(themeBenchmarkTitle+" "+marketTitle);
    if (themeBenchmarkTitle != marketTitle) {
        graph4 = new AmCharts.AmGraph();
        graph4.lineColor = "orange";
        graph4.fillColors = "orange";
        graph4.dashLength = 11;
        graph4.fillAlphas = 0.1;
        graph4.lineThickness = 3;
        graph4.lineAlpha = 1
        graph4.title = themeBenchmarkTitle;
        graph4.valueField = "value4";
        graph4.type = "smoothedLine";
        graph4.balloonText = "[[title]] [[value]]%";
        graph4.showBalloon = true;
        performanceChart.addGraph(graph4);
    }
    var catAxis = performanceChart.categoryAxis;
    decorateCategoryAxis(catAxis);
    catAxis.parseDates = true;
    // catAxis.autoGridCount = true;
    var valAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valAxis);
    valAxis.inside = true;
    valAxis.position = "left";
    valAxis.color = "#fff";
    valAxis.axisAlpha = 0;
    valAxis.fillAlpha = 0;
    valAxis.gridColor = "#ffffff";
    valAxis.fillColor = "#cccccc";
    valAxis.gridAlpha = 0;
    performanceChart.addValueAxis(valAxis);
    // CURSOR
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor, true);
    chartCursor.categoryBalloonDateFormat = "MM-DD-YYYY";
    // chartCursor.behindColumns=true;
    decorateBalloon(performanceChart.balloon);
    performanceChart.addChartCursor(chartCursor);
    // SCROLLBAR
    // var chartScrollbar = new AmCharts.ChartScrollbar();
    // chartScrollbar.graph = graph1;
    // decorateScrollBarChart(chartScrollbar);
    // performanceChart.addChartScrollbar(chartScrollbar);
    // LEGEND
    var legend = setLegendForLineChart(performanceChart);
    legend.position = "top";
    // alert(performanceChart.position);
    addChartWaterMark(performanceChart);
    // performanceChart.export = buildExportConfig(chartDivId);
    performanceChart.write(chartDivId);
    var newContainer = document.getElementById("performanceProgress");
    // alert(newContainer);
    if (newContainer) {
        newContainer.innerHTML = "";
    }
}

function testSymbolAndIndexHighLowChart(chartDivId) {
    var firstDate = new Date();
    var chartData = [];
    firstDate.setHours(0, 0, 0, 0);
    firstDate.setDate(firstDate.getDate() - 100);
    for (var i = 0; i < 100; i++) {
        var newDate = new Date(firstDate);
        newDate.setDate(newDate.getDate() + i);
        var open = Math.round(Math.random() * (30) + 100);
        var close = open +
            Math.round(Math.random() * (15) - Math.random() * 10);
        var low
        if (open < close) {
            low = open - Math.round(Math.random() * 5);
        } else {
            low = close - Math.round(Math.random() * 5);
        }
        var high;
        if (open < close) {
            high = close + Math.round(Math.random() * 5);
        } else {
            high = open + Math.round(Math.random() * 5);
        }
        var volume = Math.round(Math.random() * (1000 + i)) + 100 + i;
        var value = Math.round(Math.random() * (30) + 100);
        chartData[i] = ({
            date: newDate,
            open: open,
            close: close,
            high: high,
            low: low,
            volume: volume,
            value: value
        });
    }
    displaySymbolAndIndexHighLowChart(chartDivId, chartData);
}

function displaySymbolAndIndexHighLowChart(chartDivId, chartData) {
    var chart = new AmCharts.AmStockChart();
    // chart.pathToImages = "/images/charts/";
    // DATASET //////////////////////////////////////////
    var dataSet = new AmCharts.DataSet();
    dataSet.fieldMappings = [{
        fromField: "open",
        toField: "open"
    }, {
        fromField: "close",
        toField: "close"
    }, {
        fromField: "high",
        toField: "high"
    }, {
        fromField: "low",
        toField: "low"
    }, {
        fromField: "volume",
        toField: "volume"
    }, {
        fromField: "value",
        toField: "value"
    }];
    dataSet.color = "#aaaaaa";
    dataSet.dataProvider = chartData;
    dataSet.title = "Equity";
    dataSet.categoryField = "date";
    var dataSet2 = new AmCharts.DataSet();
    dataSet2.fieldMappings = [{
        fromField: "value",
        toField: "value"
    }];
    dataSet2.color = "#f44336";
    dataSet2.dataProvider = chartData;
    dataSet2.compared = true;
    dataSet2.title = "Market";
    dataSet2.categoryField = "date";
    chart.dataSets = [dataSet, dataSet2];
    // PANELS ///////////////////////////////////////////
    stockPanel = new AmCharts.StockPanel();
    stockPanel.showCategoryAxis = false;
    stockPanel.percentHeight = 70;
    stockPanel.eraseAll = false;
    var valueAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valueAxis);
    stockPanel.addValueAxis(valueAxis);
    // graph of first stock panel
    var graph = new AmCharts.StockGraph();
    graph.type = "candlestick";
    graph.openField = "open";
    graph.closeField = "close";
    graph.highField = "high";
    graph.lowField = "low";
    graph.valueField = "close";
    graph.lineColor = "#008000";
    graph.fillColors = "#008000";
    graph.negativeLineColor = "#DF0101";
    graph.negativeFillColors = "#DF0101";
    graph.fillAlphas = .9;
    graph.useDataSetColors = false;
    graph.comparable = true;
    graph.compareField = "value";
    graph.compareGraphType = "smoothedLine";
    graph.compareGraphLineThickness = 1;
    graph.compareGraphFillAlphas = .5;
    graph.compareGraphFillColors = "#f44336";
    // graph.showBalloon = false;
    stockPanel.addStockGraph(graph);
    stockPanel.drawingIconsEnabled = true;
    stockPanel.iconSize = 24;
    stockPanel.trendLineColor = "#f44336";
    stockPanel.rendLineThickness = 1;
    stockPanel.trendLineDashLength = 3;
    var catAxis1 = stockPanel.categoryAxis;
    decorateCategoryAxis(catAxis1);
    stockPanel2 = new AmCharts.StockPanel();
    stockPanel2.percentHeight = 30;
    stockPanel2.marginTop = 1;
    stockPanel2.showCategoryAxis = true;
    var valueAxis2 = new AmCharts.ValueAxis();
    decorateValueAxis(valueAxis2);
    stockPanel2.addValueAxis(valueAxis2);
    var catAxis2 = stockPanel2.categoryAxis;
    decorateCategoryAxis(catAxis2);
    var graph2 = new AmCharts.StockGraph();
    graph2.valueField = "volume";
    graph2.type = "column";
    graph2.lineColor = "#3b5998";
    graph2.fillColors = "#3b5998";
    // alert(graph2.fillColors);
    // graph2.showBalloon = false;
    graph2.fillAlphas = .8;
    stockPanel2.addStockGraph(graph2);
    decorateBalloon(chart.balloon);
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor);
    stockPanel.addChartCursor(chartCursor);
    stockPanel2.addChartCursor(chartCursor);
    chart.panels = [stockPanel, stockPanel2];
    var legend = new AmCharts.StockLegend();
    legend.equalWidths = false;
    legend.bulletType = "line";
    legend.markerBorderThickness = 1;
    legend.markerType = "line";
    legend.markerBorderColor = "#6E6E6E";
    legend.markerBorderThickness = 5;
    legend.markerSize = 34;
    // legend.borderAlpha = 1;
    legend.textClickEnabled = true;
    legend.useGraphSettings = false;
    legend.marginLeft = 16;
    legend.autoMargins = false;
    legend.color = "#3B5998";
    stockPanel.addLegend(legend);
    // OTHER SETTINGS ////////////////////////////////////
    var sbsettings = new AmCharts.ChartScrollbarSettings();
    sbsettings.graph = graph;
    sbsettings.graphType = "line";
    decorateScrollBarChartSettings(sbsettings);
    chart.chartScrollbarSettings = sbsettings;
    chart.export = buildExportConfig(chartDivId);
    // setLegendForLineChart(chart);
    // chart.addLabel(0,50,"Macroaxis
    // Charts","center",20,"#dddddd",0,0.5,false,"http://www.macroaxis.com");
    chart.write(chartDivId);
}

function displayPostGenericTreeMapChart(symbolicId, showPercent) {
    if (!symbolicId || symbolicId == null) {
        symbolicId = "0";
    }
    var pieBlockId = symbolicId + "_genericPie";
    var pieBlock = document.getElementById(pieBlockId);
    // alert(pieBlockId+" "+pieBlock);
    if (pieBlock) {
        var pieLabels = document.getElementById(symbolicId + "pieLabels");
        var pieValues = document.getElementById(symbolicId + "pieValues");
        // alert(pieLabels.innerHTML);
        var chartData = getChartDataFromLabelAndValueArray(pieLabels, pieValues);
        displayGenericTreeMapChartInlineNew(chartData, pieBlockId, showPercent);
    }
}

function displayPostGenericPieChart(symbolicId, showPercent) {
    // alert(symbolicId);
    if (!symbolicId || symbolicId == null) {
        symbolicId = "0";
    }
    var pieBlockId = symbolicId + "_genericPie";
    var pieBlock = document.getElementById(pieBlockId);
    if (pieBlock) {
        var pieLabels = document.getElementById(symbolicId + "pieLabels");
        var pieValues = document.getElementById(symbolicId + "pieValues");
        // alert(pieBlock +" "+pieBlockId);
        if (showPercent) {
            displayGenericPieChart(symbolicId, pieLabels.value.split(","),
                pieValues.value.split(","), true);
        } else {
            displayGenericPieChart(symbolicId, pieLabels.value.split(","),
                pieValues.value.split(","), false);
        }
    }
}

function setUpV4Export(chart, name, position) {
    chart.exporting.menu = new am4core.ExportMenu();
    chart.exporting.menu.items[0].label = "<i class=\"fad fa-arrow-to-bottom fa-lg p-t-5 c-white\"></a>";
    //chart.exporting.filePrefix = "macroaxis" + name;
    if (position) {
        if (position == "rightBottom") {
            chart.exporting.menu.align = "right";
            chart.exporting.menu.verticalAlign = "bottom";
        } else if (position == "leftBottom") {
            chart.exporting.menu.align = "left";
            chart.exporting.menu.verticalAlign = "bottom";
        } else if (position == "outside") {
        	alert( document.getElementById(name+"_menu"));
        	chart.exporting.menu.container = document.getElementById(name+"_menu");
        } else {
            chart.exporting.menu.align = position;
            chart.exporting.menu.verticalAlign = "top";
        }
    } else {
    	 chart.exporting.menu.align = "left";
         chart.exporting.menu.verticalAlign = "bottom";
    }
}

function displayGenericTreeMapChartInlineNew(chartData, pieBlockId, showPercent) {
     //alert(pieBlockId);

        am4core.options.commercialLicense = true;
        am4core.useTheme(am4themes_animated);
        var chart = am4core.create(pieBlockId, am4charts.TreeMap);
        chart.data = chartData;
        chart.dataFields.value = "value";
        chart.dataFields.name = "label";
        chart.marginTop = 0;
        chart.marginLeft = 0;
        chart.marginRight = 0;
        chart.paddingTop = 0;
        chart.paddingLeft = 0;
        chart.paddingRight = 0;
        chart.paddingTop = 0;
        chart.paddingBottom = 40;
        chart.width = "100%"
        chart.height = "100%"
        chart.contentValign = "top"
        // var watermark = new am4core.Label();
        // watermark.text = "asdfasdfasdf";
        // chart.plotContainer.children.push(watermark);
        // watermark.align = "center";
        // watermark.valign = "middle";
        var colorSet = new am4core.ColorSet();
        //array.reverse()  
        var scoreVE = document.getElementById(pieBlockId + "Score");
        var titleVE = document.getElementById(pieBlockId + "Title");
        var level1 = chart.seriesTemplates.create("0");
        var level1_column = level1.columns.template;
        if (pieBlockId.indexOf("smallAllocation") != -1 || pieBlockId.indexOf("dashboard") != -1) {
            level1_column.column.cornerRadius(0, 0, 0, 0);
            level1_column.fillOpacity = 0.8;
            level1_column.stroke = am4core.color("#fff");
            level1_column.strokeWidth = 0;
            level1_column.strokeOpacity = 1;
            colorSet.list = chartColors.map((function(color) {
                return new am4core.color(color);
            }));
            chart.paddingBottom = 0;
            // level1.slices.template.cornerRadius = 5;cachDebtColors
        } else if (pieBlockId.indexOf("side") != -1) {
            // level1_column.column.cornerRadius(5, 5, 5, 5);
            // level1_column.fillOpacity = 0.8;
            level1_column.column.cornerRadius(0, 0, 0, 0);
            level1_column.strokeWidth = 0;
            level1_column.stroke = am4core.color("#eee");
            //alert(pieBlockId);
            if (pieBlockId.indexOf("sideFull_genericPie") != -1) {
            	setUpV4Export(chart,"Portfolio");
            } else {
            	 chart.paddingBottom = 0;
            }
            colorSet.list = chartColors.map((function(color) {
                return new am4core.color(color);
            }));
           
        } else if (pieBlockId.indexOf("cashToDebtAllocationPie") != -1) {

            colorSet.list = cachDebtColors.map((function(color) {
                return new am4core.color(color);
            }));
            chart.paddingBottom = 0;
        } else if (pieBlockId.indexOf("buySell") != -1) {
            // level1_column.column.cornerRadius(5, 5, 5, 5);
            // level1_column.fillOpacity = 0.8;
            level1_column.column.cornerRadius(0, 0, 0, 0);
            level1_column.strokeWidth = 0;
            level1_column.stroke = am4core.color("#eee");
            // setUpV4Export(chart,"Portfolio");
            chart.sorting = "none";
            //pieSeries.alignLabels = false;
            chart.dataFields.color = "color";
            chart.paddingBottom = 0;
            //colorSet.list =buySellColors.map(function(color) {
            //  return new am4core.color(color);
            //});
        } else if (pieBlockId.indexOf("assetMap") != -1) {
            colorSet.list = assetsColors.map((function(color) {
                return new am4core.color(color);
            }));
        } else if (pieBlockId.indexOf("welcome") != -1) {
            // level1_column.column.cornerRadius(5, 5, 5, 5);
            // level1_column.fillOpacity = 0.5;
        	chart.paddingBottom = 0;
            level1_column.column.cornerRadius(0, 0, 0, 0);
            level1_column.strokeWidth = 0;
            // setUpV4Export(chart,"Portfolio");
            colorSet.list = chartColors.map((function(color) {
                return new am4core.color(color);
            }));
        } else {
            setUpV4Export(chart, "Portfolio");
            // level1_column.column.cornerRadius(3, 3, 3, 3);
            level1_column.column.cornerRadius(0, 0, 0, 0);
            // level1_column.fillOpacity = 0.5;
            level1_column.stroke = am4core.color("#fff");
            level1_column.strokeWidth = 0;
            // level1_column.strokeOpacity = 1;
            colorSet.list = chartColors.map((function(color) {
                return new am4core.color(color);
            }));
        }

        
        if (!pieBlockId.startsWith("buySell")) {
        	level1_column.column.cornerRadius(5, 5, 5, 5);
        }

        chart.colors = colorSet;
        //alert(pieBlockId);
        if (pieBlockId.startsWith("mc") || pieBlockId.startsWith("it")) {
            //alert(pieBlockId);
            colorSet.list = chartColors2.map((function(color) {
                return new am4core.color(color);
            }));
            // level1.slices.template.cornerRadius = 5;
        }
        /* Add bullet labels */
        var level1_bullet = level1.bullets.push(new am4charts.LabelBullet());
        // level1_column.strokeWidth = 1;
        // level1_column.stroke = am4core.color("#fff");
        level1_bullet.locationY = 0.5;
        level1_bullet.locationX = 0.5;
        level1_bullet.label.text = "{name}";
        level1_bullet.label.fill = am4core.color("#fff");
        //level1_column.column.cornerRadius(4, 4, 4, 4);
        //level1_column.column.strokeWidth = 2;
        adjustV4TreeMapLabelsShow(chart, level1_bullet, 7);
        // dateAxis.adapter.add("getTooltipText", function(text, target, key) {
        // return ">>> " + text + " <<<";
        // });
    
}

function displayGenericRadarChartInlineNew(chartData, pieBlockId, showPercent) {
    var d1 = $.Deferred();
    d1.done((function() {
        am4core.options.commercialLicense = true;
        am4core.useTheme(am4themes_animated);
        var chart = am4core.create(pieBlockId, am4charts.RadarChart);
        setUpV4BigNumbers(chart.numberFormatter, chartData);
        chart.paddingTop = 50;
        chart.paddingLeft = 10;
        chart.paddingRight = 10;
        chart.paddingBottom = 30;
        var max = hasV4DataMax(chartData);
        //alert(max);
        var min = hasV4DataMin(chartData);
        var mid = max / 2;
        // alert(am4core.NumberFormatter);
        // chart.numberFormatter.numberFormat = "#,###.0000";
        setUpV4Export(chart, "RadarChart");
        chart.data = chartData;
        var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
        categoryAxis.dataFields.category = "label";
        categoryAxis.renderer.labels.template.location = 0.5;
        var label = categoryAxis.renderer.labels.template;
        label.wrap = true;
        label.maxWidth = 140;
        label.tooltipText = "{category}";
        var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
        valueAxis.renderer.labels.template.verticalCenter = "bottom";
        valueAxis.renderer.labels.template.fillOpacity = 0.5;
        valueAxis.renderer.maxLabelPosition = 0.8;
        valueAxis.baseValue = 0;
        valueAxis.tooltip.disabled = true;
        valueAxis.renderer.grid.template.strokeOpacity = 0.05;
        valueAxis.renderer.axisFills.template.disabled = true;
        valueAxis.renderer.labels.template.horizontalCenter = "right";
        chart.startAngle = -110;
        chart.endAngle = -70;
        chart.innerRadius = am4core.percent(50);
        chart.radius = am4core.percent(95);
        valueAxis.renderer.axisAngle = -111;
        if (!hasV4DataNegatives(chart.data)) {
            if (chartData.length == 3) {
                chart.startAngle = 90;
                chart.endAngle = 180;
                valueAxis.renderer.axisAngle = 180;
                chart.innerRadius = am4core.percent(20);
                chart.radius = am4core.percent(90);
                valueAxis.renderer.maxLabelPosition = 0.8;
                valueAxis.renderer.minLabelPosition = 0.2;
                chart.paddingTop = 10;
                chart.paddingLeft = 0;
                chart.paddingRight = 0;
                chart.paddingBottom = 0;
            }
            // valueAxis.logarithmic=true;
        }
        // valueAxis.layout="vertical";
        /* Create and configure series */
        var series1 = chart.series.push(new am4charts.RadarColumnSeries());
        series1.dataFields.valueY = "value";
        series1.dataFields.categoryX = "label";
        series1.name = "";
        series1.strokeWidth = 0;
        series1.columns.template.tooltipText = "{categoryX}\n{valueY}";
        series1.sequencedInterpolation = true;
        // series1.sequencedInterpolationDelay = 100;
        series1.stacked = true;
        series1.columns.template.fill = am4core.color("#FF0F00");
        var labelBullet = new am4charts.LabelBullet();
        series1.bullets.push(labelBullet);
        labelBullet.label.hideOversized = true;
        //labelBullet.label.ellipsis = "...";
        // setUpV4BigNumbersLabel(labelBullet,max,min);
        // labelBullet.label.text = "{valueY.value.formatNumber('#,##a')}";
        // labelBullet.label.fill = am4core.color("#ffffff");
        // labelBullet.dy = 40;
        // series1.columns.template.column.cornerRadiusTopLeft = 10;
        // series1.columns.template.column.cornerRadiusTopRight = 10;
    }));
    d1.resolve();
}

function displayGenericPieChartInlineNew(chartData, pieBlockId, showPercent) {
    //alert(pieBlockId);
    if (pieBlockId == "opt0_genericPie" ||
        pieBlockId == "pitchPie_genericPie" ||
        pieBlockId == "side_genericPie" ||
        pieBlockId == "sideFull_genericPie" ||
        pieBlockId.indexOf("smallAllocation") != -1 ||
        pieBlockId.indexOf("dashboard") != -1 ||
        pieBlockId == "pitchPie_genericPie" ||
        pieBlockId == "cur0_genericPie" ||
        pieBlockId == "optidea_genericPie" ||
        pieBlockId == "sector_genericPie" ||
        pieBlockId == "cashToDebtAllocationPie" ||
        pieBlockId == "welcome_genericPie" ||
        pieBlockId == "0backtest_genericPie" ||
        pieBlockId == "1backtest_genericPie" ||
        pieBlockId == "s_genericPie" ||
        pieBlockId == "it_genericPie" ||
        pieBlockId == "watchListOptimized_genericPie" ||
        pieBlockId == "cryptoExchangeOptimized_genericPie" ||
        pieBlockId == "curidea_genericPie") {
        return displayGenericTreeMapChartInlineNew(chartData, pieBlockId, showPercent);
    } else if (pieBlockId == "itpitch_genericPie" || pieBlockId == "mcpitch_genericBars") {
        return displayGenericRadarChartInlineNew(chartData, pieBlockId, showPercent);
    } else if (pieBlockId == "sectorsPie_genericPie" || pieBlockId == "currency_genericPie") {
        return displayGenericTreeMapChartInlineNew(chartData, pieBlockId, showPercent);
    }
    var d1 = $.Deferred();
    d1.done((function() {
        am4core.options.commercialLicense = true;
        am4core.useTheme(am4themes_animated);
        var chart = am4core.create(pieBlockId, am4charts.PieChart);
        // setUpV4BigNumbers(chart,chartData);
        chart.data = chartData;
        chart.marginTop = 0;
        chart.marginLeft = 0;
        chart.marginRight = 0;
        chart.paddingTop = 0;
        chart.paddingLeft = 0;
        chart.paddingRight = 0;
        chart.width = "100%"
        chart.height = "100%"
        chart.contentValign = "top"
        chart.radius = am4core.percent(100);
        chart.responsive.enabled = true;
        var colorSet = new am4core.ColorSet();
        colorSet.list = chartColors.map((function(color) {
            return new am4core.color(color);
        }));
        var pieSeries = chart.series.push(new am4charts.PieSeries());
        pieSeries.slices.template.cornerRadius = 5;
        pieSeries.dataFields.value = "value";
        pieSeries.dataFields.category = "label";
        pieSeries.dataFields.radiusValue = "value";
        adjustV4LabelsShow(pieSeries, 1);
        pieSeries.labels.template.fill = am4core.color("gray");
        // alert(pieBlockId);
        if (pieBlockId == "side_genericPie") {
            pieSeries.labels.template.text = "";
            chart.radius = am4core.percent(76);
            chart.innerRadius = am4core.percent(50);
            pieSeries.alignLabels = false;
        } else if (pieBlockId == "mc_genericBars") {
            pieSeries.labels.template.text = "{category}";
            chart.radius = am4core.percent(86);
            chart.innerRadius = am4core.percent(40);
            pieSeries.alignLabels = false;
            chart.startAngle = 120;
            chart.endAngle = 170;
        } else if (pieBlockId == "watchListOptimized_genericPie") {
            chart.radius = am4core.percent(80);
            // chart.innerRadius = am4core.percent(66);
            pieSeries.alignLabels = false;
            adjustV4LabelsShow(pieSeries, 5);
            pieSeries.labels.template.text = "{category}";
            pieSeries.slices.template.cornerRadius = 5;
        } else if (pieBlockId == "widgetPie_genericPie") {
            pieSeries.labels.template.text = "{category}";
            chart.radius = am4core.percent(96);
            chart.innerRadius = am4core.percent(50);
            pieSeries.slices.template.cornerRadius = 10;
            pieSeries.slices.template.innerCornerRadius = 7;
            pieSeries.slices.template.draggable = true;
            pieSeries.slices.template.inert = true;
            pieSeries.alignLabels = true;
            pieSeries.hiddenState.properties.startAngle = 90;
            pieSeries.hiddenState.properties.endAngle = 90;
            adjustV4LabelsShow(pieSeries, 6);
        } else if (pieBlockId == "0backtest_genericPie" ||
            pieBlockId == "1backtest_genericPie"
        ) {
            pieSeries.labels.template.text = "{category}";
            // chart.radius = am4core.percent(96);
            chart.innerRadius = am4core.percent(50);
            chart.width = am4core.percent(100);
            chart.radius = am4core.percent(100)
            // chart.radius = am4core.percent(100);
            // chart.innerRadius = am4core.percent(20);
            pieSeries.slices.template.cornerRadius = 3;
            pieSeries.slices.template.innerCornerRadius = 2;
            pieSeries.slices.template.draggable = true;
            pieSeries.slices.template.inert = true;
            pieSeries.alignLabels = true;
            // pieSeries.hiddenState.properties.startAngle = 90;
            // pieSeries.hiddenState.properties.endAngle = 90;
            adjustV4LabelsShow(pieSeries, 6);
            // chart.startAngle = 180;
            // chart.endAngle = 360;
        } else if (pieBlockId == "roaPie") {
            pieSeries.labels.template.text = "{category}";
            chart.radius = am4core.percent(80);
            chart.innerRadius = am4core.percent(50);
            pieSeries.alignLabels = true;
            chart.startAngle = 180;
            chart.endAngle = 360;
            // adjustV4LabelsShow(pieSeries, 10);
        } else if (pieBlockId == "etfInd_genericBars") {
            setUpV4Export(chart, "etfExposure");
            pieSeries.labels.template.text = "{category}";
            var label = pieSeries.labels.template;
            label.wrap = true;
            chart.radius = am4core.percent(100);
            chart.innerRadius = am4core.percent(80);
            pieSeries.alignLabels = false;
            chart.startAngle = 135;
            chart.endAngle = 360;
            chart.paddingBottom = 40;
            chart.paddingTop = 0;
            chart.paddingRight = 0;
            chart.paddingLeft = 50;
            adjustV4LabelsShow(pieSeries, 4);
        } else if (pieBlockId == "totalComparePie") {
            setUpV4Export(chart, "etfExposure");
            pieSeries.labels.template.text = "{category}";
            var label = pieSeries.labels.template;
            label.wrap = true;
            pieSeries.alignLabels = true;
            chart.startAngle = 180;
            chart.endAngle = 360;
            pieSeries.slices.template.inert = true;
            chart.radius = am4core.percent(70);
            chart.innerRadius = am4core.percent(40);
            pieSeries.hiddenState.properties.startAngle = 90;
            pieSeries.hiddenState.properties.endAngle = 90;
            chart.paddingBottom = 0;
            chart.paddingTop = 20;
            chart.paddingRight = 20;
            chart.paddingLeft = 20;
            formatV4Legend(chart, "bottom");
            adjustV4LabelsShow(pieSeries, 1);
        } else if (pieBlockId == "spitch_genericBars") {
            setUpV4Export(chart, "PieChart");
            pieSeries.labels.template.text = "{category}";
            chart.radius = am4core.percent(86);
            chart.innerRadius = am4core.percent(40);
            pieSeries.alignLabels = false;
            adjustV4LabelsShow(pieSeries, 10);
        } else if (pieBlockId == "welcome_genericPie") {
            chart.radius = am4core.percent(80);
            // chart.innerRadius = am4core.percent(66);
            pieSeries.alignLabels = false;
            adjustV4LabelsShow(pieSeries, 5);
            chart.startAngle = 180;
            chart.endAngle = 360;
            pieSeries.labels.template.text = "{category}";
            pieSeries.slices.template.cornerRadius = 5;
        } else if (pieBlockId == "s_genericBars") {
            setUpV4Export(chart, "PieChart");
            pieSeries.labels.template.text = "{category}";
            adjustV4LabelsShow(pieSeries, 5);
            pieSeries.alignLabels = false;
            pieSeries.slices.template.cornerRadius = 5;
            chart.radius = am4core.percent(86);
            chart.innerRadius = am4core.percent(40);
        } else if (pieBlockId == "sideFull_genericPie") {
            pieSeries.labels.template.text = "";
            chart.radius = am4core.percent(76);
            chart.innerRadius = am4core.percent(50);
            pieSeries.alignLabels = false;
        } else if (pieBlockId == "-3_genericPie") {
            // chart.legend = new am4charts.Legend();
            chart.radius = am4core.percent(70);
            chart.innerRadius = am4core.percent(40);
            chart.startAngle = 180;
            chart.endAngle = 360;
            pieSeries.alignLabels = true;
            colorSet.list = buySellColors.map((function(color) {
                return new am4core.color(color);
            }));
            pieSeries.labels.template.text = "{category}";
            pieSeries.slices.template.cornerRadius = 10;
            pieSeries.slices.template.innerCornerRadius = 7;
            pieSeries.slices.template.draggable = true;
            pieSeries.slices.template.inert = true;
            pieSeries.alignLabels = false;
            pieSeries.hiddenState.properties.startAngle = 90;
            pieSeries.hiddenState.properties.endAngle = 90;
            chart.legend = new am4charts.Legend();
        } else if (pieBlockId.indexOf("dashboard") != -1) {
            pieSeries.labels.template.text = "{category}";
            chart.radius = am4core.percent(85);
            pieSeries.labels.template.fill = am4core.color("#AAAAAA");
            // chart.innerRadius = am4core.percent(60);
            pieSeries.alignLabels = false;
            pieSeries.slices.template.cornerRadius = 2;
            pieSeries.alignLabels = false;
            pieSeries.labels.template.bent = true;
            pieSeries.labels.template.radius = 3;
            pieSeries.labels.template.padding(0, 0, 0, 0);
            adjustV4LabelsShow(pieSeries, 10);
        } else if (pieBlockId == "sectorsPie_genericPie") {
            setUpV4Export(chart, "PieChart");
            pieSeries.labels.template.text = "";
            chart.radius = am4core.percent(96);
            chart.innerRadius = am4core.percent(70);
            pieSeries.labels.template.text = "{category}";
            pieSeries.alignLabels = true;
            pieSeries.slices.template.cornerRadius = 5;
            formatV4Legend(chart);
        } else if (pieBlockId == "0_genericPie") {
            setUpV4Export(chart, "PieChart");
            chart.radius = am4core.percent(90);
            pieSeries.labels.template.text = "{category}\n{value}";
            pieSeries.labels.template.fontSize = 12;
            adjustV4LabelsShow(pieSeries, 6);
            pieSeries.labels.template.radius = am4core.percent(10);
            pieSeries.alignLabels = false;
            pieSeries.slices.template.cornerRadius = 5;
            // chart.innerRadius = am4core.percent(80);
            // chart.startAngle =90;
            // chart.endAngle = 360;
            chart.fixedWidthGrid = true;
            formatV4Legend(chart);
        } else if (pieBlockId.indexOf("smallAllocation") != -1) {
            chart.radius = am4core.percent(100);
            pieSeries.labels.template.text = "";
            chart.innerRadius = am4core.percent(40);
            // pieSeries.labels.template.radius = am4core.percent(10);
            pieSeries.alignLabels = false;
            // chart.fixedWidthGrid = false;
            // pieSeries.labels.template.text = "";
            // chart.legend = new am4charts.Legend();
        } else if (pieBlockId.indexOf("cashToDebtAllocationPie") != -1) {
            chart.radius = am4core.percent(80);
            pieSeries.labels.template.text = "{category}";
            chart.innerRadius = am4core.percent(40);
            var colorSet = new am4core.ColorSet();
            colorSet.list = binaryColors.map((function(color) {
                return new am4core.color(color);
            }));
            pieSeries.alignLabels = true;
            formatV4Legend(chart, "left");
            chart.startAngle = 90;
            chart.endAngle = 360;
        } else {
            pieSeries.labels.template.text = "{category}";
            chart.radius = am4core.percent(100);
            chart.innerRadius = am4core.percent(40);
            pieSeries.alignLabels = false;
        }
        pieSeries.colors = colorSet;
    }));
    d1.resolve();
    // chart.colors=chartColors;
    // pieSeries.colors.step = 3;
    // pieSeries.hiddenState.properties.endAngle = -90;
}

function formatV4Legend(chart, position) {
    chart.legend = new am4charts.Legend();
    chart.legend.useDefaultMarker = false;
    if (position == "top") {
        chart.legend.marginBottom = 20;
    } else if (position == "bottom") {
        chart.legend.marginTop = 20;
    }
    var marker = chart.legend.markers.template.children.getIndex(0);
    if (position) {
        chart.legend.position = position;
    }
    let label = chart.legend.labels.template;
    //label.hideOversized = true;
    label.ellipsis = "";
    chart.legend.maxWidth = undefined;
    label.tooltipText = "{category}";
    // chart.legend.cornerRadius(12, 12, 12, 12);
    // legend.strokeWidth = 2;
    // legend.strokeOpacity = 1;
    // legend.stroke = am4core.color("#ccc");
}

function setV4ChartCursor(chart) {
    chart.cursor = new am4charts.XYCursor();
    //chart.cursor.lineX.stroke = am4core.color("#3B5998");
    //chart.cursor.lineX.strokeWidth = 4;
    //chart.cursor.lineX.strokeOpacity = 0.2;
    chart.cursor.fullWidthLineX = true;
    chart.cursor.lineX.strokeWidth = 0;
    chart.cursor.lineX.fill = am4core.color("#000");
    chart.cursor.lineX.fillOpacity = 0.1;
    chart.cursor.behavior = "selectX";
    chart.cursor.lineY.disabled = true;
}

function hasV4DataMax(data, useV2) {
    var max = parseFloat(data[data.length - 1].value);
    for (var i = 0; i < data.length; i++) {
        var c = parseFloat(data[i].value);
        if (c > max) {
            max = c;
        }
    }
    var max2 = 0;
    if (useV2) {
        max2 = parseFloat(data[data.length - 1].value2);
        for (var i = 0; i < data.length; i++) {
            var c = parseFloat(data[i].value2);
            if (c > max2) {
                max2 = c;
            }
        }
    } else {
        return max;
    }
    if (max2 > max) {
        return max2;
    } else {
        return max;
    }
}

function hasV4DataMin(data, useV2) {
    var min = parseFloat(data[data.length - 1].value);
    for (var i = 0; i < data.length; i++) {
        var c = parseFloat(data[i].value);
        if (c < min) {
            min = c;
        }
    }
    var min2 = 0;
    if (useV2) {
        min2 = parseFloat(data[data.length - 1].value2);
        for (var i = 0; i < data.length; i++) {
            var c = parseFloat(data[i].value2);
            if (c < min2) {
                min2 = c;
            }
        }
    } else {
        return min;
    }
    if (min2 < min) {
        return min2;
    } else {
        return min;
    }
}

function hasV4DataNegatives(data) {
    for (var i = 0; i < data.length; i++) {
        if (parseFloat(data[i].value) < 0) {
            return true;
        }
    }
    return false;
}

function hasV4AllDataNegatives(data) {
    for (var i = 0; i < data.length; i++) {
        if (parseFloat(data[i].value) > 0) {
            return false;
        }
    }
    return true;
}

function getV4DataTotal(data) {
    var total = 0;
    for (var i = 0; i < data.length; i++) {
        total += parseFloat(data[i].value);
    }
    return total;
}

function adjustV4TreeMapLabelsShow(chart, bullet, percentToHide) {
    bullet.label.adapter.add("populateString", (function(text, target) {
        var total = getV4DataTotal(chart.data);
        if(target.dataItem){
	        if (target.dataItem.value) {
		        var v = (target.dataItem.value / total) * 100;
		        // alert(v+" "+target.dataItem.value+" "+total);
		        if (v > percentToHide) {
		            return text + "\n" + roundToTwo(v) + "%";
		        } else {
		            return text;
		        }
	        } else {
	        	return "";
	        }
        } else {
        	return "";
        }
    }));
    bullet.label.hideOversized = true;
    bullet.label.ellipsis = "...";
}

function adjustV4LabelsShow(pieSeries, percentToHide) {
    pieSeries.labels.template.adapter.add("text", (function(label, target, key) {
        // if value is less than 1%:
        // alert(label +" "+key+" "+target);
    	if (target.dataItem) {
	        if (label == "Cash") {
	            target.dataItem.color = "#cccccc";
	            // alert(target.dataItem);
	        }
	        if (target.dataItem.values.value.percent < percentToHide) {
	            return "";
	        } else if (target.dataItem.values.value.percent > 20) {
	            return label; // +"\n("+roundToTwo(target.dataItem.values.value.percent)+"%)";
	        }
    	}
        return label;
    }));
    pieSeries.labels.template.hideOversized = true;
    pieSeries.labels.template.adapter.add("radius", (function(radius, target) {
        // if value is less than 1%:
    	if (target.dataItem) {
	        if (target.dataItem.values.value.percent < percentToHide) {
	            return 0;
	        }
    	}
        return radius;
    }));
}

function displayGenericPieChartInline(chartData, pieBlockId, showPercent) {
    var chart = new AmCharts.AmPieChart();
    chart.addClassNames = true;
    chart.responsive = true;
    chart.dataProvider = chartData;
    chart.color = "gray";
    chart.autoMargins = true;
    chart.alpha = 0.6;
    chart.titleField = "label";
    chart.valueField = "value";
    chart.outlineThickness = 0;
    chart.groupedColor = "#dddddd";
    chart.innerRadius = "65%";
    chart.groupPercent = 5;
    chart.outlineAlpha = 1;
    chart.numberFormatter = {
        decimalSeparator: ".",
        thousandsSeparator: ",",
        precision: 2
    };
    chart.adjustPrecision = true;
    var scoreVE = document.getElementById(pieBlockId + "Score");
    var titleVE = document.getElementById(pieBlockId + "Title");
    chart.labelRadius = 12;
    chart.adjustPrecision = true;
    chart.startDuration = 0;
    chart.fontSize = 12;
    chart.autoMargins = false;
    chart.marginTop = 35;
    chart.marginBottom = 15;
    chart.marginLeft = 15;
    chart.marginRight = 15;
    chart.pullOutRadius = 0;
    chart.outlineColor = "#3B5998";
    chart.addListener("rollOverSlice", (function(e) {
        handleRollOver(e);
    }));
    chart.colorField = "color";
    if (pieBlockId != "side_genericPie" && pieBlockId != "sideFull_genericPie") {
        chart.export = buildExportConfig(pieBlockId);
    }
    if (showPercent) {
        chart.angle = 60;
        chart.depth3D = 70;
        chart.outlineColor = "#3b5998";
        chart.outlineThickness = 0;
        chart.labelRadius = 25;
        chart.labelText = "[[title]]: [[percents]]%";
        if (pieBlockId == "3d_genericPie") {
            chart.angle = 60;
            chart.depth3D = 70;
            chart.labelRadius = 35;
            chart.textColor = "#cccccc";
            chart.outlineThickness = 0;
            chart.outlineColor = "#3b5998";
            chart.innerRadius = "50%";
        } else if (pieBlockId == "side_genericPie") {
            chart.angle = 0;
            chart.depth3D = 0;
            chart.textColor = "#ffffff";
            chart.labelRadius = 4;
            chart.labelText = "[[title]]";
            chart.alpha = .7;
            chart.labelText = "[[title]]";
            chart.groupPercent = 3;
            chart.fontSize = 9;
            chart.innerRadius = "80%";
            chart.autoMargins = false;
            chart.marginTop = 12;
            chart.marginBottom = 12;
            chart.marginLeft = 12;
            chart.marginRight = 12;
            chart.pullOutRadius = 0;
            chart.outlineAlpha = 1;
            chart.outlineColor = "#3b5998";
        } else if (pieBlockId == "welcome_genericPie") {
            chart.angle = 0;
            chart.textColor = "#ffffff";
            chart.labelRadius = 4;
            chart.labelText = "[[title]]";
            chart.alpha = .7;
            chart.labelText = "[[title]]";
            chart.groupPercent = 3;
            chart.fontSize = 9;
            chart.innerRadius = "80%";
            chart.autoMargins = false;
            chart.marginTop = 25;
            chart.marginBottom = 25;
            chart.marginLeft = 25;
            chart.marginRight = 25;
            chart.pullOutRadius = 0;
            chart.outlineAlpha = 1;
            chart.outlineColor = "#3b5998";
        } else if (pieBlockId == "sideFull_genericPie") {
            chart.adjustPrecision = false;
            chart.precision = 2;
            chart.percentPrecision = 2;
            chart.angle = 0;
            chart.depth3D = 0;
            chart.labelRadius = 10;
            chart.labelText = "";
            chart.groupPercent = 0;
            chart.alpha = .7;
            chart.outlineColor = "#3b5998";
            chart.outlineAlpha = 1;
            chart.fontSize = 9;
            chart.innerRadius = "80%";
            chart.labelRadius = 10;
            chart.autoMargins = false;
            chart.marginTop = 35;
            chart.marginBottom = 35;
            chart.marginLeft = 35;
            chart.marginRight = 35;
            chart.pullOutRadius = 0;
            var lables = new Array();
            if (scoreVE) {
                var lb1 = {
                    "text": scoreVE.value,
                    "size": 30,
                    "align": "center",
                    "y": "41%"
                };
                lables[0] = lb1;
            }
            var lb2 = {
                "text": "Positions",
                "size": 12,
                "color": "#cccccc",
                "align": "center",
                "y": "53%"
            };
            lables[1] = lb2;
            if (lables.length > 0) {
                chart.allLabels = lables;
            }
        } else if (pieBlockId == "0_genericPie") {
            chart.angle = 0;
            chart.labelColor = "#3B5998";
            chart.labelRadius = 36;
            chart.outlineColor = "#3B5998";
            setLegendForPieChart(chart);
            chart.depth3D = 0;
            chart.groupPercent = 0;
            chart.alpha = 0.7;
            chart.autoMargins = false;
            chart.marginTop = 50;
            chart.marginBottom = 30;
            chart.marginLeft = 0;
            chart.marginRight = 0;
            chart.pullOutRadius = 0;
        } else if (pieBlockId == "currency_genericPie" || pieBlockId == "sector_genericPie") {
            chart.labelRadius = 10;
            chart.textColor = "#cccccc";
            chart.groupPercent = 0;
            chart.labelText = "[[title]]";
            chart.outlineColor = "#3B5998";
            chart.fontSize = 10;
            chart.innerRadius = "70%";
        } else if (pieBlockId == "allocation_genericPie") {
            chart.angle = 0;
            chart.depth3D = 0;
            chart.labelRadius = 20;
            chart.textColor = "#cccccc";
            chart.groupPercent = 0;
            chart.outlineThickness = 0;
            chart.outlineColor = "#3b5998";
            chart.fontSize = 10;
            chart.innerRadius = "70%";
            chart.labelText = "[[title]]: [[value]]";
        } else if (pieBlockId == "sectorsPie_genericPie") {
            chart.labelRadius = 10;
            chart.textColor = "#cccccc";
            chart.groupPercent = 0;
            chart.labelText = "[[title]]";
            chart.outlineColor = "#3B5998";
            chart.fontSize = 11;
            chart.angle = 0;
            chart.depth3D = 0;
            chart.groupPercent = 0;
            chart.innerRadius = "70%";
            var legend = new AmCharts.AmLegend();
            legend.bulletType = "round";
            legend.position = "left";
            legend.markerBorderThickness = 0;
            legend.markerType = "circle";
            legend.color = "#aaaaaa";
            legend.textClickEnabled = true;
            legend.valueText = "[[value]] %";
            legend.useGraphSettings = false;
            legend.autoMargins = false;
            legend.marginLeft = 0;
            legend.marginTop = 0;
            chart.addLegend(legend);
        } else if (pieBlockId.indexOf("widgetPie") != -1) {
            chart.export = null;
            chart.labelRadius = 10;
            chart.textColor = "#cccccc";
            chart.groupPercent = 0;
            chart.labelText = "[[title]]";
            chart.outlineColor = "#3B5998";
            chart.fontSize = 11;
            chart.angle = 0;
            chart.depth3D = 0;
            chart.groupPercent = 0;
            chart.innerRadius = "70%";
        }
    } else {
        if (pieBlockId == "currency_genericPie" || pieBlockId == "sector_genericPie" || pieBlockId == "allocation_genericPie") {
            chart.labelRadius = 10;
            chart.textColor = "#cccccc";
            chart.groupPercent = 0;
            chart.labelText = "[[title]]";
            // chart.outlineThickness = 1;
            chart.outlineColor = "#3B5998";
            chart.fontSize = 10;
            chart.innerRadius = "70%";
        } else if (pieBlockId == "3d_genericPie") {
            chart.angle = 60;
            chart.depth3D = 70;
            chart.labelRadius = 35;
            chart.textColor = "#cccccc";
            // chart.alpha=1;
            chart.outlineThickness = 0;
            chart.outlineColor = "#3b5998";
            // chart.outlineAlpha = 1;
            chart.innerRadius = "50%";
        } else if (pieBlockId == "side_genericPie") {
            chart.angle = 60;
            chart.depth3D = 70;
            chart.labelRadius = 5;
            chart.textColor = "#f7f7f7";
            // chart.colors = chartColors;
            chart.labelText = "[[title]]";
            // chart.alpha=1;
            chart.outlineThickness = 0;
            chart.outlineColor = "#3B5998";
            // chart.outlineAlpha = 1;
            chart.innerRadius = "40%";
        } else if (pieBlockId == "welcome_genericPie") {
            chart.export = null;
            // chart.angle=60;
            // chart.depth3D=70;
            chart.labelRadius = 25;
            chart.color = "#aaaaaa";
            chart.textColor = "#f7f7f7";
            // chart.colors = chartColors;
            chart.labelText = "[[title]]";
            // chart.alpha=1;
            chart.outlineThickness = 0;
            chart.outlineColor = "#3B5998";
            // chart.outlineAlpha = 1;
            chart.innerRadius = "70%";
            chart.autoMargins = false;
            chart.marginTop = 5;
            chart.marginBottom = 9;
            chart.marginLeft = 0;
            chart.marginRight = 0;
            chart.pullOutRadius = 0;
        } else if (pieBlockId == "-3_genericPie") {
            // chart.angle=60;
            chart.export = null;
            chart.colors = buySellColors;
            chart.groupPercent = 0;
            // chart.outlineAlpha = 0.6;
            // chart.color = "#aaa";
            chart.outlineColor = "#3B5998";
            // chart.outlineThickness = 1;
            chart.labelRadius = 19;
            chart.labelText = "[[title]]: [[value]]";
            chart.innerRadius = "74%";
            chart.autoMargins = false;
            chart.marginTop = 0;
            chart.marginBottom = 0;
            chart.marginLeft = 0;
            chart.marginRight = 0;
            chart.pullOutRadius = 0;
        } else if (pieBlockId == "currency_genericPie") {
            // chart.angle=60;
            chart.export = null;
            chart.colors = buySellColors;
            chart.groupPercent = 0;
            // chart.outlineAlpha = 0.6;
            chart.color = "#3B5998";
            chart.outlineColor = "#3b5998";
            // chart.outlineThickness = 1;
            chart.labelRadius = 19;
            chart.labelText = "[[title]]: [[value]]";
        } else if (pieBlockId == "-4_genericPie") {
            chart.export = null;
            // chart.colors = buySellColors;
            chart.groupPercent = 0;
            // chart.outlineAlpha = 0.4;
            chart.innerRadius = "75%";
            chart.outlineThickness = 0;
            chart.labelRadius = 5;
            chart.labelText = "[[title]]";
            var lables = new Array();
            if (scoreVE) {
                // alert(lables);
                var lb1 = {
                    "text": scoreVE.value,
                    "size": 14,
                    "align": "center",
                    "y": "45%"
                };
                lables[0] = lb1;
            }
            if (titleVE) {
                var lb2 = {
                    "text": titleVE.value,
                    "size": 9,
                    "color": "#aaaaaa",
                    "align": "center",
                    "y": "50%"
                };
                lables[1] = lb2;
            }
            if (lables.length > 0) {
                chart.allLabels = lables;
            }
        } else if (pieBlockId == "-5_genericPie") {
            chart.export = null;
            // chart.colors = buySellColors;
            chart.groupPercent = 0;
            // chart.outlineAlpha = 0.4;
            chart.outlineThickness = 0;
            chart.labelRadius = 10;
            chart.labelText = "[[title]]: [[value]]";
        } else if (pieBlockId == "opt0_genericPie" || pieBlockId == "cur0_genericPie" || pieBlockId == "optidea_genericPie" || pieBlockId == "curidea_genericPie") {
            chart.groupPercent = 0;
            chart.labelRadius = 7;
            var lables = new Array();
            if (scoreVE) {
                // alert(lables);
                var lb1 = {
                    "text": scoreVE.value,
                    "size": 28,
                    "align": "center",
                    "y": "43%"
                };
                lables[0] = lb1;
            }
            if (titleVE) {
                var lb2 = {
                    "text": titleVE.value,
                    "size": 14,
                    "color": "#cccccc",
                    "align": "center",
                    "y": "52%"
                };
                lables[1] = lb2;
            }
            if (lables.length > 0) {
                chart.allLabels = lables;
            }
            // chart.angle=30;
            // chart.depth3D=50;
            chart.outlineColor = "#3b5998";
            // chart.outlineThickness =1;
            chart.groupPercent = 0;
            chart.fontSize = 9;
            chart.outlineAlpha = 1;
            chart.labelText = "[[title]]";
            chart.innerRadius = "74%";
            chart.autoMargins = false;
            chart.marginTop = 35;
            chart.marginBottom = 15;
            chart.marginLeft = 15;
            chart.marginRight = 15;
            chart.pullOutRadius = 0;
        } else if (pieBlockId == "3d_genericPie") {
            chart.angle = 30;
            chart.depth3D = 50;
            chart.labelRadius = 25;
            chart.fontSize = 12;
            chart.outlineColor = "#3b5998";
            chart.outlineThickness = 0;
            // chart.outlineAlpha = 1;
        } else if (pieBlockId == "cur_genericPie") {
            chart.labelRadius = 3;
            chart.depth3D = 0;
            chart.groupPercent = 6;
            chart.innerRadius = "70%";
            chart.fontSize = 10;
            chart.labelText = "[[title]]";
            chart.export = null;
        } else if (pieBlockId.indexOf("pitchPie") != -1) {
            chart.export = null;
            chart.angle = 50;
            chart.depth3D = 0;
            // chart.outlineThickness =1;
            chart.groupPercent = 3;
            chart.labelRadius = 30;
            chart.outlineColor = "#3B5998";
            // chart.outlineAlpha = 1;
            chart.innerRadius = "60%";
            chart.fontSize = 10;
            chart.autoMargins = false;
            chart.marginTop = 30;
            chart.marginBottom = 30;
            chart.marginLeft = 0;
            chart.marginRight = 0;
            chart.pullOutRadius = 0;
            chart.labelText = "[[title]]: [[percents]]%";
        } else if (pieBlockId.indexOf("dashboard") != -1) {
            chart.export = null;
            // chart.colors = chartColors;
            chart.groupPercent = 5;
            chart.labelRadius = 7;
            chart.outlineColor = "#3b5998";
            // chart.outlineThickness =1;
            // chart.outlineAlpha = 0.3;
            chart.innerRadius = "78%";
            chart.fontSize = 9;
            chart.autoMargins = false;
            chart.marginTop = 35;
            chart.marginBottom = 25;
            chart.marginLeft = 15;
            chart.marginRight = 15;
            chart.pullOutRadius = 0;
            var lables = new Array();
            if (scoreVE) {
                // alert(lables);
                var lb1 = {
                    "text": scoreVE.value,
                    "size": 16,
                    "align": "center",
                    "y": "49%"
                };
                lables[0] = lb1;
            }
            //
            if (lables.length > 0) {
                chart.allLabels = lables;
            }
            // chart.labelColor = "#ffffff";
            chart.labelTickColor = "#0B3861";
            // chart.labelTickAlpha.alpha=1;
            // chart.alpha=0.8;
            chart.labelText = "[[title]]";
        } else if (pieBlockId.indexOf("dashboard") != -1) {
            chart.export = null;
            chart.groupPercent = 5;
            chart.labelRadius = 15;
            chart.outlineColor = "#3b5998";
            chart.outlineThickness = 0;
            // chart.outlineAlpha = 1;
            chart.innerRadius = "60%";
            chart.fontSize = 12;
            chart.color = "#3B5998";
            // chart.colors = chartColors;
            chart.labelTickColor = "#3B5998";
            // chart.labelTickAlpha.alpha=.6;
            // chart.alpha=0.5;
            chart.labelText = "[[title]]";
        } else if (pieBlockId.indexOf("widgetPie") != -1) {
            chart.export = null;
            chart.groupPercent = 5;
            chart.labelRadius = 15;
            chart.outlineColor = "#3b5998";
            chart.outlineThickness = 0;
            // chart.outlineAlpha = 1;
            chart.innerRadius = "60%";
            chart.fontSize = 12;
            chart.color = "#3B5998";
            // chart.colors = chartColors;
            chart.labelTickColor = "#3B5998";
            // chart.labelTickAlpha.alpha=.6;
            // chart.alpha=0.5;
            chart.labelText = "[[title]]";
        } else if (pieBlockId.indexOf("smallAllocation") != -1) {
            chart.export = null;
            chart.groupPercent = 0;
            chart.labelRadius = 0;
            chart.innerRadius = "60%";
            chart.outlineThickness = 0;
            chart.outlineAlpha = 0;
            chart.alpha = 0.9;
            chart.pullOutRadius = 0;
            chart.fontSize = 8;
            // chart.color = "#3B5998";
            chart.autoMargins = false;
            chart.marginTop = 5;
            chart.marginBottom = 5;
            chart.marginLeft = 0;
            chart.marginRight = 0;
            chart.pullOutRadius = 0;
            // chart.colors = chartColors;
            chart.colors = ["#aaaaaa", "#aaaaaa"];
            chart.labelText = "";
        } else if (pieBlockId.indexOf("0_genericPie") != -1) {
            chart.angle = 0;
            chart.labelColor = "#3B5998";
            // chart.outlineThickness = 1;
            chart.labelRadius = 15;
            // chart.alpha=0.5;
            chart.outlineColor = "#3B5998";
            chart.depth3D = 0;
            chart.groupPercent = 0;
            chart.alpha = 0.7;
            // chart.labelsEnabled = false;
            setUpLineMargingsOn(chart, true);
            chart.pullOutRadius = 10;
            chart.labelText = "[[title]]";
        } else {
            chart.labelText = "[[title]]";
            chart.outlineColor = "#ffffff";
        }
    }
    // alert(chart);
    // vs
    decorateBalloon(chart.balloon);
    chart.write(pieBlockId);
}

function handleInit() {
    chart.legend.addListener("rollOverItem", handleRollOver);
}

function handleRollOver(e) {
    var wedge = e.dataItem.wedge.node;
    wedge.parentNode.appendChild(wedge);
}

function displayGenericPieChart(symbolicId, labels, values, showPercent) {
    // alert(symbolicId);
    if (symbolicId == "-3") {
        var chartData = getBuySellChartDataFromLabelAndValueArray(labels, values);
    } else if (symbolicId.indexOf("smallAllocation") != -1) {
        var chartData = getSmallAllocationDataFromLabelAndValueArray(labels, values);
    } else {
        var chartData = getChartDataFromLabelAndValueArray(labels, values);
    }
    var pieBlockId = symbolicId + "_genericPie";
    return displayGenericPieChartInlineNew(chartData, pieBlockId, showPercent);
}

function displayPostGenericFunnelChart(symbolicId) {
    if (!symbolicId || symbolicId == null) {
        symbolicId = "0";
    }
    var pieBlockId = symbolicId + "_genericFunnel";
    var pieBlock = document.getElementById(pieBlockId);
    // alert(pieLabels);
    if (pieBlock) {
        var pieLabels = document.getElementById(symbolicId + "funnelLabels");
        var pieValues = document.getElementById(symbolicId + "funnelValues");
        displayGenericFunnelChart(symbolicId, pieLabels.value.split(","),
            pieValues.value.split(","));
    }
}

function displayGenericFunnelChartInline(chartData, funnelBlockId) {
    // alert(funnelBlockId);
    if ("ownership_genericFunnel" == funnelBlockId || "assetMap_genericFunnel" == funnelBlockId || "bitchart_genericFunnel" == funnelBlockId) {
        displayGenericTreeMapChartInlineNew(chartData, funnelBlockId);
    } else {
        var chart = new AmCharts.AmFunnelChart();
        chart.dataProvider = chartData;
        setUpFunnelMargings(chart, 10);
        chart.color = "#aaaaaa";
        chart.neckWidth = "40%";
        chart.startAlpha = 0;
        chart.neckHeight = "30%";
        chart.labelPosition = "left";
        chart.titleField = "balance";
        chart.valueField = "value";
        chart.colorField = "color";
        chart.labelPosition = "left";
        chart.marginLeft = 130;
        chart.hideLabelsPercent = 3;
        chart.groupPercent = 10;
        if ("currency_genericFunnel" == funnelBlockId) {
            chart.groupPercent = 0;
            chart.labelPosition = "left";
            chart.marginLeft = 140;
        } else if ("allocation_genericFunnel" == funnelBlockId) {
            chart.marginRight = 100;
            chart.labelPosition = "right";
            chart.groupPercent = 0;
            chart.hideLabelsPercent = 0;
        } else if ("0_genericFunnel" == funnelBlockId) {
            chart.marginRight = 0;
            chart.marginLeft = 0;
            chart.labelPosition = "center";
            chart.groupPercent = 0;
            chart.hideLabelsPercent = 0;
        } else if ("ownership_genericFunnel" == funnelBlockId) {
            chart.marginRight = 130;
            chart.labelPosition = "right";
            chart.marginLeft = 0;
            chart.groupPercent = 0;
            chart.hideLabelsPercent = 0;
        } else if ("bitchart_genericFunnel" == funnelBlockId) {
            chart.marginRight = 5;
            chart.labelPosition = "center";
            chart.marginLeft = 5;
            chart.groupPercent = 2;
            chart.hideLabelsPercent = 5;
        }
        chart.titleField = "label";
        chart.valueField = "value";
        // chart.pulledField = "pulled"
        chart.groupedColor = "#dddddd";
        chart.labelColor = "#eeeeee";
        chart.alpha = 0.6;
        // chart.colors = chartColors;
        // alert(chart.colors);
        chart.labelRadius = 1;
        chart.labelText = "[[title]]: [[percents]]%";
        // chart.textColor = "#aaaaaa";
        // chart.outlineColor="#3B5998";
        // chart.outlineThickness =1;
        // chart.outlineAlpha=1;
        // chart.hideLabelsPercent=20;
        // vs
        decorateBalloon(chart.balloon);
        // chart.addLabel(0,50,"Macroaxis
        // Charts","center",20,"#dddddd",0,0.5,false,"http://www.macroaxis.com");
        // alert("setting up chart");
        // alert(funnelBlockId);
        chart.write(funnelBlockId);
    }
}

function displayGenericFunnelChart(symbolicId, labels, values) {
    // alert(symbolicId);
    var chartData = getChartDataFromLabelAndValueArray(labels, values);
    var pieBlockId = symbolicId + "_genericFunnel";
    return displayGenericFunnelChartInline(chartData, pieBlockId);
}

function displayVerticalPostCompareBarsChart(symbolicId) {
	//alert(symbolicId);
    if (!symbolicId || symbolicId == null) {
        symbolicId = "0";
    }
    var barBlockId = symbolicId + "_verticalCompareBars";
    var barBlock = document.getElementById(barBlockId);
    // alert(barBlock);
    if (barBlock) {
        var barLabels = document.getElementById(symbolicId + "lineLabels");
        var barValues1 = document.getElementById(symbolicId + "lineValues1");
        var barValues2 = document.getElementById(symbolicId + "lineValues2");
        var barNames = document.getElementById(symbolicId + "lineNames");
        // alert(barLabels);
        displayVerticalCompareBarsChartNew(symbolicId, barNames.value.split(","), barLabels.value
            .split(","), barValues1.value.split(","), barValues2.value
            .split(","));
    }
}

function displayDumbbellCompareChart(symbolicId) {
    if (!symbolicId || symbolicId == null) {
        symbolicId = "0";
    }
    var barBlockId = symbolicId + "_dumbbellCompareBars";
    var barBlock = document.getElementById(barBlockId);
    // alert(barBlock);
    if (barBlock) {
        var barLabels = document.getElementById(symbolicId + "lineLabels");
        var barValues1 = document.getElementById(symbolicId + "lineValues1");
        var barValues2 = document.getElementById(symbolicId + "lineValues2");
        var barNames = document.getElementById(symbolicId + "lineNames");
        // alert(barLabels);
        displayDumbbellCompareChartNew(symbolicId, barNames.value.split(","), barLabels.value
            .split(","), barValues1.value.split(","), barValues2.value
            .split(","));
    }
}

function displayPostCompareBarsChart(symbolicId) {
    if (!symbolicId || symbolicId == null) {
        symbolicId = "0";
    }
    var barBlockId = symbolicId + "_compareBars";
    var barBlock = document.getElementById(barBlockId);
    //alert(barBlock);
    if (barBlock) {
        var barLabels = document.getElementById(symbolicId + "lineLabels");
        var barValues1 = document.getElementById(symbolicId + "lineValues1");
        var barValues2 = document.getElementById(symbolicId + "lineValues2");
        var barNames = document.getElementById(symbolicId + "lineNames");
        // alert(barLabels);
        displayCompareBarsChartNew(symbolicId, barNames.value.split(","), barLabels.value
            .split(","), barValues1.value.split(","), barValues2.value
            .split(","));
    }
}

function createChartV4ColumnSeries(chart, field, name, color) {
    var series = chart.series.push(new am4charts.ColumnSeries());
    series.dataFields.valueX = field;
    series.dataFields.categoryY = "label";
    series.name = name;
    series.columns.template.fill = am4core.color(color);
    series.columns.template.strokeOpacity = 0;
    series.columns.template.tooltipText = "{name}: [bold]{valueX}[/]";
    series.columns.template.height = am4core.percent(100);
    series.sequencedInterpolation = true;
    series.columns.template.column.cornerRadiusTopRight = 2;
    series.columns.template.column.cornerRadiusBottomRight = 2;
    series.columns.template.fillOpacity = 1;
    series.columns.template.propertyFields.strokeDasharray = "dashLength";
    series.columns.template.propertyFields.fillOpacity = "alpha";
    series.columns.template.propertyFields.strokeOpacity = "dashAlpha";
    var disatnceState = series.columns.template.states.create("hover");
    disatnceState.properties.fillOpacity = 0.9;
    // series.stacked = true;
    // series.columns.template.column.cornerRadiusTopLeft = 2;
    // series.columns.template.column.cornerRadiusBottomLeft = 2;
    var valueLabel = series.bullets.push(new am4charts.LabelBullet());
    valueLabel.label.horizontalCenter = "left";
    valueLabel.label.dx = 10;
    valueLabel.label.hideOversized = true;
    valueLabel.label.truncate = false;
    valueLabel.label.fill = am4core.color(color);
    var categoryLabel = series.bullets.push(new am4charts.LabelBullet());
    categoryLabel.label.text = "{name} [bold]{valueX}[/]";
    categoryLabel.label.horizontalCenter = "right";
    categoryLabel.label.dx = -10;
    categoryLabel.label.fill = am4core.color("#fff");
    categoryLabel.label.hideOversized = true;
    categoryLabel.label.truncate = false;
}

function displayCompareBarsChartNew(symbolicId, names, labels, values1,
    values2) {
    var chartData = getCompareChartDataFromLabelAndValueArray(labels, values1, values2);
    var barsBlockId = symbolicId + "_compareBars";
    // alert(barsBlockId);
    am4core.options.commercialLicense = true;
    am4core.useTheme(am4themes_animated);
    var chart = am4core.create(barsBlockId, am4charts.XYChart);
    chart.paddingLeft = 0;
    chart.paddingRight =30;
    chart.paddingTop = 0;
    chart.paddingBottom = 34;
    chart.marginLeft = 0;
    chart.marginRight = 0;
    chart.marginTop = 0;
    //chart.marginBottom = 30;
    // Add data
    chart.data = chartData;
    setUpV4BigNumbers(chart.numberFormatter, chartData);
    // Create axes
    var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
    categoryAxis.dataFields.category = "label";
    categoryAxis.renderer.minGridDistance = 20;
    categoryAxis.renderer.minLabelPosition = 0.05;
    categoryAxis.renderer.maxLabelPosition = 0.95;
    categoryAxis.renderer.inside = false;
    // categoryAxis.renderer.labels.template.fillOpacity = 0.9;
    categoryAxis.renderer.opposite = true;
    categoryAxis.renderer.inversed = false;
    categoryAxis.renderer.grid.template.location = 0;
    categoryAxis.renderer.cellStartLocation = 0.1;
    categoryAxis.renderer.cellEndLocation = 0.9;
    categoryAxis.renderer.grid.template.opacity = 0.4;
    setUpV4BigNumbers(categoryAxis.numberFormatter, chartData);
    var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
    valueAxis.renderer.opposite = true;
    createChartV4ColumnSeries(chart, "value", names[0], "#FF0F00");
    createChartV4ColumnSeries(chart, "value2", names[1], "#3B5998");
    valueAxis.renderer.minLabelPosition = 0.05;
    valueAxis.renderer.maxLabelPosition = 0.95;
    // valueAxis.renderer.labels.template.dy = 5;
    valueAxis.renderer.labels.template.fillOpacity = 0.4;
    valueAxis.renderer.grid.template.opacity = 0.2;
    valueAxis.logarithmic = true;
    valueAxis.renderer.line.strokeOpacity = 0.1;
    valueAxis.renderer.line.strokeWidth = 0.1;
    setUpV4BigNumbers(valueAxis.numberFormatter, chartData);
    setUpV4Export(chart, "compareFundamentalsChart", "leftBottom");
    formatV4Legend(chart, "top");
    setV4ChartCursor(chart);
    // alert('a');
}

function createVerticalChartV4ColumnSeries(chart, field, name, color) {
    var series = chart.series.push(new am4charts.ColumnSeries());
    series.name = name;
    series.dataFields.valueY = field;
    series.dataFields.categoryX = "label";
    series.sequencedInterpolation = true;
    series.columns.template.fill = am4core.color(color);
    series.columns.template.strokeOpacity = 0.2;
    series.columns.template.fill = am4core.color(color);
    series.columns.template.height = am4core.percent(100);
    series.sequencedInterpolation = true;
    // var categoryLabel = series.bullets.push(new am4charts.LabelBullet());
    // var valueLabel = series.bullets.push(new am4charts.LabelBullet());
    // categoryLabel.label.fill = am4core.color("#fff");
    // valueLabel.label.fill = am4core.color("#fff");
    // var categoryLabel = series.bullets.push(new am4charts.LabelBullet());
    // valueLabel.label.fill = am4core.color("#fff");
    // Make it stacked
    if (chart.data.length > 3) {
        series.stacked = true;
        if (field == "value2") {
            series.columns.template.column.cornerRadiusTopRight = 1;
            series.columns.template.column.cornerRadiusTopLeft = 1;
        }
    } else {
        series.stacked = false;
        series.columns.template.column.cornerRadiusTopRight = 1;
        series.columns.template.column.cornerRadiusTopLeft = 1;
    }
    // Configure columns
    series.columns.template.tooltipText = "[bold]{name}[/]\n[font-size:14px]{categoryX}: {valueY}";
    series.columns.template.width = am4core.percent(100);
    series.columns.template.fillOpacity = .8;
    series.columns.template.propertyFields.strokeDasharray = "dashLength";
    series.columns.template.propertyFields.fillOpacity = "alpha";
    series.columns.template.propertyFields.strokeOpacity = "dashAlpha";
    var disatnceState = series.columns.template.states.create("hover");
    disatnceState.properties.fillOpacity = 0.9;
    // Add label
    var labelBullet = series.bullets.push(new am4charts.LabelBullet());
    labelBullet.label.text = "{valueY}";
    labelBullet.label.fill = am4core.color("#fff");
    labelBullet.label.hideOversized = true;
    labelBullet.label.truncate = false;
    labelBullet.locationY = 0.5;
    return series;
}

function displayVerticalCompareBarsChartNew(symbolicId, names, labels, values1,
    values2) {
    var chartData = getCompareChartDataFromLabelAndValueArray(labels, values1, values2);
    var barsBlockId = symbolicId + "_verticalCompareBars";
    // alert(barsBlockId);
    am4core.options.commercialLicense = true;
    am4core.useTheme(am4themes_animated);
    var chart = am4core.create(barsBlockId, am4charts.XYChart);
    chart.paddingLeft = 0;
    chart.paddingRight = 0;
    chart.paddingTop = 0;
    chart.paddingBottom = 0;
    chart.marginLeft = 0;
    chart.marginRight = 0;
    chart.marginTop = 0;
    chart.marginBottom = 0;
    setUpV4BigNumbers(chart.numberFormatter, chartData);
    // Add data
    chart.data = chartData;
    // Create axes
    var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
    categoryAxis.dataFields.category = "label";
    categoryAxis.renderer.grid.template.location = 0;
    categoryAxis.renderer.minGridDistance = 20;
    categoryAxis.renderer.minLabelPosition = 0;
    categoryAxis.renderer.maxLabelPosition = 1;
    categoryAxis.renderer.inside = false;
    categoryAxis.renderer.opposite = false;
    categoryAxis.renderer.inversed = false;
    categoryAxis.renderer.grid.template.location = 0;
    categoryAxis.renderer.cellStartLocation = 0; 
    categoryAxis.renderer.cellEndLocation = 0.98;
    categoryAxis.renderer.grid.template.opacity = 0.3;
    categoryAxis.renderer.labels.template.hideOversized = true;
    var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
    createVerticalChartV4ColumnSeries(chart, "value", names[0], "#FF0F00");
    createVerticalChartV4ColumnSeries(chart, "value2", names[1], "#3B5998");
    var max = hasV4DataMax(chartData, true);
    var min = hasV4DataMin(chartData, true);
    // alert(min+" || "+ max+" || "+ (min/max));
    valueAxis.renderer.inside = false;
    // Configure grid
    valueAxis.renderer.grid.template.strokeOpacity = 1;
    valueAxis.renderer.grid.template.stroke = am4core.color("#dddddd");
    valueAxis.renderer.minLabelPosition = 0.05;
    valueAxis.renderer.maxLabelPosition = 0.95;
    valueAxis.renderer.labels.template.hideOversized = true;
    // Configure labels 
    valueAxis.renderer.labels.template.fill = am4core.color("gray");
    setV4ChartCursor(chart);
    if (max > 1) {
        max = roundToTwo(max);
    }
    // if (min > 1) {
    min = roundToTwo(min * 0.99);
    // } else {
    // }
    valueAxis.max = max; // *1.2;
    valueAxis.min = min;
    var minMaxRatio = min / max;
    // alert(minMaxRatio);
    if (minMaxRatio < .2) {
        valueAxis.logarithmic = true;
    }
    valueAxis.renderer.grid.template.opacity = 0.4;
    // var mid = max/2;
    // if (minMaxRatio<.5) {
    // var axisBreak = valueAxis.axisBreaks.create();
    // axisBreak.startValue =mid;
    // axisBreak.endValue = mid/3;
    //		
    // axisBreak.breakSize = 0.1;
    // var hoverState = axisBreak.states.create("hover");
    // hoverState.properties.breakSize = 1;
    // hoverState.properties.opacity = 0.1;
    // hoverState.transitionDuration = 1500;
    // axisBreak.defaultState.transitionDuration = 1000;
    // }
    setUpV4Export(chart, "compareFundamentalsChart", "leftBottom");
    formatV4Legend(chart, "top");
    // alert('a');
}

function displayDumbbellCompareChartNew(symbolicId, names, labels, values1,
    values2) {
    var chartData = getCompareChartDataFromLabelAndValueArray(labels, values1, values2);
    var barsBlockId = symbolicId + "_dumbbellCompareBars";
    // alert(barsBlockId);
    am4core.options.commercialLicense = true;
    am4core.useTheme(am4themes_animated);
    var chart = am4core.create(barsBlockId, am4charts.XYChart);
    chart.data = chartData;
    // alert(chart.data);
    var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
    categoryAxis.renderer.grid.template.location = 0;
    categoryAxis.renderer.ticks.template.disabled = true;
    categoryAxis.renderer.axisFills.template.disabled = true;
    categoryAxis.dataFields.category = "label";
    categoryAxis.renderer.inversed = true;
    categoryAxis.renderer.inside = false;
    categoryAxis.renderer.grid.template.location = 1;
    // categoryAxis.renderer.cellStartLocation = 0.3;
    // categoryAxis.renderer.cellEndLocation = 0.7;
    var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
    valueAxis.tooltip.disabled = false;
    valueAxis.renderer.ticks.template.disabled = true;
    valueAxis.renderer.axisFills.template.disabled = true;
    var series = chart.series.push(new am4charts.ColumnSeries());
    series.dataFields.categoryY = "label";
    series.dataFields.openValueX = "value";
    series.dataFields.valueX = "value2";
    series.tooltipText = "- 2 Std: {openValueX.value} + 2 Std: {valueX.value}";
    series.sequencedInterpolation = true;
    series.fillOpacity = 1;
    series.strokeOpacity = 1;
    series.columns.template.height = 0.5;
    series.tooltip.pointerOrientation = "vertical";
    series.columns.template.fillOpacity = 0.9;
    series.columns.template.strokeOpacity = 0.1;
    series.columns.template.fill = am4core.color("#dddddd");
    series.columns.template.height = am4core.percent(100);
    series.sequencedInterpolation = false;
    var openBullet = series.bullets.create(am4charts.CircleBullet);
    openBullet.locationX = 1;
    var closeBullet = series.bullets.create(am4charts.CircleBullet);
    closeBullet.fill = chart.colors.getIndex(1);
    closeBullet.stroke = closeBullet.fill;
    chart.cursor = new am4charts.XYCursor();
    chart.cursor.behavior = "zoomY";
    // chart.scrollbarX = new am4core.Scrollbar();
    // chart.scrollbarY = new am4core.Scrollbar();
    setUpV4BigNumbers(chart.numberFormatter, chartData);
    setUpV4Export(chart, "compareDumbbellChart", "top");
    // formatV4Legend(chart, "top");
    // alert('a');
}

function displayPostExpectedOptimizationBarsChart(symbolicId) {
    // alert("fired");
    if (!symbolicId || symbolicId == null) {
        symbolicId = "0";
    }
    var barBlockId = symbolicId + "_genericBars";
    var barBlock = document.getElementById(barBlockId);
    // alert(barBlock);
    if (barBlock) {
        var barLabels = document.getElementById(symbolicId + "barLabels");
        var barValues1 = document.getElementById(symbolicId + "barValues1");
        var barValues2 = document.getElementById(symbolicId + "barValues2");
        // alert(barLabels);
        displayExpectedOptimizationBarsChartNew(symbolicId, barLabels.value
            .split(","), barValues1.value.split(","), barValues2.value
            .split(","));
    }
}

function displayExpectedOptimizationBarsChartNew(symbolicId, labels, values1,
    values2) {
    var chartData = [{
        label: labels[0],
        value1: values1[0],
        value2: values2[0],
        value1Text: formatBigNumber(roundToTwo(values1[0])),
        value2Text: formatBigNumber(roundToTwo(values2[0]))
    }, {
        label: labels[1],
        value1: values1[1],
        value2: values2[1],
        value1Text: formatBigNumber(roundToTwo(values1[1])),
        value2Text: formatBigNumber(roundToTwo(values2[1]))
    }, {
        label: labels[2],
        value1: values1[2],
        value2: values2[2],
        value1Text: formatBigNumber(roundToTwo(values1[2])),
        value2Text: formatBigNumber(roundToTwo(values2[2]))
    }, {
        label: labels[3],
        value1: values1[3],
        value2: values2[3],
        value1Text: formatBigNumber(roundToTwo(values1[3])),
        value2Text: formatBigNumber(roundToTwo(values2[3]))
    }, {
        label: labels[4],
        value1: values1[4],
        value2: values2[4],
        value1Text: formatBigNumber(roundToTwo(values1[3])),
        value2Text: formatBigNumber(roundToTwo(values2[3]))
    }, {
        label: labels[5],
        value1: values1[5],
        value2: values2[5],
        value1Text: formatBigNumber(roundToTwo(values1[4])),
        value2Text: formatBigNumber(roundToTwo(values2[4]))
    }];
    var barsBlockId = symbolicId + "_genericBars";
    // alert(barsBlockId);
    am4core.options.commercialLicense = true;
    am4core.useTheme(am4themes_animated);
    var chart = am4core.create(barsBlockId, am4charts.XYChart);
    // setUpV4BigNumbers(chart,chartData);
    chart.hiddenState.properties.opacity = 0; // this creates initial
    // fade-in
    setUpV4Export(chart, "ExpectedReturnsChart", "leftBottom");
    chart.data = chartData;
    chart.paddingLeft = 0;
    chart.paddingRight = 0;
    chart.paddingTop = 20;
    chart.paddingBottom = 0;
    var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
    categoryAxis.renderer.grid.template.location = 0;
    categoryAxis.dataFields.category = "label";
    categoryAxis.renderer.minGridDistance = 10;
    categoryAxis.renderer.minLabelPosition = 0.05;
    categoryAxis.renderer.maxLabelPosition = 0.95;
    // categoryAxis.renderer.labels.template.fillOpacity = 0.9;
    categoryAxis.renderer.grid.template.opacity = 0.3;
    var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
    // valueAxis.min = 0;
    // valueAxis.max = 20000;
    valueAxis.renderer.minGridDistance = 40;
    valueAxis.renderer.minLabelPosition = 0.10;
    valueAxis.renderer.maxLabelPosition = 0.90;
    valueAxis.renderer.labels.template.dy = -3;
    valueAxis.renderer.labels.template.fillOpacity = 0.3;
    valueAxis.renderer.grid.template.opacity = 0.3;
    // valueAxis.logarithmic = true;
    chart.colors.list = [
        am4core.color("#3b5998"),
        am4core.color("#ADD981"),
    ];
    var series1 = chart.series.push(new am4charts.ColumnSeries());
    series1.dataFields.categoryX = "label";
    series1.dataFields.valueY = "value1";
    series1.name = "Existing Portfolio";
    series1.columns.template.tooltipText = "Existing {valueY.value}";
    series1.columns.template.width = am4core.percent(100);
    series1.columns.template.tooltipY = 0;
    series1.columns.template.fillOpacity = 0.9;
    series1.columns.template.strokeOpacity = 0;
    // series1.stacked = true;
    // var labelBullet1 = new am4charts.LabelBullet();
    // series1.bullets.push(labelBullet1);
    // setUpV4BigNumbersLabel(labelBullet1,max,min);
    var series2 = chart.series.push(new am4charts.ColumnSeries());
    series2.dataFields.categoryX = "label";
    series2.dataFields.valueY = "value2";
    series2.columns.template.tooltipText = "Optimized {valueY.value}";
    series2.columns.template.width = am4core.percent(100);
    series2.columns.template.tooltipY = 0;
    series2.columns.template.fillOpacity = 0.9;
    series2.columns.template.strokeOpacity = 0;
    series2.name = "Optimized Portfolio";
    // series2.stacked = true;
    setV4ChartCursor(chart);
    formatV4Legend(chart, "bottom");
    // alert('a');
}

function displayExpectedOptimizationBarsChart(symbolicId, labels, values1,
    values2) {
    // alert(labels);
    var chartData = [{
        label: labels[0],
        value1: values1[0],
        value2: values2[0],
        value1Text: formatBigNumber(roundToTwo(values1[0])),
        value2Text: formatBigNumber(roundToTwo(values2[0]))
    }, {
        label: labels[1],
        value1: values1[1],
        value2: values2[1],
        value1Text: formatBigNumber(roundToTwo(values1[1])),
        value2Text: formatBigNumber(roundToTwo(values2[1]))
    }, {
        label: labels[2],
        value1: values1[2],
        value2: values2[2],
        value1Text: formatBigNumber(roundToTwo(values1[2])),
        value2Text: formatBigNumber(roundToTwo(values2[2]))
    }, {
        label: labels[3],
        value1: values1[3],
        value2: values2[3],
        value1Text: formatBigNumber(roundToTwo(values1[3])),
        value2Text: formatBigNumber(roundToTwo(values2[3]))
    }, {
        label: labels[4],
        value1: values1[4],
        value2: values2[4],
        value1Text: formatBigNumber(roundToTwo(values1[3])),
        value2Text: formatBigNumber(roundToTwo(values2[3]))
    }, {
        label: labels[5],
        value1: values1[5],
        value2: values2[5],
        value1Text: formatBigNumber(roundToTwo(values1[4])),
        value2Text: formatBigNumber(roundToTwo(values2[4]))
    }];
    var barsBlockId = symbolicId + "_genericBars";
    chart = new AmCharts.AmSerialChart();
    chart.dataProvider = chartData;
    chart.categoryField = "label";
    chart.color = "#6E6E6E";
    // decorateBarChart(chart);
    var valueAxis = new AmCharts.ValueAxis();
    var catAxis = chart.categoryAxis;
    decorateCategoryAxis(catAxis);
    decorateValueAxis(valueAxis);
    chart.addValueAxis(valueAxis);
    setUpLineMargings(chart);
    // GRAPHS
    // first graph
    var graph1 = new AmCharts.AmGraph();
    graph1.type = "column";
    graph1.title = "Existing";
    graph1.valueField = "value1";
    graph1.balloonText = "Existing:[[value]]";
    // decorateBarGraph(graph1);
    graph1.fillColors = "#3b5998";
    graph1.lineColor = "#3b5998";
    decorateBarGraph(graph1);
    // graph1.labelFunction = formatGenericLabels;
    chart.addGraph(graph1);
    // second graph
    var graph2 = new AmCharts.AmGraph();
    graph2.type = "column";
    // graph2.cornerRadiusTop =2;
    graph2.title = "Optimized";
    graph2.valueField = "value2";
    graph2.balloonText = "Optimized:[[value]]";
    decorateBarGraph(graph2);
    decorateBalloon(chart.balloon);
    graph2.fillColors = "#ADD981";
    graph2.lineColor = "#ADD981";
    graph2.lineAlpha = 1;
    chart.addGraph(graph2);
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor);
    // chartCursor.zoomable = false;
    chart.addChartCursor(chartCursor);
    // chart.pathToImages = "/images/charts/";
    graph1.labelText = "[[value1Text]]";
    graph2.labelText = "[[value2Text]]";
    addChartWaterMark(chart);
    if (!isSuggestionResults()) {
        chart.export = buildExportConfig(barsBlockId);
    }
    setLegendForLineChart(chart);
    chart.write(barsBlockId);
}

function displayPostGenericBarsChart(symbolicId) {
    // alert(symbolicId);
    if (!symbolicId || symbolicId == null) {
        symbolicId = "0";
    }
    var barBlockId = symbolicId + "_genericBars";
    // alert(barBlockId);
    var barBlock = document.getElementById(barBlockId);
    // alert(barBlock);
    // alert(barBlock);
    if (barBlock) {
        var barLabels = document.getElementById(symbolicId + "barLabels");
        var barValues = document.getElementById(symbolicId + "barValues");
        displayGenericBarsChart(symbolicId, barLabels.value.split(","),
            barValues.value.split(","));
    }
}

function displayRelatedRadarChart(symbolicId) {
    var chartData = getLinearOverTimeChartData(symbolicId);
    //alert(chartData);
    var radarBlockId = symbolicId + "_genericBars";
    if (chartData && chartData.length > 0) {
        displayGenericRadarChartNew(chartData, radarBlockId);
    }
}

function displayGenericRadarChartNew(chartData, radarBlockId) {
    for (var i = 0; i < (chartData.length - 1); i++) {
        chartData[i].valueNext = chartData[i + 1].value;
    }
    var d1 = $.Deferred();
    d1.done((function() {
        var chart = am4core.create(radarBlockId, am4charts.RadarChart);
        chart.hiddenState.properties.opacity = 0; // this creates initial fade-in
        chart.data = chartData;
        chart.padding(0, 0, 0, 0);
        var max = hasV4DataMax(chartData);
        // alert(max);
        var min = hasV4DataMin(chartData);
        var mid = max / 2;
        setUpV4BigNumbers(chart.numberFormatter, chartData);
        var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
        categoryAxis.dataFields.category = "label";
        categoryAxis.renderer.labels.template.location = 0.5;
        categoryAxis.renderer.tooltipLocation = 0.5;
        categoryAxis.renderer.labels.template.hideOversized = true;
        var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
        valueAxis.tooltip.disabled = true;
        valueAxis.renderer.labels.template.horizontalCenter = "left";
        valueAxis.min = min;
        valueAxis.renderer.labels.template.hideOversized = true;
        var series = chart.series.push(new am4charts.RadarColumnSeries());
        series.columns.template.tooltipText = "{name}: {valueY.value}";
        series.columns.template.width = am4core.percent(80);
        //series.name = "Series 1";
        series.dataFields.categoryX = "label";
        series.dataFields.valueY = "value";
        series.stacked = false;
        //var labelBullet = new am4charts.LabelBullet();
        //setUpV4BigNumbersLabel(labelBullet,max,min);
        //series.bullets.push(labelBullet);
        chart.cursor = new am4charts.RadarCursor();
        chart.cursor.xAxis = categoryAxis;
        chart.cursor.fullWidthXLine = true;
        chart.cursor.lineX.strokeOpacity = 0;
        chart.cursor.lineX.fillOpacity = 0.1;
        chart.cursor.lineX.fill = am4core.color("#000000");
    }));
    d1.resolve();
}

function displayRelatedColumnChart(symbolicId) {
    var chartData = getLinearOverTimeChartData(symbolicId);
    //alert(chartData);
    var radarBlockId = symbolicId + "_genericBars";
    if (chartData && chartData.length > 0) {
        displayGenericColumnChartNew(chartData, radarBlockId);
    }
}

function displayGenericColumnChartNew(chartData, radarBlockId) {
    for (var i = 0; i < (chartData.length - 1); i++) {
        chartData[i].valueNext = chartData[i + 1].value;
    }
    var d1 = $.Deferred();
    d1.done((function() {
        var chart = am4core.create(radarBlockId, am4charts.XYChart);
        chart.hiddenState.properties.opacity = 0; // 
        chart.data = chartData;
        setUpV4BigNumbers(chart.numberFormatter, chartData);
        chart.padding(0, 0, 0, 0);
        chart.paddingLeft = 0;
        chart.paddingRight = 0;
        chart.paddingTop = 10;
        chart.paddingBottom = 0;
        var max = hasV4DataMax(chartData);
        // alert(max);
        var min = hasV4DataMin(chartData);
        var mid = max / 2;
        setUpV4BigNumbers(chart.numberFormatter, chartData);
        var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
        categoryAxis.dataFields.category = "label";
        categoryAxis.renderer.minGridDistance = 20;
        categoryAxis.renderer.minLabelPosition = 0.05;
        categoryAxis.renderer.maxLabelPosition = 0.95;
        categoryAxis.renderer.grid.template.opacity = 0.3;
        categoryAxis.renderer.grid.template.location = 0;
        categoryAxis.startLocation = 0;
        categoryAxis.endLocation = 1;
        categoryAxis.renderer.grid.template.location = 0;
        categoryAxis.renderer.cellStartLocation = 0.05;
        categoryAxis.renderer.cellEndLocation = 0.95;
        categoryAxis.renderer.minLabelPosition = 0.05;
        categoryAxis.renderer.maxLabelPosition = 0.95;
        //setUpV4BigNumbers(categoryAxis.numberFormatter, chartData);
        var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
        //valueAxis.tooltip.disabled = true;
        valueAxis.renderer.labels.template.fillOpacity = 0.3;
        valueAxis.min = min;
        //valueAxis.renderer.minGridDistance = 20;
        valueAxis.renderer.minLabelPosition = 0.05;
        valueAxis.renderer.maxLabelPosition = 0.95;
        // valueAxis.renderer.labels.template.dy = 5;
        valueAxis.renderer.labels.template.fillOpacity = 0.5;
        valueAxis.renderer.grid.template.opacity = 0.3;
        valueAxis.renderer.labels.template.fillOpacity = 0.4;
        valueAxis.renderer.grid.template.opacity = 0.2;
        valueAxis.renderer.hidden = true;
        if (max > 0 && min > 0) {
            valueAxis.logarithmic = true;
        }
        createChartV4GenericColumnSeries(chart);
        setV4ChartCursor(chart);
    }));
    d1.resolve();
}

function createChartV4GenericColumnSeries(chart) {
    var series = chart.series.push(new am4charts.ColumnSeries());
    series.dataFields.valueX = "value";
    series.dataFields.categoryY = "label";
    series.columns.template.tooltipText = "{valueY}";
    series.columns.template.tooltipY = 0;
    series.columns.template.strokeOpacity = 0;
    series.columns.template.column.strokeOpacity = 0;
    series.columns.template.strokeOpacity = 0;
    series.columns.template.height = am4core.percent(100);
    series.sequencedInterpolation = false;
    //	  series.columns.template.column.cornerRadiusTopLeft = 5;
    //		series.columns.template.column.cornerRadiusTopRight = 5;
    //		series.columns.template.column.cornerRadiusBottomLeft = 5;
    //		series.columns.template.column.cornerRadiusBottomRight = 5;
    series.columns.template.fillOpacity = 1;
    series.columns.template.propertyFields.strokeDasharray = "dashLength";
    series.columns.template.propertyFields.fillOpacity = "alpha";
    series.columns.template.propertyFields.strokeOpacity = "dashAlpha";
    var disatnceState = series.columns.template.states.create("hover");
    disatnceState.properties.fillOpacity = 0.5;
    // series.stacked = true;
    // series.columns.template.column.cornerRadiusTopLeft = 5;
    // series.columns.template.column.cornerRadiusBottomLeft = 5;
    var valueLabel = series.bullets.push(new am4charts.LabelBullet());
    valueLabel.label.horizontalCenter = "left";
    valueLabel.label.dx = 10;
    valueLabel.label.hideOversized = true;
    valueLabel.label.truncate = false;
    var categoryLabel = series.bullets.push(new am4charts.LabelBullet());
    categoryLabel.label.text = "{value}[/]";
    categoryLabel.label.horizontalCenter = "right";
    categoryLabel.label.dx = -10;
    categoryLabel.label.fill = am4core.color("#fff");
    categoryLabel.label.hideOversized = true;
    categoryLabel.label.truncate = false;
    series.columns.template.adapter.add("fill", (function(fill, target) {
        var v = chart.data[target.dataItem.index].value;
        if (v < 0) {
            return am4core.color("#FF0000");
        } else {
            return am4core.color("#008000");
        }
    }));
}

function displayRelatedSolidGaugeChart(symbolicId) {
    var chartData = getLinearOverTimeChartData(symbolicId);
    //alert(chartData);
    var radarBlockId = symbolicId + "_genericBars";
    if (chartData && chartData.length > 0) {
        displaySolidGaugeChartNew(chartData, radarBlockId);
    }
}

function displaySolidGaugeChartNew(chartData, radarBlockId) {
    for (var i = 0; i < (chartData.length - 1); i++) {
        chartData[i].valueNext = chartData[i + 1].value;
    }
    am4core.options.commercialLicense = true; 
    am4core.useTheme(am4themes_animated);
   
        var chart = am4core.create(radarBlockId, am4charts.RadarChart);
        //chart.hiddenState.properties.opacity = 1; // this creates initial fade-in
        //chart.colors =chartColors;
        chart.data = chartData;
        chart.padding(0, 0, 0, 0);
        var max = hasV4DataMax(chartData);
        // alert(max);
        var min = hasV4DataMin(chartData);
        setUpV4BigNumbers(chart.numberFormatter, chartData);
        chart.startAngle = -90;
        chart.endAngle = 180;
        var colorSet = new am4core.ColorSet();
        colorSet.list = chartColors2.map((function(color) {
            return new am4core.color(color);
        }));
        //chart.innerRadius = am4core.percent(10);
        // Set number format
        //chart.numberFormatter.numberFormat = "#.#'%'";
        // Create axes
        var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
        categoryAxis.dataFields.category = "label";
        categoryAxis.renderer.grid.template.location = 0;
        categoryAxis.renderer.grid.template.strokeOpacity = 0.1;
        categoryAxis.renderer.labels.template.horizontalCenter = "right";
        categoryAxis.renderer.labels.template.fontWeight = 400;
        
        chart.colors = colorSet;
//        categoryAxis.renderer.labels.template.adapter.add("fill", (function(fill, target) {
//            var c = chartColors2[target.dataItem.index];
//            return (target.dataItem.index >= 0) ? am4core.color(c) : fill;
//        }));
   
        
        var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
        valueAxis.renderer.grid.template.strokeOpacity = 1;
        valueAxis.renderer.minGridDistance = 80;
        valueAxis.min = min;
        valueAxis.max = max;
        valueAxis.strictMinMax = false;
        valueAxis.renderer.labels.template.fillOpacity = 1;
        valueAxis.renderer.grid.template.opacity = 0.2;
        
     
        
        //valueAxis.renderer.minGridDistance = 10;
       // valueAxis.renderer.inversed = true;
        //valueAxis.logarithmic = true;
        var series = chart.series.push(new am4charts.RadarColumnSeries());
        series.columns.template.tooltipText = "{categoryY.value}: {valueX.value}";
        //series.columns.template.width = am4core.percent(80);
        series.dataFields.categoryY = "label";
        series.dataFields.valueX = "value";
        series.columns.template.fill = new am4core.InterfaceColorSet().getFor("alternativeBackground");
        series.columns.template.fillOpacity = 0.9;
        series.columns.template.strokeWidth = 0;
        series.columns.template.radarColumn.cornerRadius = 5;

        series.clustered = true;
        series.columns.template.tooltipText = "{label}: [bold]{value}[/]";
        //series.columns.template.radarColumn.cornerRadius = 20;
        series.columns.template.adapter.add("fill", (function(fill, target) {
            var c = chartColors[target.dataItem.index];
            return c;
        }));
        setUpV4Export(chart, radarBlockId, "rightBottom");
        var labelBullet = new am4charts.LabelBullet();
        setUpV4BigNumbersLabel(labelBullet, max, min);
        series.bullets.push(labelBullet);
        chart.cursor = new am4charts.RadarCursor();
        
//        var legend = new am4charts.Legend();
//    	legend.parent = chart.chartContainer;
//    	legend.itemContainers.template.cursorOverStyle = am4core.MouseCursorStyle.default;
//    	legend.align = "right";
//    	legend.data = chart.data;
    	
  
}


function displaySimpleProgressBarChart(symbolicId) {
	
	
	 if (!symbolicId || symbolicId == null) {
	        symbolicId = "0";
	    }
	    var barBlockId = symbolicId + "_genericBars";
	    // alert(barBlockId);
	    var barBlock = document.getElementById(barBlockId);
	    // alert(barBlock);
	    // alert(barBlock);
	    if (barBlock) {
	        var barLabels = document.getElementById(symbolicId + "barLabels");
	        var barValues = document.getElementById(symbolicId + "barValues");
	        displayGenericBarsChart(symbolicId, barLabels.value.split(","),
	            barValues.value.split(","));
	    }
	    
	var chart = am4core.create(barBlockId, am4charts.XYChart);
	// Add data
	chart.data = [{
	  "category": "",
	  "from": 0,
	  "to": 15,
	  "name": "Stage #1",
	  "fill": am4core.color("#0ca948")
	}, {
	  "category": "",
	  "from": 15,
	  "to": 75,
	  "name": "Stage #2",
	  "fill": am4core.color("#93da49")
	}, {
	  "category": "",
	  "from": 75,
	  "to": 90,
	  "name": "Stage #3",
	  "fill": am4core.color("#ffd100")
	}, {
	  "category": "",
	  "from": 90,
	  "to": 95,
	  "name": "Stage #4",
	  "fill": am4core.color("#cd213b")
	}, {
	  "category": "",
	  "from": 95,
	  "to": 100,
	  "name": "Stage #5",
	  "fill": am4core.color("#9e9e9e")
	}];

	// Create axes
	var yAxis = chart.yAxes.push(new am4charts.CategoryAxis());
	yAxis.dataFields.category = "category";
	yAxis.renderer.grid.template.disabled = true;
	yAxis.renderer.labels.template.disabled = true;

	var xAxis = chart.xAxes.push(new am4charts.ValueAxis());
	xAxis.renderer.grid.template.disabled = true;
	xAxis.renderer.grid.template.disabled = true;
	xAxis.renderer.labels.template.disabled = true;
	xAxis.min = 0;
	xAxis.max = 100;

	// Create series
	var series = chart.series.push(new am4charts.ColumnSeries());
	series.dataFields.valueX = "to";
	series.dataFields.openValueX = "from";
	series.dataFields.categoryY = "category";
	series.columns.template.propertyFields.fill = "fill";
	series.columns.template.strokeOpacity = 0;
	series.columns.template.height = am4core.percent(100);

	// Ranges/labels
	chart.events.on("beforedatavalidated", function(ev) {
	  var data = chart.data;
	  for(var i = 0; i < data.length; i++) {
	    var range = xAxis.axisRanges.create();
	    range.value = data[i].to;
	    range.label.text = data[i].to + "%";
	    range.label.horizontalCenter = "right";
	    range.label.paddingLeft = 5;
	    range.label.paddingTop = 5;
	    range.label.fontSize = 10;
	    range.grid.strokeOpacity = 0.2;
	    range.tick.length = 18;
	    range.tick.strokeOpacity = 0.2;
	  }
	});

	// Legend
	var legend = new am4charts.Legend();
	legend.parent = chart.chartContainer;
	legend.itemContainers.template.clickable = false;
	legend.itemContainers.template.focusable = false;
	legend.itemContainers.template.cursorOverStyle = am4core.MouseCursorStyle.default;
	legend.align = "right";
	legend.data = chart.data;
}

function displayGenericBarsChartNew(chartData, barsBlockId, round) {
    //alert(barsBlockId);
    // Populate data
    for (var i = 0; i < (chartData.length - 1); i++) {
        chartData[i].valueNext = chartData[i + 1].value;
    }
    var isInline = barsBlockId.startsWith("bs") || barsBlockId.startsWith("is") || barsBlockId.startsWith("cs") || barsBlockId.startsWith("ex") || chartData.length >2;
    var d1 = $.Deferred();
    d1.done((function() {
        am4core.options.commercialLicense = true;
        am4core.useTheme(am4themes_animated);
        var chart = am4core.create(barsBlockId, am4charts.XYChart);
        
        
		
        //chart.title="asdfasdf";
        chart.hiddenState.properties.opacity = 0; // this creates initial
        var roundTop = !hasV4DataNegatives(chartData);
        var roundBottom = hasV4AllDataNegatives(chartData);
        var max = hasV4DataMax(chartData);
        // alert(max);
        var min = hasV4DataMin(chartData);
        var mid = max / 2;
        chart.data = chartData;
        setUpV4BigNumbers(chart.numberFormatter, chartData);
        chart.paddingLeft = 0;
        chart.paddingRight = 0;
        if (isInline) {
            chart.paddingTop = 5;
        }
        chart.paddingBottom = 0;
        var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
        categoryAxis.renderer.grid.template.location = 0;
        categoryAxis.dataFields.category = "label";
        categoryAxis.renderer.minGridDistance = 40;
        categoryAxis.renderer.minLabelPosition = 0.05;
        categoryAxis.renderer.maxLabelPosition = 0.95;
        // categoryAxis.renderer.labels.template.fillOpacity = 0.9;
        categoryAxis.renderer.grid.template.opacity = 0.3;
        categoryAxis.renderer.grid.template.location = 0;
        // categoryAxis.renderer.minGridDistance = 30;
        categoryAxis.startLocation = 0.1;
        categoryAxis.endLocation = 0.9;
        let label = categoryAxis.renderer.labels.template;
        label.hideOversized = true;
        //label.ellipsis = "...";
        label.tooltipText = "{category}";
        var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
        // valueAxis.min = 0;
        // valueAxis.max = 20000;
        valueAxis.renderer.minGridDistance = 40;
        valueAxis.renderer.minLabelPosition = 0.10;
        valueAxis.renderer.maxLabelPosition = 0.85;
        // valueAxis.renderer.labels.template.dy = 5;
        valueAxis.renderer.labels.template.fillOpacity = 0.5;
        valueAxis.renderer.grid.template.opacity = 0.5;
        // valueAxis.strictMinMax = true;
        if (!isInline) {
            valueAxis.extraMax = 0.2;
        } else {
            valueAxis.inside = true;
            valueAxis.extraMax = 0;
        }
        valueAxis.baseValue = 0;
        let labelV = valueAxis.renderer.labels.template;
        labelV.hideOversized = true;
        // valueAxis.renderer.fillOpacity = 0.3;
        // valueAxis.renderer.grid.opacity = 0.1;
        // this is
        // exactly the
        // same, but
        // with events
        var series = chart.series.push(new am4charts.ColumnSeries());
        series.dataFields.categoryX = "label";
        series.dataFields.valueY = "value";
        series.columns.template.width = am4core.percent(93);
        series.columns.template.tooltipText = "{valueY.value}";
        series.columns.template.tooltipY = 0;
        series.columns.template.fillOpacity = 0.9;
        if (min < 0) {
            valueAxis.strictMinMax = true;
            var range = valueAxis.createSeriesRange(series);
            range.value = 0;
            range.endValue = min;
            range.contents.stroke = am4core.color("#FF0000");
            range.contents.fillOpacity = 0.7;
            range.contents.fill = am4core.color("#FF0000");
        } else {
            valueAxis.strictMinMax = false;
        }
        
        var hasArrows = false;
        //alert(barsBlockId);
        if (chartData.length > 3 
        		&& !roundBottom 
        		&& !("4_genericBars" == barsBlockId) 
        		&& !("riskBar_genericBars" == barsBlockId) 
        		&& !("dividend_genericBars" == barsBlockId) 
        		&& !("mc_genericBars" == barsBlockId)  
        		&& !("overTimeQ_genericBars" == barsBlockId) 
        		&& min>0 && chartData.length < 9) {
            // Add series for showing variance arrows
            var series2 = chart.series.push(new am4charts.ColumnSeries());
            series2.dataFields.valueY = "valueNext";
            series2.dataFields.openValueY = "value";
            series2.dataFields.categoryX = "label";
            series2.columns.template.width = 1;
            series2.fill = am4core.color("#555");
            hasArrows = true;
            series2.stroke = am4core.color("#555");
            //series2.columns.template.width = am4core.percent(100);
            series.columns.template.width = am4core.percent(120);
            // Add a triangle for arrow tip
            var arrow = series2.bullets.push(new am4core.Triangle);
            arrow.width = 6;
            arrow.height = 6;
            arrow.horizontalCenter = "middle";
            arrow.verticalCenter = "top";
            arrow.dy = -1;
            valueAxis.extraMax = 0.2;
            // Set up a rotation adapter which would rotate the triangle if its
            // a
            // negative change
            arrow.adapter.add("rotation", (function(rotation, target) {
                return getVariancePercent(target.dataItem) < 0 ? 180 : rotation;
            }));
            // Set up a rotation adapter which adjusts Y position
            arrow.adapter.add("dy", (function(dy, target) {
                return getVariancePercent(target.dataItem) < 0 ? 1 : dy;
            }));
            // Add a label
            var label2 = series2.bullets.push(new am4core.Label);
            label2.padding(7, 7, 7, 7);
            label2.text = "";
            label2.fill = am4core.color("#0c0");
            label2.strokeWidth = 0;
            label2.horizontalCenter = "middle";
            label2.verticalCenter = "bottom"; 
            label2.fontWeight = "bolder";
            // Adapter for label text which calculates change in percent
            label2.adapter.add("textOutput", (function(text, target) {
                var percent = getVariancePercent(target.dataItem);
                return percent ? percent + "%" : text;
            }));
            // Adapter which shifts the label if it's below the variance column
            label2.adapter.add("verticalCenter", (function(center, target) {
                return getVariancePercent(target.dataItem) < 0 ? "top" : center;
            }));
            // Adapter which changes color of label to red
            label2.adapter.add("fill", (function(fill, target) {
                return getVariancePercent(target.dataItem) < 0 ? am4core.color("#c00") : fill;
            }));
        }

        function getVariancePercent(dataItem) {
            if (dataItem) {
                var value = dataItem.valueY;
                var openValue = dataItem.openValueY;
                var change = value - openValue;
                return Math.round(change / openValue * 100);
            }
            return 0;
        }
        //		series.columns.template.column.cornerRadiusTopLeft = 5;
        //		series.columns.template.column.cornerRadiusTopRight = 5;
        //		series.columns.template.column.cornerRadiusBottomLeft = 5;
        //		series.columns.template.column.cornerRadiusBottomRight = 5;
        if (isInline) {
            var labelBullet = new am4charts.LabelBullet();
            setUpV4BigNumbersLabel(labelBullet, max, min);
            series.bullets.push(labelBullet);
            labelBullet.label.fill = am4core.color("#ffffff");
            labelBullet.dy = 15;
        }
        if (!isInline) {
            var labelBullet = new am4charts.LabelBullet();
            setUpV4BigNumbersLabel(labelBullet, max, min);
            series.bullets.push(labelBullet);
            // labelBullet.label.text = "{valueY.value.formatNumber('#,###.00a')}";
            labelBullet.label.fill = am4core.color("#ffffff");
            if (roundTop) {
                series.columns.template.column.cornerRadiusTopLeft = 2;
                series.columns.template.column.cornerRadiusTopRight = 2;
                series.columns.template.column.cornerRadiusBottomLeft = 0;
                series.columns.template.column.cornerRadiusBottomRight = 0;
                if ((min / max) < .2) {
                    labelBullet.label.fill = am4core.color("#ffffff");
                    labelBullet.dy = 15;
                } else {
                    labelBullet.label.fill = am4core.color("#eeeeee");
                    series.columns.template.fill = am4core.color("#aaaaaa");
                    // valueAxis.logarithmic = true;
                    labelBullet.dy = 15;
                }
            } else if (roundBottom) {
                series.columns.template.column.cornerRadiusTopLeft = 0;
                series.columns.template.column.cornerRadiusTopRight = 0;
                series.columns.template.column.cornerRadiusBottomLeft = 2;
                series.columns.template.column.cornerRadiusBottomRight = 2;
                series.columns.template.fill = am4core.color("#FF0F00");
                labelBullet.dy = -15;
            } else {
                series.columns.template.column.cornerRadiusTopLeft = 2;
                series.columns.template.column.cornerRadiusTopRight = 2;
                series.columns.template.column.cornerRadiusBottomLeft = 2;
                series.columns.template.column.cornerRadiusBottomRight = 2;
                series.columns.template.fill = am4core.color("#cccccc");
                labelBullet.label.fill = am4core.color("#ffffff");
                labelBullet.dy = 12;
            }
            if (chartData.length > 5) {
                series.columns.template.fill = am4core.color("#aaaaaa");
                labelBullet.label.fill = am4core.color("#000000");
                labelBullet.dy = -10;
            } else if (chartData.length < 3) {
                if (roundTop) {
                    labelBullet.label.fill = am4core.color("#ffffff");
                    labelBullet.dy = 15;
                } else {}
            } else if (chartData.length < 4) {
                series.columns.template.fill = am4core.color("#FF0F00");
            } else {
                series.columns.template.fill = am4core.color("#3B5998");
            }
            if (roundBottom) {
                labelBullet.label.fill = am4core.color("#ffffff");
            }
        } else {
            valueAxis.renderer.inside = true;
        }
        var minMaxRatio = min / max;
        // alert("inside " +minMaxRatio+" "+max+ " | "+min);
        if ("overTimeQ_genericBars" == barsBlockId) {
            series.columns.template.fill = am4core.color("#3B5998");
            series.columns.template.stroke = am4core.color("#fff"); // red outline
        } else {
            if (min >= 0 && max < 1000000000 && minMaxRatio < .3 && minMaxRatio >= 0) {
                // alert("inside " +minMaxRatio+" "+max+ " | "+min);
                // axis break
                series.columns.template.fill = am4core.color("#FF0F00");
                series.columns.template.stroke = am4core.color("#FF0F00");
//                var axisBreak = valueAxis.axisBreaks.create();
//                axisBreak.startValue = mid;
//                axisBreak.endValue = mid / 2;
//                // axisBreak.endValue = min*1.2;
//                axisBreak.breakSize = 0.1;
//                // make break expand on hover
//                var hoverState = axisBreak.states.create("hover");
//                hoverState.properties.breakSize = 1;
//                hoverState.properties.opacity = 0.1;
//                hoverState.transitionDuration = 1500;
//                axisBreak.defaultState.transitionDuration = 1000;
                if (max > 0 && min > 0 && (minMaxRatio) < .25) {
                    valueAxis.logarithmic = true;
                   // axisBreak.startValue = max / 2;
                  //  axisBreak.endValue = min * 1.8;
                }
            } else {
                // alert("inside " +minMaxRatio+" | "+max+ " | "+min);
                if (max > 0 && min > 0 && (minMaxRatio) < .25) {
                    valueAxis.logarithmic = true;
                }
                series.columns.template.fill = am4core.color("#3B5998");
                series.columns.template.stroke = am4core.color("#3B5998");
               
            }
        }
        if  ("mc_genericBars" == barsBlockId) {
        	 valueAxis.logarithmic = true;
        }
        
        if (!barsBlockId.startsWith("riskBar") && !isInline) {
            if (barsBlockId.startsWith("overTime")) {
                if (chartData.length < 3) {
                    series.columns.template.fill = am4core.color("#FF0F00");
                    series.columns.template.stroke = am4core.color("#FF0F00");
                } else if (chartData.length < 5) {
                    series.columns.template.fill = am4core.color("#3B5998");
                    series.columns.template.stroke = am4core.color("#3B5998");
                }
                setUpV4Export(chart, barsBlockId, "leftBottom");
            } else {
                setUpV4Export(chart, barsBlockId, "leftBottom");
            }
        } else {
            series.strokeWidth = 0;
            series.tensionX = 0.8;
            series.fillOpacity = 0.7;
            if (barsBlockId.startsWith("bs")) {
                series.columns.template.fill = am4core.color("#145214");
                series.columns.template.stroke = am4core.color("#145214");
            }
            //alert(document.getElementById(barsBlockId+"_menu"));
            setUpV4Export(chart, barsBlockId, "leftBottom");
            
        }
        if (barsBlockId.startsWith("riskBar")) {
            series.columns.template.column.cornerRadiusTopLeft = 2;
            series.columns.template.column.cornerRadiusTopRight = 2;
            series.columns.template.column.cornerRadiusBottomLeft = 0;
            series.columns.template.column.cornerRadiusBottomRight = 0;
            series.columns.template.fill = am4core.color("#FF0F00");
            series.columns.template.stroke = am4core.color("#FF0F00");
            labelBullet.label.fill = am4core.color("#ffffff");
        }
        valueAxis.renderer.line.strokeOpacity = 0.1;
        valueAxis.renderer.line.strokeWidth = 0.1;
        categoryAxis.renderer.line.strokeOpacity = 0;
        categoryAxis.renderer.line.strokeWidth = 0;
        categoryAxis.renderer.labels.template.fillOpacity = 0.5;
        series.columns.template.propertyFields.strokeDasharray = "dashLength";
        series.columns.template.propertyFields.fillOpacity = "alpha";
        series.columns.template.propertyFields.strokeOpacity = "dashAlpha";
        var disatnceState = series.columns.template.states.create("hover");
        disatnceState.properties.fillOpacity = 0.9;
        setV4ChartCursor(chart);
        //alert(barsBlockId);
        label.hideOversized = true;
        if ("overTimeQ_genericBars" == barsBlockId) {
            categoryAxis.renderer.grid.template.location = 0;
            categoryAxis.renderer.minGridDistance = 30;
            
            categoryAxis.renderer.labels.template.verticalCenter = "middle";
            if (chartData.length >12) {
            	categoryAxis.renderer.labels.template.rotation = 270;
            	categoryAxis.renderer.labels.template.horizontalCenter = "right";
            	 labelBullet.label.text = "";
            	 labelBullet.dy = 0;
            } else {
            	//categoryAxis.renderer.labels.template.rotation = 270;
            }
            categoryAxis.tooltip.disabled = true;
            //label.ellipsis = "";
            label.hideOversized = true;
            categoryAxis.renderer.minLabelPosition = 0.0;
            categoryAxis.renderer.maxLabelPosition = 1;
            labelBullet.label.fill = am4core.color("#ffffff");
           
            
            valueAxis.extraMax = 0.0;
            categoryAxis.renderer.labels.template.fontSize = 15;
            //categoryAxis.dateFormats.setKey("label", "MMMM dt");
            valueAxis.renderer.minGridDistance = 40;
            valueAxis.renderer.minLabelPosition = 0.1;
            valueAxis.renderer.line.strokeOpacity = 0.01;
            valueAxis.renderer.line.strokeWidth = 0.01;
            valueAxis.renderer.maxLabelPosition = 0.9;
        } else {
        	if (chartData.length >12) {
        		categoryAxis.renderer.grid.template.location = 0;
                categoryAxis.renderer.minGridDistance = 30;
                categoryAxis.renderer.labels.template.horizontalCenter = "right";
                categoryAxis.renderer.labels.template.verticalCenter = "middle";
                categoryAxis.renderer.labels.template.rotation = 45;
                label.ellipsis = "";
                label.hideOversized = true;
        	}
        }
        series.columns.template.column.cornerRadiusTopLeft = 4;
        series.columns.template.column.cornerRadiusTopRight = 4;
        series.columns.template.column.cornerRadiusBottomLeft = 4;
        series.columns.template.column.cornerRadiusBottomRight = 4;
        
        series.columns.template.width = am4core.percent(99);
        
        if  ("dividend_genericBars" == barsBlockId) {
        	categoryAxis.renderer.labels.template.adapter.add("dy", function(dy, target) {
    		  if (target.dataItem && target.dataItem.index & 2 == 2) {
    		    return dy + 85;
    		  }
    		  return dy;
    		});
       	 	//valueAxis.logarithmic = false;
       	 	//label.ellipsis = "";
        	
       	 	label.hideOversized = true;
       	 	categoryAxis.renderer.labels.template.hideOversized = true;
        } else {
        	label.hideOversized = true;
        	categoryAxis.renderer.labels.template.hideOversized = true;
        }
        label.hideOversized = true;
        categoryAxis.renderer.labels.template.hideOversized = true;
    	//alert(categoryAxis.renderer.labels.template.hideOversized);
        if (chartData.length == 4) {
        	if (max > 0 && min > 0) {
        		 
                 series.columns.template.width = 5;
                 valueAxis.renderer.inside = false;
                 if (minMaxRatio  < .25) {
                 	valueAxis.logarithmic = true;
                 } else {
                	 valueAxis.logarithmic = false;
                 }
                 valueAxis.extraMax = 0.0;
                 series.columns.template.fill = am4core.color("#3B5998");
                 series.columns.template.stroke = am4core.color("#3B5998");
                 series.columns.template.strokeWidth = 2;
                 series.columns.template.fillOpacity = 0.95;
                 if (hasArrows) {
                	  series.columns.template.width = am4core.percent(50);
                 } else {
                	  series.columns.template.width = am4core.percent(78);
                 }
               
               
                // series.columns.template.fontSize = 20;
                 //series.labels.template.fontSize = 22;
                 
        	} else {
        		//alert(barsBlockId);
        		displaySolidGaugeChartNew(chartData, barsBlockId);
        		return;
        	}
        	
        }  if (chartData.length == 3) {
        	if (max > 0 && min > 0) {
       		 
                series.columns.template.width = 5;
                valueAxis.renderer.inside = true;
                //alert(minMaxRatio);
                if (minMaxRatio  < .25) {
                	valueAxis.logarithmic = true;
                } else {
               	 valueAxis.logarithmic = false;
                }
                valueAxis.extraMax = 0.0;
                series.columns.template.fill = am4core.color("#3B5998");
                series.columns.template.stroke = am4core.color("#3B5998");
                series.columns.template.strokeWidth = 2;
                series.columns.template.fillOpacity = 0.95;
                
                if (hasArrows) {
               	  series.columns.template.width = am4core.percent(50);
                } else {
               	  series.columns.template.width = am4core.percent(79);
                }
              
               // series.columns.template.fontSize = 20;
                //series.labels.template.fontSize = 22;
                
       	} else {
       		displaySolidGaugeChartNew(chartData, barsBlockId);
    		return;
       	}
       	
       } else if (chartData.length == 2) {
        	if (max > 0 && min > 0) {
          		 
                   valueAxis.renderer.inside = false;
                   if (minMaxRatio  < .25) {
                   		valueAxis.logarithmic = true;
                   } else {
                  	 valueAxis.logarithmic = false;
                   }
                   valueAxis.extraMax = 0.0;
                   series.columns.template.fill = am4core.color("#3B5998");
                   series.columns.template.stroke = am4core.color("#3B5998");
                   series.columns.template.strokeWidth = 3;
                   series.columns.template.width = am4core.percent(58);
                   series.columns.template.fillOpacity = 0.9;
        	} else {
        		displaySolidGaugeChartNew(chartData, barsBlockId);
        		return;
        	}
                 
          } else if (chartData.length == 5) {
        	if (max > 0 && min > 0) {
       		 	
                valueAxis.renderer.inside = false;
                if (minMaxRatio  < .25) {
                	valueAxis.logarithmic = true;
                } else {
               	 	valueAxis.logarithmic = false;
                }
                
                valueAxis.extraMax = 0.0;
                series.columns.template.fill = am4core.color("#3B5998");
                series.columns.template.stroke = am4core.color("#3B5998");
                series.columns.template.strokeWidth = 2;
                series.columns.template.width = am4core.percent(58);
                series.columns.template.fillOpacity = 0.95;
        	}
       	
       }
        //setUpV4Export(chart, barsBlockId, "leftBottom");	   
        //alert(barsBlockId);
    }));
    d1.resolve();
    // labelBullet.stroke = am4core.color("#ffffff");
}

function displayGenericBarsChart(symbolicId, labels, values) {
    // alert(symbolicId);
    var chartData = [];
    var size = labels.length;
    for (var i = 0; i < size; i++) {
        var l = labels[i];
        var v = values[i];
        if (v > 1) {
            v = roundToTwo(v);
        } else {
            v = roundToSix(v);
        }
        // alert(v);
        if (l == "Cash") {
            chartData.push({
                label: l,
                value: v,
                color: "#98FB98"
            });
        } else if (l == "Other") {
            chartData.push({
                label: l,
                value: v,
                color: "#CCCCCC"
            });
        } else if (l == "Others") {
            chartData.push({
                label: l,
                value: v,
                color: "#FFA500"
            });
        } else if (l == "Funds") {
            chartData.push({
                label: l,
                value: v,
                color: "#3B5998"
            });
        } else if (l == "Strong Buy") {
            chartData.push({
                label: l,
                value: v,
                color: "#0B3B0B"
            });
        } else if (l == "Buy") {
            chartData.push({
                label: l,
                value: v,
                color: "#088A08"
            });
        } else if (l == "Sell") {
            chartData.push({
                label: l,
                value: v,
                color: "#FA5858"
            });
        } else if (l == "Strong Sell") {
            chartData.push({
                label: l,
                value: v,
                color: "#8A0808"
            });
        } else if (l == "Hold") {
            chartData.push({
                label: l,
                value: v,
                color: "#BDBDBD"
            });
        } else if (l == "Large") {
            chartData.push({
                label: l,
                value: v,
                color: "#60BD68"
            });
        } else if (l == "Bitcoins") {
            chartData.push({
                label: l,
                value: v,
                color: "#FFA500"
            });
        } else if (l == "Crypto") {
            chartData.push({
                label: l,
                value: v,
                color: "#FFA500"
            });
        } else if (l == "Micro") {
            chartData.push({
                label: l,
                value: v,
                color: "#DF0101"
            });
        } else if (l == "ETFs") {
            chartData.push({
                label: l,
                value: v,
                color: "#5DA5DA"
            });
        } else if (l == "ETFs") {
            chartData.push({
                label: l,
                value: v,
                color: "#C7D3E8"
            });
        } else if (l.indexOf("Finan") != -1) {
            chartData.push({
                label: l,
                value: v,
                color: "green"
            });
        } else if (l.indexOf("Money") != -1) {
            chartData.push({
                label: l,
                value: v,
                color: "#01DF01"
            });
        } else if (l.indexOf("Services") != -1) {
            chartData.push({
                label: l,
                value: v,
                color: "#F17CB0"
            });
        } else if (l.indexOf("Goods") != -1) {
            chartData.push({
                label: l,
                value: v,
                color: "#B2912F"
            });
        } else if (l.indexOf("Other") != -1) {
            chartData.push({
                label: l,
                value: v,
                color: "#CCCCCC"
            });
        } else if (l == "Mid") {
            chartData.push({
                label: l,
                value: v,
                color: "#3B5998"
            });
        } else if (l == "Technology") {
            chartData.push({
                label: l,
                value: v,
                color: "#DF0101"
            });
        } else {
            // alert(l);
            if (i == (size - 1)) {
                var col = "#AAAAAA";
                chartData.push({
                    label: l,
                    value: v,
                    color: col,
                    dashLength: 3,
                    dashAlpha: 0,
                    alpha: 0.3
                });
            } else {
                var col = "#AAAAAA";
                chartData.push({
                    label: l,
                    value: v,
                    color: col
                });
            }
        }
    }
    // alert(size);
    var barsBlockId = symbolicId + "_genericBars";
    // var max = hasV4DataMax(chartData);
    //alert(barsBlockId);
    // if (max > 1000000000) {
    // return displayGenericRadarChartInlineNew(chartData, barsBlockId, true);
    // }
   
    if (symbolicId == "ind" || symbolicId == "indpitch" || symbolicId == "s" || symbolicId == "buySell" || symbolicId == "mcpitch" || symbolicId == "itpitch" || symbolicId == "spitch") {
        return displayGenericTreeMapChartInlineNew(chartData, barsBlockId, true);
    } else if (symbolicId == "it" || symbolicId == "itpitch") {
        return displayGenericTreeMapChartInlineNew(chartData, barsBlockId, true);
    } else if (symbolicId == "mc" || symbolicId == "alphas" ||
        symbolicId == "etfCurrency" ||
        symbolicId == "overTime" ||
        symbolicId == "overTimeQ" ||
        symbolicId == "dividend" ||
        symbolicId == "inlineOverTime") {
        return displayGenericBarsChartNew(chartData, barsBlockId);
    }  else if (symbolicId == "riskBar") {
    	return displaySolidGaugeChartNew(chartData, barsBlockId);
    } else if (symbolicId != "0" && symbolicId != "-4") {
        return displayGenericPieChartInlineNew(chartData, barsBlockId);
    } else if (symbolicId == "0") {
        return displayGenericBarsChartNew(chartData, barsBlockId);
    }
    chart = new AmCharts.AmSerialChart();
    decorateBarChart(chart);
    chart.dataProvider = chartData;
    chart.categoryField = "label";
    chart.colors = chartColors;
    decorateBalloon(chart.balloon);
    chart.autoMargins = true;
    chart.startDuration = 0;
    //alert("a");
    // AXES
    // Category
    var categoryAxis = chart.categoryAxis;
    if (symbolicId != "mc" && symbolicId != "it" && symbolicId != "alphas" && symbolicId != "etfCurrency") {
        if (labels.length > 5) {
            categoryAxis.labelRotation = 90;
            // chart.marginBottom=120;
        } else {}
    } else {
        if (symbolicId == "etfCurrency") {
            categoryAxis.labelRotation = 0;
        } else if (labels.length > 5) {
            categoryAxis.labelRotation = 90;
            // chart.marginBottom=120;
        }
    }
    categoryAxis.color = "#aaaaaa";
    categoryAxis.fontSize = 12;
    // Value
    var valueAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valueAxis);
    chart.addValueAxis(valueAxis);
    // GRAPH
    var graph = new AmCharts.AmGraph();
    graph.type = "column";
    graph.title = "Focus";
    graph.valueField = "value";
    graph.colorField = "color";
    graph.lineColorField = "color";
    graph.balloonText = "[[category]]: [[value]]";
    // alert(graph);
    decorateBarGraph(graph);
    // graph.labelText = "[[percents]]%";
    decorateBalloon(chart.balloon);
    decorateBarCategoryAxis(categoryAxis, symbolicId);
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor, true);
    chart.addChartCursor(chartCursor);
    // chart.pathToImages = "/images/charts/";
    chart.addGraph(graph);
    // alert(symbolicId);
    if (symbolicId == "s" || symbolicId == "ind" || symbolicId == "-4" || symbolicId == "etfInd") {
        chart.rotate = true;
        graph.lineColorField = "color";
        // chart.groupPercent=20;
    }
    if (symbolicId == "-4") {
        chart.autoMargins = true;
        graph.labelPosition = "inside";
        graph.color = "#ffffff";
        graph.lineColorField = "color";
        graph.type = "column";
    }
    if (symbolicId != "-4") {
        addChartWaterMark(chart);
        graph.labelPosition = "inside";
        graph.color = "gray";
        // graph.labelText = " [[value]] %";
        // chart.autoMargins = false;
        // chart.marginTop = 30;
        // chart.labelOffset = 20;
    }
    if (symbolicId == "etfInd") {
        graph.labelText = " [[value]]%";
        // chart.autoMargins = false;
        // chart.marginTop = 30;
        // chart.labelOffset = 20;
    }
    // chart.export = buildExportConfig();
    // alert(symbolicId);
    if (symbolicId.indexOf("pitch") == -1 && symbolicId != "-4") {
        chart.export = buildExportConfig(barsBlockId);
    }
    chart.write(barsBlockId);
}

function getLinearOverTimeChartData(symbolicId) {
    if (!symbolicId || symbolicId == null) {
        symbolicId = "0";
    }
    var barBlockId = symbolicId + "_genericBars";
    //alert(barBlockId);
    var barBlock = document.getElementById(barBlockId);
    
   
    //alert(barBlock);
    var hasNegative = false;
    var chartData = [];
    if (barBlock) {
    	//alert(barBlockId);
    	var sL = document.getElementById(symbolicId + "lineLabels");
    	if (!sL) {
    		return;
    	}
        var labels = sL.value.split(",");
        var values = document.getElementById(symbolicId + "lineValues").value.split(",");
        //alert(labels.value);
        //alert(values.value);
        var size = labels.length;
        for (var i = 0; i < size; i++) {
            var l = labels[i];
            var v = values[i];
            var colorB = "#3B5998";
            var colorL = "#3B5998";
            var dashLength = 1;
            var add = "";
            var bs = 8;
            var lb = "";
            var cn = "lastBullet";
            if (v < 0) {
                colorB = "#DF0101";
                colorL = "#DF0101";
            }
            if (i == size - 1) {
                colorB = "#000000";
                colorL = "#aaaaaa";
                dashLength = 2;
                add = "(Projected)";
                bs = 22;
            } else if (i == size - 2) {
                colorL = "#0B3861";
                colorB = "#000000";
                dashLength = 2;
                add = "(Current)";
                lb = formatBigNumber(roundToTwo(v));
                bs = 27;
                className: cn;
            }
            // alert(l+" "+v);
            if (v < 0) {
                hasNegative = true;
            }
            if (v > 1 || v < -1) {
                v = roundToTwo(v);
            } else {
                v = roundToSix(v);
            }
            if (i == (size - 1)) {
                chartData.push({
                    label: l,
                    value: v,
                    colorLine: colorL,
                    colorBullet: colorB,
                    labelText: lb,
                    dashLengthColumn: dashLength,
                    additional: add,
                    bulletSize: bs,
                    dashLength: 3,
                    dashAlpha: 0,
                    alpha: 0.3
                });
            } else {
                chartData.push({
                    label: l,
                    value: v,
                    colorLine: colorL,
                    colorBullet: colorB,
                    labelText: lb,
                    dashLengthColumn: dashLength,
                    additional: add,
                    bulletSize: bs
                });
            }
        }
    }
    //alert(chartData);
    return chartData;
}

function displayOverTimeRatioChart(symbolicId, isBar) {
    var barBlockId = symbolicId + "_genericBars";
    var chartData = getLinearOverTimeChartData(symbolicId);
    if (chartData && chartData.length > 0) {
        displayGenericBarsChartNew(chartData, barBlockId);
    }
}

function displayPostGenericLineChart(symbolicId) {
    var chartData = getLinearOverTimeChartData(symbolicId);
    //alert(chartData);
    var lineBlockId = symbolicId + "_genericBars";
    if (chartData && chartData.length > 0) {
        displayGenericLineChartNew(chartData, lineBlockId);
    }
}

function displayGenericLineChartNew(chartData, lineBlockId) {
    // alert(lineBlockId);
    // Populate data
    for (var i = 0; i < (chartData.length - 1); i++) {
        chartData[i].valueNext = chartData[i + 1].value;
    }
    //alert(chartData);
    var d1 = $.Deferred();
    d1.done((function() {
        am4core.options.commercialLicense = true;
        am4core.useTheme(am4themes_animated);
        var chart = am4core.create(lineBlockId, am4charts.XYChart);
        chart.data = chartData;
        chart.hiddenState.properties.opacity = 0; // this creates initial
        var roundTop = !hasV4DataNegatives(chartData);
        var roundBottom = hasV4AllDataNegatives(chartData);
        var max = hasV4DataMax(chartData);
        // alert(max);
        var min = hasV4DataMin(chartData);
        var mid = max / 2;
        chart.data = chartData;
        setUpV4BigNumbers(chart.numberFormatter, chartData);
        chart.paddingLeft = 0;
        chart.paddingRight = 0;
        chart.paddingTop = 0;
        chart.paddingBottom = 0;
        var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
        //categoryAxis.renderer.grid.template.location = 0;
        categoryAxis.dataFields.category = "label";
        categoryAxis.renderer.minLabelPosition = 0.05;
        categoryAxis.renderer.maxLabelPosition = 0.95;
        categoryAxis.renderer.grid.template.location = 0;
        categoryAxis.renderer.grid.template.opacity = 0.3;
        categoryAxis.renderer.grid.template.location = 0.5;
        categoryAxis.startLocation = 0.5;
        categoryAxis.endLocation = 0.5;
        categoryAxis.renderer.minGridDistance = 40;
        let label = categoryAxis.renderer.labels.template;
        label.hideOversized = true;
        label.ellipsis = "...";
        label.truncate = true;
        label.maxWidth = 120;
        label.tooltipText = "{category}";
        var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
        // valueAxis.min = 0;
        // valueAxis.max = 20000;
        valueAxis.baseValue = 0;
        valueAxis.renderer.minGridDistance = 40;
        valueAxis.renderer.minLabelPosition = 0.10;
        valueAxis.renderer.maxLabelPosition = 0.85;
        // valueAxis.renderer.labels.template.dy = 5;
        valueAxis.renderer.labels.template.fillOpacity = 0.5;
        valueAxis.renderer.grid.template.opacity = 0.3;
        let labelV = valueAxis.renderer.labels.template;
        labelV.hideOversized = true;
        valueAxis.renderer.inside = true;
        // Create series
        var series = chart.series.push(new am4charts.LineSeries());
        series.dataFields.categoryX = "label";
        series.dataFields.valueY = "value";
        series.strokeWidth = 3;
        series.tensionX = 0.8;
        series.fillOpacity = 0.7;
        series.fill = am4core.color("#3B5998");
        series.stroke = am4core.color("#3B5998");
        if (min < 0) {
            valueAxis.strictMinMax = true;
            var range = valueAxis.createSeriesRange(series);
            range.value = 0;
            range.endValue = min;
            range.contents.stroke = am4core.color("#FF0000");
            range.contents.fillOpacity = 0.7;
            range.contents.fill = am4core.color("#FF0000");
        } else {
            valueAxis.strictMinMax = false;
        }
        var bullet = series.bullets.push(new am4charts.CircleBullet());
        bullet.stroke = am4core.color("#000");
        bullet.strokeWidth = 2;
        bullet.tooltipText = "{valueY}";
        bullet.circle.radius = 5;
        bullet.fill = am4core.color("#fff");
        var range = categoryAxis.createSeriesRange(series);
        range.category = chartData[chartData.length - 1].label;
        range.endCategory = chartData[chartData.length - 1].label;
        range.contents.fillOpacity = 0.3;
        if (chartData[chartData.length - 1].value < 0) {
            range.contents.stroke = am4core.color("#FF0000");
            range.contents.fill = am4core.color("#FF0000");
        }
        //range.contents.fill = range.contents.stroke;
        valueAxis.renderer.line.strokeOpacity = 0.1;
        valueAxis.renderer.line.strokeWidth = 0.1;
        categoryAxis.renderer.line.strokeOpacity = 0;
        categoryAxis.renderer.line.strokeWidth = 0;
        categoryAxis.renderer.labels.template.fillOpacity = 0.5;
        setV4ChartCursor(chart);
    }));
    d1.resolve();
}

function displayGenericLineChart(symbolicId, labels, values, isBar) {
    // alert(labels);
    var chartData = [];
    var size = labels.length;
    for (var i = 0; i < size; i++) {
        var l = labels[i];
        var v = values[i];
        var colorB = "#3B5998";
        var colorL = "#3B5998";
        var dashLength = 1;
        var add = "";
        var bs = 8;
        var lb = "";
        var cn = "lastBullet";
        if (v < 0) {
            colorB = "#DF0101";
            colorL = "#DF0101";
        }
        if (i == size - 1) {
            colorB = "#000000";
            colorL = "#aaaaaa";
            dashLength = 2;
            add = "(Projected)";
            bs = 22;
        } else if (i == size - 2) {
            colorL = "#0B3861";
            colorB = "#000000";
            dashLength = 2;
            add = "(Current)";
            lb = formatBigNumber(roundToTwo(v));
            bs = 27;
            className: cn;
        }
        chartData.push({
            label: l,
            value: v,
            colorLine: colorL,
            colorBullet: colorB,
            labelText: lb,
            dashLengthColumn: dashLength,
            additional: add,
            bulletSize: bs
        });
    }
    // alert(size);
    var barsBlockId = symbolicId + "_genericBars";
    // alert(barsBlockId);
    chart = new AmCharts.AmSerialChart();
    // chart.autoMargins = true;
    setUpLineMargings(chart);
    chart.dataProvider = chartData;
    chart.categoryField = "label";
    // chart.colors ="#aaaaaa";
    chart.startDuration = 0;
    var categoryAxis = chart.categoryAxis;
    decorateCategoryAxis(categoryAxis);
    categoryAxis.parseDates = true;
    categoryAxis.equalSpacing = false;
    categoryAxis.inside = false;
    categoryAxis.tickLength = 0;
    // Value
    var valueAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valueAxis);
    chart.addValueAxis(valueAxis);
    // GRAPH
    var graph = new AmCharts.AmGraph();
    graph.classNameField = "className";
    graph.valueField = "value";
    graph.colorField = "color";
    graph.balloonText = "[[category]]: [[value]]";
    graph.labelText = "[[labelText]]";
    graph.labelFunction = formatGenericLabels;
    graph.labelColor = "#3B5998";
    graph.labelOffset = 10;
    graph.labelPosition = "top";
    // graph.fontSize = 12;
    graph.color = "#3B5998";
    var chartCursor = new AmCharts.ChartCursor();
    decorateBalloon(chart.balloon);
    if (isBar) {
        decorateBarChart(chart);
        graph.type = "column";
        categoryAxis.equalSpacing = true;
        categoryAxis.autoWrap = true;
        // categoryAxis.ignoreAxisWidth = true;
        graph.fillAlphas = .4;
        graph.lineColorField = "colorLine";
        graph.fillColorsField = "colorLine";
        categoryAxis.color = "#aaaaaa";
        decorateBarGraph(graph);
        decorateCursor(chartCursor, true);
    } else {
        graph.type = "smoothedLine";
        graph.bullet = "round";
        graph.lineThickness = 3;
        categoryAxis.equalSpacing = false;
        graph.lineColorField = "colorLine";
        graph.fillColorsField = "colorLine";
        graph.fillAlphas = .2;
        graph.bulletSizeField = "bulletSize";
        graph.bulletColorField = "colorBullet";
        graph.bulletBorderAlpha = 1;
        graph.bulletAlpha = 0.8;
        graph.dashLengthField = "dashLengthColumn";
        graph.showBalloon = true;
        graph.balloonText = "<span style='font-size:13px;'>[[category]]:<b>[[value]]</b> [[additional]]</span>";
        decorateCursor(chartCursor);
    }
    chart.addChartCursor(chartCursor);
    chart.prefixesOfBigNumbers = prefixesOfBigNumbers;
    // chart.pathToImages = "/images/charts/";
    chart.usePrefixes = true;
    graph.showAllValueLabels = false;
    // graph.lineAlpha = 0.8;
    chart.labelColor = "#3B5998";
    graph.labelColor = "#3B5998";
    chart.addGraph(graph);
    addChartWaterMark(chart);
    chart.export = buildExportConfig(barsBlockId);
    chart.write(barsBlockId);
}

function scaleMax(max) {
    if (max < 0) {
        max = max * 1.1;
    } else if (max == 0) {
        max = .1;
    } else if (max < 1) {
        max = max * 1.2;
    } else {
        max = max * 1.1;
    }
    // alert(max);
    return max;
}

function scaleMin(min) {
    // alert(min)
    if (min < 0) {
        min = min * 1.15;
    } else if (min == 0) {
        min = -.05;
    } else if (min > 100000) {
        min = min * 0.7;
    } else if (min > 10000) {
        min = min * 0.75;
    } else if (min > 10) {
        min = min * 0.8;
    } else {
        min = min * 0.9;
    }
    // alert(min)
    return min;
}

function decorateBalloon(balloon) {
    balloon.adjustBorderColor = false;
    balloon.borderThickness = 1;
    balloon.verticalPadding = 7;
    balloon.borderAlpha = 1;
    balloon.shadowAlpha = 0;
    balloon.fillAlpha = .9;
    balloon.color = "#ffffff";
}

function getSmallAllocationDataFromLabelAndValueArray(labels, values) {
    var chartData = [];
    var size = labels.length;
    for (var i = 0; i < size; i++) {
        var l = labels[i];
        var v = values[i];
        if (l == "Others") {
            c = "#cccccc";
        } else {
            c = "#aaaaaa";
        }
        if (i == 0) {
            chartData.push({
                label: l,
                value: v,
                color: c,
                pulled: true
            });
        } else {
            chartData.push({
                label: l,
                value: v,
                color: c,
                pulled: false
            });
        }
    }
    // alert(chartData);
    return chartData;
}

function getBuySellChartDataFromLabelAndValueArray(labels, values) {
    var chartData = [];
    var size = labels.length;
    for (var i = 0; i < size; i++) {
        var l = labels[i];
        var v = values[i];
        var c = buySellColors[i];
        if (l == "Cash") {
            c = "#cccccc";
        }
        if (i == 0) {
            chartData.push({
                label: l,
                value: v,
                color: c,
                pulled: true
            });
        } else {
            chartData.push({
                label: l,
                value: v,
                color: c,
                pulled: false
            });
        }
    }
    // alert(chartData);
    return chartData;
}

function getCompareChartDataFromLabelAndValueArray(labels, values1, values2) {
    // alert(labels);
    var chartData = [];
    var size = labels.length;
    for (var i = 0; i < size; i++) {
        var l = labels[i];
        var v1 = values1[i];
        var v2 = values2[i];
        if (i == (size - 1)) {
            chartData.push({
                label: l,
                value: v1,
                value2: v2,
                dashLength: 1,
                dashAlpha: 0,
                alpha: 0.3
            });
        } else {
            chartData.push({
                label: l,
                value: v1,
                value2: v2
            });
        }
    }
    return chartData;
}

function getChartDataFromLabelAndValueArray(labels, values) {
    // alert(labels);
    var chartData = [];
    var size = labels.length;
    for (var i = 0; i < size; i++) {
        var l = labels[i];
        var v = values[i];
        var c = chartColors[i];
        if (l == "Cash" || l == "CASH" || l == "US" || l == "USD" || l == "United States" || l == "Public") {
            c = "#009900";
            // alert(l);
        } else if (l == "Others" || l == "Other") {
            c = "#000000";
            // alert(l);
        }
        // alert(c);
        if (i == 0) {
            chartData.push({
                label: l,
                value: v,
                color: c,
                pulled: true
            });
        } else {
            chartData.push({
                label: l,
                value: v,
                color: c,
                pulled: false
            });
        }
    }
    // alert(chartData);
    return chartData;
}

function testTransactionHistoryChart(divid) {
    var chartData = [];
    var firstDate = new Date(2012, 0, 1);
    firstDate.setDate(firstDate.getDate() - 500)
    firstDate.setHours(0, 0, 0, 0);
    for (var i = 0; i < 500; i++) {
        var newDate = new Date(firstDate);
        newDate.setDate(newDate.getDate() + i);
        var a = Math.round(Math.random() * (40 + i)) + 100 + i;
        var b = Math.round(Math.random() * 100000000);
        chartData.push({
            date: newDate,
            value: a
        });
    }
    var b1 = {
        date: new Date(2010, 8, 19),
        type: "sign",
        backgroundColor: "#0B610B",
        backgroundAlpha: 0.3,
        borderColor: "#0B610B",
        text: "B",
        description: "This is description for buy event"
    };
    var d1 = {
        date: new Date(2010, 11, 10),
        showOnAxis: true,
        backgroundColor: "#0B610B",
        backgroundAlpha: 0.3,
        borderColor: "#0B610B",
        type: "flag",
        text: "200,000",
        description: "11/10/2011 Deposit"
    };
    var w1 = {
        date: new Date(2011, 0, 26),
        showOnAxis: true,
        backgroundColor: "#FF0000",
        backgroundAlpha: 0.3,
        borderColor: "#FF0000",
        type: "flag",
        text: "50,000",
        description: "11/10/2011 Withdrow"
    };
    var b2 = {
        date: new Date(2011, 0, 3),
        type: "sign",
        backgroundColor: "#0B610B",
        backgroundAlpha: 0.3,
        borderColor: "#0B610B",
        text: "B",
        description: "This is description of a Buy"
    };
    var b3 = {
        date: new Date(2011, 1, 6),
        type: "sign",
        backgroundColor: "#0B610B",
        backgroundAlpha: 0.3,
        borderColor: "#0B610B",
        text: "B",
        description: "This is description of a Buy"
    };
    var s1 = {
        date: new Date(2011, 3, 5),
        type: "sign",
        backgroundColor: "#FF0000",
        backgroundAlpha: 0.3,
        borderColor: "#FF0000",
        text: "S",
        description: "This is description for sale event"
    };
    var s2 = {
        date: new Date(2011, 3, 5),
        type: "sign",
        backgroundColor: "#FF0000",
        backgroundAlpha: 0.3,
        borderColor: "#FF0000",
        text: "S",
        description: "This is description for sale event"
    };
    var s3 = {
        date: new Date(2011, 3, 5),
        type: "sign",
        backgroundColor: "#FF0000",
        backgroundAlpha: 0.3,
        borderColor: "#FF0000",
        text: "S",
        description: "This is description for sale event"
    };
    var s4 = {
        date: new Date(2011, 3, 5),
        type: "sign",
        backgroundColor: "#FF0000",
        backgroundAlpha: 0.3,
        borderColor: "#FF0000",
        text: "S",
        description: "This is description for sale event"
    };
    var s5 = {
        date: new Date(2011, 5, 15),
        type: "sign",
        backgroundColor: "#FF0000",
        backgroundAlpha: 0.3,
        borderColor: "#FF0000",
        text: "S",
        description: "This is description for sale event"
    };
    var e1 = {
        date: new Date(2011, 8, 1),
        type: "text",
        text: "Longer text can\nalso be displayed",
        description: "This is description of an event"
    };
    var eventData = [b1, d1, w1, b2, b3, s1, s1, s3, s4, s5, e1];
    displayTransactionHistoryChart(divid, chartData, eventData);
}

function displayTransactionHistoryChart(divid, chartData, eventData, symbol) {
    hypeChart = new AmCharts.AmStockChart();
    // alert('a');
    // hypeChart.pathToImages = "/images/charts/";
    // hypeChart.panEventsEnabled = true;
    // DATASETS //////////////////////////////////////////
    var dataSet = new AmCharts.DataSet();
    dataSet.color = "#aaaaaa";
    dataSet.fieldMappings = [{
        fromField: "value",
        toField: "value"
    }];
    dataSet.dataProvider = chartData;
    dataSet.categoryField = "date";
    // set data sets to the chart
    hypeChart.dataSets = [dataSet];
    // var exportConfig = getExportConfig();
    // alert(exportConfig);
    // chart.export = exportConfig;
    // PANELS ///////////////////////////////////////////
    // first stock panel
    var stockPanel = new AmCharts.StockPanel();
    stockPanel.iconSize = 26;
    stockPanel.panEventsEnabled = true;
    stockPanel.drawingIconsEnabled = true;
    stockPanel.iconSize = 18;
    stockPanel.showCategoryAxis = true;
    stockPanel.title = symbol;
    stockPanel.autoMargins = false;
    stockPanel.marginTop = 100;
    // hypeChart.marginLeft =170;
    // stockPanel.marginLeft =170;
    // graph of first stock panel
    var graph = new AmCharts.StockGraph();
    graph.lineColor = "#000000";
    graph.fillColors = "#aaaaaa";
    graph.fillAlphas = 0.2;
    graph.lineAlpha = 0.9;
    graph.lineThickness = 2;
    graph.color = "#aaaaaa";
    graph.valueField = "value";
    graph.type = "smoothedLine";
    stockPanel.addStockGraph(graph);
    var valueAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valueAxis);
    valueAxis.labelsEnabled = false;
    valueAxis.recalculateToPercents = true;
    valueAxis.inside = true;
    valueAxis.position = "left";
    stockPanel.addValueAxis(valueAxis);
    var categoryAxesSettings = new AmCharts.CategoryAxesSettings();
    decorateCategoryAxis(categoryAxesSettings);
    categoryAxesSettings.startOnAxis = true;
    categoryAxesSettings.position = "top";
    categoryAxesSettings.equalSpacing = true;
    hypeChart.categoryAxesSettings = categoryAxesSettings;
    // stockPanel.categoryAxesSettings = catAxisSettings;
    // var catAxis = stockPanel.categoryAxesSettings;
    // alert(catAxis);
    // set panels to the chart
    hypeChart.panels = [stockPanel];
    var scrollbarSettings = new AmCharts.ChartScrollbarSettings();
    scrollbarSettings.graph = graph;
    decorateScrollBarChartSettings(scrollbarSettings);
    hypeChart.chartScrollbarSettings = scrollbarSettings;
    decorateBalloon(hypeChart.balloon);
    dataSet.stockEvents = eventData;
    for (var i = 0; i < eventData.length; i++) {
        e = eventData[i];
        // alert(e);
        e.graph = graph;
    }
    // alert(eventData);
    dataSet.stockEvents = eventData;
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor);
    stockPanel.addChartCursor(chartCursor);
    // stockPanel.addLabel(0,1,"Macroaxis
    // Charts","center",12,"#aaaaaa",0,0.5,false,"http://www.macroaxis.com");
    // chart.panelsSettings.fontFamily = 'Arial';
    addChartWaterMark(stockPanel);
    // setUpLineMargings(hypeChart);
    // hypeChart.marginLeft =170;
    // hypeChart.autoMargins = true;
    // stockPanel.autoMargins = true;
    // stockPanel.autoMarginOffset = 20;
    // hypeChart.marginTop =170;
    // hypeChart.marginLeft =170;
    // stockPanel.marginLeft =170;
    // hypeChart.export = buildExportConfig(divid);
    hypeChart.write(divid);
    // alert(stockPanel.autoMargins);
}

function executeDivScripts(divScript) {
    var del = document.getElementById(divScript);
    var scripts = del.getElementsByTagName('script');
    for (var ix = 0; ix < scripts.length; ix++) {
        eval(scripts[ix].text);
    }
}

function displayDistributionChart(divid, chartData, symbolName, marketName, meanSymbol,
    meanMarket) {
    var otherColor = "#f44336";
    var otherTitle = "Market";
    if (divid.startsWith("Optimized")) {
        otherColor = "#0B610B";
        otherTitle = "Optimized";
    } else if (marketName != "") {
        otherTitle = marketName;
    }
    //alert(divid+" "+otherColor);
    densityChart = new AmCharts.AmSerialChart();
    // densityChart.pathToImages = "/images/charts/";
    densityChart.dataProvider = chartData;
    densityChart.categoryField = "value";
    setUpLineMargingsOn(densityChart, false);
    // AXES
    // Category
    var categoryAxis = densityChart.categoryAxis;
    decorateCategoryAxis(categoryAxis);
    categoryAxis.startOnAxis = true;
    categoryAxis.showLastLabel = false;
    categoryAxis.showFirstLabel = false;
    categoryAxis.equalSpacing = true;
    // Value
    var valueAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valueAxis);
    valueAxis.fillAlpha = 0.05;
    valueAxis.gridAlpha = 0.07;
    valueAxis.inside = true;
    // valueAxis.logarithmic = true;
    densityChart.addValueAxis(valueAxis);
    // GUIDES are vertical (can also be horizontal) lines (or areas) marking
    // some event.
    // first guide
    var guide1 = new AmCharts.Guide();
    guide1.category = meanMarket;
    guide1.lineColor = "red";
    guide1.lineThickness = 3;
    guide1.lineAlpha = 1;
    guide1.dashLength = 21;
    guide1.inside = false;
    guide1.labelRotation = 90;
    // guide1.label = "Market Average Return: " + meanMarket;
    categoryAxis.addGuide(guide1);
    // second guide
    var guide2 = new AmCharts.Guide();
    guide2.category = meanSymbol;
    guide2.lineColor = "#3B5998";
    guide2.lineThickness = 3;
    guide2.lineAlpha = 1;
    guide2.dashLength = 21;
    guide2.inside = false;
    guide2.labelRotation = 90;
    categoryAxis.logarithmic = true;
    // alert('a');
    // guide2.label = symbolName + " Average Return: " + meanSymbol;
    categoryAxis.addGuide(guide2);
    // GRAPHS
    // first graph
    var graph = new AmCharts.AmGraph();
    graph.type = "smoothedLine";
    graph.lineColor = "#3B5998";
    graph.title = symbolName;
    graph.valueField = "symbol";
    graph.lineAlpha = 0.8;
    graph.fillAlphas = 0.4; // setting fillAlphas to > 0 value makes it area
    // graph
    densityChart.addGraph(graph);
    // second graph
    graph = new AmCharts.AmGraph();
    graph.type = "smoothedLine";
    graph.title = otherTitle;
    graph.lineColor = otherColor;
    graph.valueField = "market";
    graph.lineAlpha = 0.7;
    graph.fillAlphas = 0.3;
    densityChart.addGraph(graph);
    // CURSOR
    var chartCursor = new AmCharts.ChartCursor();
    chartCursor.zoomable = false; // as the chart displayes not too many
    decorateCursor(chartCursor);
    densityChart.addChartCursor(chartCursor);
    decorateBalloon(densityChart.balloon);
    densityChart.columnSpacing = 0;
    densityChart.columnWidth = 1;
    // alert('a');
    addChartWaterMark(densityChart);
    setLegendForLineChart(densityChart);
    densityChart.legend.color = "#000000";
    // alert('b');
    densityChart.export = buildExportConfig(divid);
    densityChart.write(divid);
}

function displayDistributionChartWithPrice(divid, chartData, symbolName, meanPrice, currentPrice, targetPrice) {
    densityChart = new AmCharts.AmSerialChart();
    //alert("a");
   
    densityChart.dataProvider = chartData;
    //setUpLineMargings(densityChart);
    
    densityChart.autoMargins = false;
    densityChart.marginTop = 30;
    densityChart.marginLeft = 0;
    densityChart.marginBottom = -1;
    densityChart.marginRight = 0;
    
    
    densityChart.categoryField = "value";
    // AXES
    // Category
    var categoryAxis = densityChart.categoryAxis;
    decorateCategoryAxis(categoryAxis);
    categoryAxis.startOnAxis = false;
    categoryAxis.showLastLabel = false;
    categoryAxis.showFirstLabel = false;
    categoryAxis.position = "top";
    // Value
    var valueAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valueAxis);
    valueAxis.inside = true;
    valueAxis.position = "left";
    valueAxis.color = "#bbb";
    valueAxis.axisAlpha = 0;
    valueAxis.fillAlpha = 0.01;
    valueAxis.gridColor = "#aaa";
    valueAxis.fillColor = "#cccccc";
    valueAxis.gridAlpha = 0.10;
    valueAxis.startOnAxis = false;
    valueAxis.showLastLabel = false;
    valueAxis.showFirstLabel = false;
    densityChart.addValueAxis(valueAxis);
    if (currentPrice != targetPrice) {
        var guide2 = new AmCharts.Guide();
        guide2.category = currentPrice;
        guide2.lineColor = "#000000";
        guide2.lineThickness = 3;
        guide2.lineAlpha = 1;
        guide2.color = "gray";
        guide2.inside = true;
        guide2.labelRotation = 90;
        guide2.label = "Current Price";
        categoryAxis.addGuide(guide2);
    }
    var guide1 = new AmCharts.Guide();
    guide1.category = targetPrice;
    guide1.lineColor = "gray";
    guide1.lineThickness = 3;
    guide1.lineAlpha = 1;
    guide1.color = "#000000";
    guide1.inside = true;
    guide1.position = "top";
    guide1.labelRotation = 90;
    guide1.label = "Target";
    categoryAxis.addGuide(guide1);
    // second guide
    var guide0 = new AmCharts.Guide();
    guide0.category = meanPrice;
    guide0.lineColor = "#000000";
    guide0.lineThickness = 2;
    guide0.color = "#6E6E6E";
    guide0.lineAlpha = 1;
    guide0.dashLength = 7;
    guide0.inside = true;
    guide0.labelRotation = 90;
    guide0.label = symbolName + " Mean";
    categoryAxis.addGuide(guide0);
    // GRAPHS
    // first graph
    var graph = new AmCharts.AmGraph();
    graph.type = "column";
    // graph.lineColor = "#aaaaaa";
    graph.lineColorField = "color";
    graph.fillColorsField = "color";
    graph.title = symbolName;
    graph.valueField = "symbol";
    graph.lineThickness =1;
    graph.lineAlpha = 0.05;
    graph.fillAlphas = 0.2; // setting fillAlphas to > 0 value makes it area
    // graph
    densityChart.addGraph(graph);
    // alert(graph);
    // CURSOR
    var chartCursor = new AmCharts.ChartCursor();
    chartCursor.zoomable = false; // as the chart displayes not too many
    // values, we disabled zooming
    decorateCursor(chartCursor);
    densityChart.addChartCursor(chartCursor);
    decorateBalloon(densityChart.balloon);
    densityChart.columnSpacing = 0;
    densityChart.columnWidth = 1;
    // alert(chartData);
    // WRITE
    addChartWaterMark(densityChart);
    densityChart.export = buildExportConfig(divid);
    densityChart.write(divid);
}

function displayDistributionChartWithTails(divid, chartData, symbolName, meanSymbol, valAtR, upside) {
    densityChart = new AmCharts.AmSerialChart();
    // densityChart.pathToImages = "/images/charts/";
    densityChart.dataProvider = chartData;
    setUpLineMargingsOn(densityChart, false);
    densityChart.categoryField = "value";
    // AXES
    // Category
    var categoryAxis = densityChart.categoryAxis;
    decorateCategoryAxis(categoryAxis);
    categoryAxis.startOnAxis = true;
    // Value
    var valueAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valueAxis);
    valueAxis.inside = true;
    densityChart.addValueAxis(valueAxis);
    var guide1 = new AmCharts.Guide();
    guide1.category = valAtR;
    guide1.lineColor = "#f44336";
    guide1.lineThickness = 2;
    guide1.lineAlpha = 1;
    guide1.dashLength = 5;
    guide1.inside = true;
    guide1.labelRotation = 90;
    guide1.label = "VAR";
    guide1.color = "#000000";
    categoryAxis.addGuide(guide1);
    // second guide
    var guide0 = new AmCharts.Guide();
    guide0.category = upside;
    guide0.lineColor = "#3B5998";
    guide0.lineThickness = 2;
    guide0.color = "#000000";
    guide0.lineAlpha = 1;
    guide0.dashLength = 5;
    guide0.inside = true;
    guide0.labelRotation = 90;
    guide0.label = "Upside";
    categoryAxis.addGuide(guide0);
    // second guide
    var guide2 = new AmCharts.Guide();
    guide2.category = meanSymbol;
    guide2.lineColor = "#000000";
    guide2.lineThickness = 1;
    guide2.lineAlpha = 0.6;
    guide2.dashLength = 10;
    guide2.inside = true;
    guide2.labelRotation = 90;
    // guide2.label = symbolName + " Average Return: " + meanSymbol;
    categoryAxis.addGuide(guide2);
    // GRAPHS
    // first graph
    var graph = new AmCharts.AmGraph();
    graph.type = "smoothedLine";
    graph.lineColor = "#aaaaaa";
    graph.title = symbolName;
    graph.valueField = "symbol";
    graph.lineThickness = 2
    graph.lineAlpha = 0.4;
    graph.fillAlphas = 0.3; // setting fillAlphas to > 0 value makes it area
    // graph
    densityChart.addGraph(graph);
    // CURSOR
    var chartCursor = new AmCharts.ChartCursor();
    chartCursor.zoomable = false; // as the chart displayes not too many
    // values, we disabled zooming
    decorateCursor(chartCursor);
    densityChart.addChartCursor(chartCursor);
    decorateBalloon(densityChart.balloon);
    densityChart.columnSpacing = 0;
    densityChart.columnWidth = 1;
    // alert(chartData);
    // WRITE
    addChartWaterMark(densityChart);
    densityChart.export = buildExportConfig(divid);
    densityChart.write(divid);
}

function displayDistributionPriceChart(divid, chartData, symbolName, meanSymbol) {
    densityChart = new AmCharts.AmSerialChart();
    // densityChart.pathToImages = "/images/charts/";
    densityChart.dataProvider = chartData;
    // alert(chartData);
    setUpLineMargings(densityChart);
    densityChart.categoryField = "value";
    densityChart.numberFormatter = {
        decimalSeparator: ".",
        thousandsSeparator: ",",
        precision: 6
    };
    // AXES
    // Category
    var categoryAxis = densityChart.categoryAxis;
    decorateCategoryAxis(categoryAxis);
    categoryAxis.startOnAxis = false;
    categoryAxis.showLastLabel = false;
    categoryAxis.showFirstLabel = false;
    categoryAxis.equalSpacing = false;
    categoryAxis.labelFunction = formatCategoryLabels;
    // Value
    var valueAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valueAxis);
    valueAxis.inside = true;
    densityChart.addValueAxis(valueAxis);
    // second guide
    var guide2 = new AmCharts.Guide();
    guide2.category = meanSymbol;
    guide2.lineColor = "#000000";
    guide2.lineThickness = 3;
    guide2.lineAlpha = 1;
    guide2.dashLength = 0;
    guide2.color = "#000000";
    guide2.inside = true;
    guide2.labelRotation = 90;
    guide2.label = " Price after next news: " + meanSymbol;
    categoryAxis.addGuide(guide2);
    // GRAPHS
    // first graph
    var graph = new AmCharts.AmGraph();
    graph.type = "smoothedLine";
    graph.lineColor = "#FF0F00";
    graph.title = symbolName;
    graph.valueField = "symbol";
    graph.lineAlpha = .5;
    graph.lineThickness = 3;
    graph.fillAlphas = 0.5; // setting fillAlphas to > 0 value makes it area
    // graph
    densityChart.addGraph(graph);
    decorateBalloon(densityChart.balloon);
    // CURSOR
    var chartCursor = new AmCharts.ChartCursor();
    chartCursor.zoomable = false; // as the chart displayes not too many
    // values, we disabled zooming
    decorateCursor(chartCursor);
    densityChart.addChartCursor(chartCursor);
    densityChart.columnSpacing = 0;
    densityChart.columnWidth = 1;
    // chart.addLabel(0,50,"Macroaxis
    // Charts","center",20,"#dddddd",0,0.5,false,"http://www.macroaxis.com");
    // WRITE
    addChartWaterMark(densityChart);
    densityChart.export = buildExportConfig(divid);
    densityChart.write(divid);
}

function testSymbolTrendLineChart(chartDivId) {
    var firstDate = new Date();
    var chartData = [];
    firstDate.setHours(0, 0, 0, 0);
    firstDate.setDate(firstDate.getDate() - 100);
    for (var i = 0; i < 100; i++) {
        var newDate = new Date(firstDate);
        newDate.setDate(newDate.getDate() + i);
        var value = Math.round(Math.random() * (30) + 100);
        chartData[i] = ({
            date: newDate,
            value: value
        });
    }
    displaySymbolTrendLineChart(chartDivId, chartData);
}

function displaySymbolTrendLineChart(chartDivId, chartData, isRegression) {
    // alert(chartDivId);
    var xchart = new AmCharts.AmStockChart();
    // xchart.pathToImages = "/images/charts/";
    // alert(chartDivId);
    // DATASETS //////////////////////////////////////////
    var dataSet = new AmCharts.DataSet();
    dataSet.color = "#aaaaaa";
    dataSet.fieldMappings = [{
        fromField: "value",
        toField: "value"
    }];
    dataSet.dataProvider = chartData;
    dataSet.categoryField = "date";
    if (isRegression) {
        dataSet.color = "#008000";
        var dataSet2 = new AmCharts.DataSet();
        dataSet2.fieldMappings = [{
            fromField: "value2",
            toField: "value2"
        }];
        dataSet2.color = "#3B5998";
        dataSet2.dataProvider = chartData;
        dataSet2.compared = true;
        dataSet2.title = "Prediction Change";
        dataSet2.categoryField = "date";
        xchart.dataSets = [dataSet, dataSet2];
    } else {
        dataSet.color = "#3B5998";
        xchart.dataSets = [dataSet];
    }
    // alert(chart);
    // PANELS ///////////////////////////////////////////
    var stockPanel = new AmCharts.StockPanel();
    stockPanel.showCategoryAxis = true;
    stockPanel.panEventsEnabled = true;
    // stockPanel.title = " Value Change";
    stockPanel.eraseAll = false;
    // stockPanel.addLabel(0, 100, "Macroaxis", "center", 16);
    var graph = new AmCharts.StockGraph();
    var valueAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valueAxis);
    graph.valueField = "value";
    if (isRegression) {
        graph.bullet = "none";
        graph.lineColor = "#0B610B";
        // graph.fillColors = "#008000";
        graph.negativeLineColor = "#DF0101";
        // graph.negativeFillColors = "#DF0101";
        graph.fillAlphas = .2;
        graph.negativeFillAlphas = .2;
        graph.lineThickness = 1;
        graph.type = "smoothedLine";
    } else {
        graph.bullet = "none";
        graph.negativeLineColor = "#DF0101";
        graph.negativeFillColors = "#DF0101";
        graph.lineColor = "#2ECCFA";
        graph.fillColors = "#2ECCFA";
        graph.fillAlphas = .1;
        graph.negativeFillAlphas = .1;
        graph.lineThickness = 1;
        valueAxis.logarithmic = true; // this line makes axis logarithmic
        graph.type = "line";
    }
    stockPanel.addValueAxis(valueAxis);
    var categoryAxis = stockPanel.categoryAxis;
    decorateCategoryAxis(categoryAxis);
    // categoryAxis.inside = false;
    // categoryAxis.labelFrequency = 3;
    // categoryAxis.showFirstLabel=false;
    if (isRegression) {
        graph.comparable = true;
    }
    graph.compareField = "value2";
    graph.compareGraphLineThickness = 1;
    graph.compareGraphFillAlphas = 0;
    graph.compareGraphFillColors = "#f7f7f7";
    stockPanel.addStockGraph(graph);
    var stockLegend = new AmCharts.StockLegend();
    stockLegend.valueTextRegular = " ";
    stockLegend.markerType = "none";
    stockPanel.stockLegend = stockLegend;
    stockPanel.drawingIconsEnabled = true;
    stockPanel.iconSize = 24;
    decorateBalloon(xchart.balloon);
    xchart.panels = [stockPanel];
    var panelsSettings = new AmCharts.PanelsSettings();
    panelsSettings.panEventsEnabled = true;
    xchart.panelsSettings = panelsSettings;
    // OTHER SETTINGS ////////////////////////////////////
    var scrollbarSettings = new AmCharts.ChartScrollbarSettings();
    scrollbarSettings.graph = graph;
    decorateScrollBarChartSettings(scrollbarSettings);
    xchart.chartScrollbarSettings = scrollbarSettings;
    // var cursorSettings = new AmCharts.ChartCursorSettings();
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor);
    stockPanel.addChartCursor(chartCursor);
    // alert(chart);
    setUpLineMargings(stockPanel);
    // stockPanel.addLabel(0,1,"Macroaxis
    // Charts","center",12,"#aaaaaa",0,0.5,false,"http://www.macroaxis.com");
    addChartWaterMark(stockPanel);
    if (isRegression) {
        stockPanel.export = buildExportConfig(chartDivId);
    } else {
        stockPanel.autoMargins = true;
        // stockPanel.marginLeft = -1;
        // stockPanel.marginRight = -1;
        // stockPanel.marginTop =-1;
        // stockPanel.marginBottom =-1;
    }
    xchart.write(chartDivId);
    // alert(chart);
}

function displaySymbolTechnicalLineCharts(chartTrendDivId, chartFitDivId, chartData) {
    // displaySymbolTrendLineChart(chartTrendDivId,chartData,false);
    displaySymbolTrendLineChart(chartFitDivId, chartData, true);
    // setTimeout("dummy()",1000);
    displaySymbolTrendLineChart(chartTrendDivId, chartData, false);
}

function buildAdviceGuadge(guadgeDivId, cursorValue) {
    // alert(cursorValue);
    // Draw the gauge using custom settings (medium)
    var g = new JustGage({
        id: guadgeDivId,
        value: cursorValue,
        min: 0,
        max: 100,
        title: " ",
        gaugeWidthScale: 0.8,
        showMinMax: false,
        shadowSize: 10,
        showTitle: false,
        showValue: false,
        valueFontColor: "#eeeeee",
        gaugeColor: "#C7D3E8",
        levelColors: ["#3B5998"],
        showInnerShadow: false,
        label: ""
    });
}

function buildRebalanceGuadge(guadgeDivId, cursorValue) {
    // alert(cursorValue);
    // Draw the gauge using custom settings (medium)
    var gm_options = {
        value: 0,
        label: '',
        colorOfText: '#eeeeee',
        colorOfCenterCircleFill: '#3B5998',
        colorOfCenterCircleStroke: '#aaaaaa',
        colorOfPointerStroke: '#3B5998',
        colorOfPointerFill: '#3B5998',
        colorOfFill: ['#dddddd', '#dddddd', '#dddddd', '#eeeeee'],
        min: 0,
        max: 100,
        majorTicks: 2,
        minorTicks: -1, // small ticks inside each major tick
        greenFrom: 0,
        greenTo: 50,
        yellowFrom: 50,
        yellowTo: 90,
        redFrom: 90,
        redTo: 100
    };
    gm = new Gauge(document.getElementById(guadgeDivId), gm_options);
    gm.setValue(cursorValue);
}

function displayBoundaryChart(chartDivId, chartData, maxUp, maxDown) {
    scrollableDataProvider = chartData;
    scrollableChart = new AmCharts.AmSerialChart();
    scrollableChart.panEventsEnabled = false;
    scrollableChart.dataProvider = scrollableDataProvider;
    scrollableChart.categoryField = "date";
    scrollableChart.addListener("dataUpdated", zoomBoundaryChart);
    setUpLineMargings(scrollableChart);
    // scrollableChart.pathToImages = "/images/charts/";
    var categoryAxis = scrollableChart.categoryAxis;
    decorateCategoryAxis(categoryAxis)
    categoryAxis.inside = false;
    categoryAxis.labelFrequency = 3;
    categoryAxis.showFirstLabel = false;
    categoryAxis.autoGridCount = true;
    var valueAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valueAxis)
    var guide = new AmCharts.Guide();
    guide.value = 0;
    guide.lineAlpha = 0.1;
    valueAxis.addGuide(guide);
    scrollableChart.addValueAxis(valueAxis);
    // GUIDES are vertical (can also be horizontal) lines (or areas) marking
    // some event.
    // first guide
    var guide1 = new AmCharts.Guide();
    guide1.category = maxUp;
    guide1.lineColor = "#00FF00";
    guide1.lineAlpha = 1;
    guide1.balloonColor = "#00FF00"
    guide1.dashLength = 3;
    guide1.lineThickness = 2;
    guide1.fillColor = "#f44336";
    guide1.inside = true;
    guide1.labelRotation = 90;
    guide1.balloonText = "Largest Upper Band";
    guide1.label = "Largest Upper Band";
    categoryAxis.addGuide(guide1);
    // second guide
    var guide2 = new AmCharts.Guide();
    guide2.category = maxDown;
    guide2.lineColor = "#FF0000";
    guide2.lineAlpha = 1;
    guide2.balloonColor = "#FF0000"
    guide2.dashLength = 3;
    guide2.lineThickness = 2;
    guide2.inside = true;
    guide2.labelRotation = 90;
    guide2.balloonText = "Largest Lower Band";
    guide2.label = "Largest Lower Band";
    categoryAxis.addGuide(guide2);
    // GRAPHS
    // second graph
    graph = new AmCharts.AmGraph();
    graph.type = "smoothedLine";
    graph.title = "ups";
    graph.valueField = "ups";
    graph.lineThickness = 0;
    graph.lineColor = "#0080FF";
    graph.lineAlpha = 1;
    graph.fillColors = "#0080FF";
    graph.fillAlphas = .3;
    scrollableChart.addGraph(graph);
    // third graph
    graph = new AmCharts.AmGraph();
    graph.type = "smoothedLine";
    graph.title = "values";
    graph.valueField = "values";
    graph.lineThickness = 3;
    graph.lineColor = "#f44336";
    graph.lineAlpha = 1;
    graph.fillColors = "#FF0000";
    graph.fillAlphas = .5;
    scrollableChart.addGraph(graph);
    // third graph
    graph = new AmCharts.AmGraph();
    graph.type = "smoothedLine";
    graph.title = "downs";
    graph.valueField = "downs";
    graph.lineThickness = 0;
    graph.lineColor = "#FF0000";
    graph.lineAlpha = 1;
    graph.fillColors = "#ffffff";
    graph.fillAlphas = 1;
    scrollableChart.addGraph(graph);
    // CURSOR
    scrollableChartCursor = new AmCharts.ChartCursor();
    scrollableChartCursor.cursorPosition = "mouse";
    scrollableChartCursor.cursorColor = "#6E6E6E";
    scrollableChart.addChartCursor(scrollableChartCursor);
    // SCROLLBAR
    var chartScrollbar = new AmCharts.ChartScrollbar();
    chartScrollbar.graph = graph;
    decorateScrollBarChart(chartScrollbar);
    scrollableChart.addChartScrollbar(chartScrollbar);
    decorateBalloon(scrollableChart.balloon);
    scrollableChart.columnSpacing = 0;
    scrollableChart.columnWidth = 1;
    // alert(chartDivId);
    addChartWaterMark(scrollableChart);
    scrollableChart.write(chartDivId);
    // alert(chartData);
}

function drawGuage(divId, val, title, subtitle) {
    showScoreGauge(divId, val);
    // redraw_loop = setInterval(draw, 2000); //Draw a new chart every 2 seconds
}

function drawLineSparklineForDataProviderTiny(divId, dataProvider) {
    // alert(divId);
    var chart = new AmCharts.AmSerialChart();
    chart.panEventsEnabled = false;
    chart.dataProvider = dataProvider;
    chart.categoryField = "day";
    chart.autoMargins = false;
    chart.marginLeft = -1;
    chart.marginRight = 0;
    chart.marginTop = 3;
    chart.marginBottom = 3;
    chart.color = "#aaaaaa";
    // alert(chart);
    var graph = new AmCharts.AmGraph();
    graph.valueField = "value";
    graph.bulletField = "bullet";
    graph.bulletColorField = "bulletColor";
    graph.bulletSize = 6;
    graph.type = "smoothedLine";
    graph.showBalloon = true;
    graph.lineColor = "#3b5998";
    graph.fillAlphas = 0;
    // graph.fillColors = "#3B5998";
    graph.lineThickness = 2;
    graph.negativeLineColor = "#f44336";
    // graph.lineColorField = "bulletColor";
    // graph.alpha = 1;
    // graph.balloonText = "[[category]] : [[value]]";
    chart.addGraph(graph);
    var categoryAxis = chart.categoryAxis;
    decorateCategoryAxis(categoryAxis)
    categoryAxis.fillAlpha = 0;
    categoryAxis.gridAlpha = 0;
    var valueAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valueAxis)
    valueAxis.fillAlpha = 0;
    valueAxis.gridAlpha = 0;
    valueAxis.recalculateToPercents = true;
    chart.addValueAxis(valueAxis);
    decorateBalloon(chart.balloon);
    graph.lineAlpha = 0.7;
    chart.write(divId);
}

function drawColumnSparklineForDataProviderTiny(divId, dataProvider, useColors) {
    var chart = new AmCharts.AmSerialChart();
    chart.panEventsEnabled = false;
    chart.dataProvider = dataProvider;
    chart.categoryField = "day";
    // alert('a');
    chart.autoMargins = false;
    chart.marginLeft = 1;
    chart.marginRight = 1;
    chart.marginTop = 1;
    chart.marginBottom = 1;
    // chart.color="#3b5998";
    var graph = new AmCharts.AmGraph();
    graph.valueField = "value";
    graph.bulletField = "bullet";
    // graph.bulletColorField = "color";
    graph.bulletSize = 1;
    graph.type = "smoothedLine";
    graph.showBalloon = true;
    graph.fillAlphas = 0.3;
    graph.lineColor = "#008000";
    graph.negativeLineColor = "#f44336";
    graph.lineThickness = 1;
    graph.lineAlpha = 0.4;
    graph.balloonText = "[[category]] : [[value]]";
    chart.addGraph(graph);
    var categoryAxis = chart.categoryAxis;
    decorateCategoryAxis(categoryAxis);
    categoryAxis.gridAlpha = 0;
    categoryAxis.fillAlpha = 0.0;
    categoryAxis.gridColor = "#ffffff";
    var valueAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valueAxis);
    valueAxis.gridAlpha = 0.0;
    valueAxis.fillAlpha = 0.0;
    valueAxis.recalculateToPercents = true;
    decorateBalloon(chart.balloon);
    chart.balloon.color = "#000";
    chart.addValueAxis(valueAxis);
    chart.write(divId);
}

function drawColumnSparklineForDataProvider(divId, dataProvider, useColors) {
    var chart = new AmCharts.AmSerialChart();
    chart.panEventsEnabled = false;
    chart.dataProvider = dataProvider;
    chart.categoryField = "day";
    setUpLineMargingsOn(chart, false);
    // chart.color="#aaaaaa";
    // chart.dataDateFormat="YYYY-MM-DD";
    var graph = new AmCharts.AmGraph();
    // alert(dataProvider);
    graph.valueField = "value";
    graph.colorField = "color";
    graph.lineColorField = "color";
    graph.type = "column";
    graph.labelText = "[[value]]";
    graph.labelPosition = "middle";
    graph.labelColorField = "labelColor";
    graph.fontSize = 8;
    graph.showAllValueLabels = true;
    graph.fillAlphas = .2;
    graph.showBalloon = true;
    // graph.negativeLineColor = "#f44336";
    // graph.negativeFillColor = "#f44336";
    // graph.fillAlphas = 0.3;
    chart.addGraph(graph);
    var valueAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valueAxis);
    chart.addValueAxis(valueAxis);
    var categoryAxis = chart.categoryAxis;
    decorateCategoryAxis(categoryAxis);
    categoryAxis.parseDates = true;
    // categoryAxis.minPeriod = "DD";
    categoryAxis.equalSpacing = true;
    // categoryAxis.axisColor = "#ffffff";
    // we want custom date formatting, so we change it in next line
    categoryAxis.dateFormats = [{
        period: 'DD',
        format: 'EEE'
    }];
    decorateBalloon(chart.balloon);
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor);
    chart.addChartCursor(chartCursor);
    chart.write(divId);
}

function drawLineSparklineForDataProvider(divId, dataProvider, useColors) {
    var chart = new AmCharts.AmSerialChart();
    chart.panEventsEnabled = false;
    chart.dataProvider = dataProvider;
    chart.categoryField = "day";
    chart.autoMargins = false;
    chart.marginLeft = -11;
    chart.marginRight = -1;
    chart.marginTop = 0;
    chart.marginBottom = -1;
    chart.color = "#aaaaaa";
    var graph = new AmCharts.AmGraph();
    graph.valueField = "value";
    graph.bulletField = "bullet";
    graph.bulletSizeField = "bulletSize";
    graph.type = "smoothedLine";
    graph.showBalloon = true;
    graph.fillAlphas = 0.1;
    graph.lineColor = "#aaaaaa";
    graph.lineThickness = 1;
    if (useColors) {
        graph.negativeLineColor = "#f44336";
    }
    chart.addGraph(graph);
    var categoryAxis = chart.categoryAxis;
    decorateCategoryAxis(categoryAxis);
    categoryAxis.inside = true;
    categoryAxis.showFirstLabel = false;
    categoryAxis.showLastLabel = false;
    categoryAxis.minPeriod = "DD"; // our data is daily, so we set minPeriod to
    // DD
    categoryAxis.gridAlpha = 0;
    categoryAxis.minorGridEnabled = false;
    categoryAxis.parseDates = true;
    var valueAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valueAxis);
    valueAxis.fillAlpha = 0;
    valueAxis.gridColor = "#aaaaaa";
    valueAxis.fillColor = "#cccccc";
    valueAxis.recalculateToPercents = false;
    chart.addValueAxis(valueAxis);
    if (useColors) {
        // using guide to show 0 grid
        var guide = new AmCharts.Guide();
        guide.value = 0;
        guide.lineAlpha = 0.1;
        valueAxis.addGuide(guide);
    }
    chart.write(divId);
}

function drawColumnSparklineFromHiddenStrings(symbol) {
    // alert(symbol);
    var values = document.getElementById("latestPricesValues" + symbol);
    var days = document.getElementById("latestPricesDates" + symbol);
    // alert(days.value.split(","));
    if (values == null || days == null) {
        return;
    }
    var dataProvider = makeSparklineChartData(values.value.split(","), days.value.split(","));
    // alert(dataProvider);
    drawColumnSparklineForDataProvider("latestPrices" + symbol, dataProvider, true);
}

function drawColumnSparklineFromStrings(divId, values, days, useColors) {
    var dataProvider = makeSparklineChartData(values.split(","), days.split(","));
    drawColumnSparklineForDataProvider(divId, dataProvider, useColors);
}

function drawColumnSparklineFromHiddenStringsTiny() {
    var symbols = document.getElementById("symbols");
    // alert(symbols);
    if (symbols) {
        var symbolsValues = symbols.value.split(",")
        var size = symbolsValues.length;
        for (var i = 0; i < size; i++) {
            var s = symbolsValues[i];
            var values = document.getElementById("latestPricesValues" + s);
            var days = document.getElementById("latestPricesDates" + s);
            if (values == null || days == null) {
                continue;
            }
            var dataProvider = makeSparklineChartDataTiny(values.value.split(","), days.value.split(","));
            // alert(dataProvider);
            drawColumnSparklineForDataProviderTiny("latestPricesColumns" + s, dataProvider, true);
        }
    }
}

function drawLineSparklineFromHiddenStringsTiny() {
    var symbols = document.getElementById("symbols");
    // alert(symbols);
    if (symbols) {
        var symbolsValues = symbols.value.split(",")
        var size = symbolsValues.length;
        for (var i = 0; i < size; i++) {
            var s = symbolsValues[i];
            var values = document.getElementById("latestPricesValues" + s);
            var days = document.getElementById("latestPricesDates" + s);
            if (values == null || days == null) {
                continue;
            }
            var dataProvider = makeSparklineChartDataTiny(values.value.split(","), days.value.split(","));
            // alert(dataProvider);
            drawLineSparklineForDataProviderTiny("latestPricesColumns" + s, dataProvider);
        }
    }
}

function drawColumnSparklineFromStringsTiny(divId, values, days, useColors) {
    var dataProvider = makeSparklineChartDataTiny(values.split(","), days.split(","));
    drawColumnSparklineForDataProviderTiny(divId, dataProvider, useColors);
}

function drawLineSparklineFromHiddenStrings(symbol) {
    var values = document.getElementById("latestPricesValues" + symbol);
    var days = document.getElementById("latestPricesDates" + symbol);
    if (values == null || days == null) {
        return;
    }
    var dataProvider = makeSparklineChartData(values.value.split(","), days.value.split(","));
    drawLineSparklineForDataProvider("latestPrices" + symbol, dataProvider, true);
}

function drawLineSparklineFromStrings(divId, values, days, useColors) {
    var dataProvider = makeSparklineChartData(values.split(","), days.split(","));
    drawLineSparklineForDataProvider(divId, dataProvider, useColors);
}

function makeSparklineChartData(values, days) {
    var chartData = [];
    var size = values.length;
    for (var i = 0; i < size; i++) {
        var v = values[i];
        var d = days[i];
        var colBar = "#3B5998";
        var colLabel = "#ffffff";
        if (i == (size - 1)) {
            var prevV = values[i - 1];
            var delta = v - prevV;
            if (delta > 0) {
                colBar = "#3EA055";
                colLabel = "#ffffff";
            } else if (delta < 0) {
                colBar = "#DF0101";
                colLabel = "#ffffff";
            }
            chartData.push({
                day: d,
                value: v,
                color: colBar,
                labelColor: colLabel,
                bullet: "round"
            });
        } else {
            chartData.push({
                day: d,
                color: colBar,
                labelColor: "#ffffff",
                value: v
            });
        }
    }
    return chartData;
}

function makeSparklineChartDataTiny(values, days) {
    var chartData = [];
    var size = values.length;
    // alert(values);
    for (var i = 0; i < size; i++) {
        var v = values[i];
        var d = days[i];
        var colBar = "#3b5998";
        if (i == (size - 1)) {
            var prevV = values[i - 1];
            var delta = v - prevV;
            // alert(delta);
            if (delta > 0) {
                colBar = "green";
            } else if (delta < 0) {
                colBar = "red";
            } else {
                colBar = "#aaaaaa";
            }
            // alert(delta+": "+colBar);
            chartData.push({
                day: d,
                value: v,
                bulletColor: colBar,
                bullet: "round"
            });
        } else if (i == 0) {
            chartData.push({
                day: d,
                bulletColor: "#aaaaaa",
                bullet: "round",
                value: v
            });
        } else {
            chartData.push({
                day: d,
                bulletColor: "#3b5998",
                value: v
            });
        }
    }
    return chartData;
}

function drawLineSparklineForDataForcastProvider(divId, dataProvider, title) {
    scrollableChart = new AmCharts.AmSerialChart();
    scrollableChart.panEventsEnabled = false;
    scrollableDataProvider = dataProvider;
    scrollableChart.dataProvider = scrollableDataProvider;
    scrollableChart.categoryField = "day";
    scrollableChart.addListener("dataUpdated", zoomChart);
    setUpLineMargings(scrollableChart);
    // scrollableChart.pathToImages = "/images/charts/";
    var categoryAxis = scrollableChart.categoryAxis;
    decorateCategoryAxis(categoryAxis);
    categoryAxis.minPeriod = "DD"; // our data is daily, so we set
    // minPeriod to DD
    categoryAxis.minorGridEnabled = false;
    categoryAxis.color = "#aaaaaa";
    var graph = new AmCharts.AmGraph();
    graph.valueField = "value";
    graph.title = title;
    graph.bulletField = "bullet";
    graph.bulletSizeField = "bulletSize";
    graph.bulletColorField = "bulletColor";
    graph.bulletBorderAlpha = 1;
    graph.type = "line";
    graph.showBalloon = true;
    graph.fillAlphas = .7;
    graph.lineColor = "#3B5998";
    graph.lineThickness = 3;
    graph.dashLengthField = "dashLengthColumn";
    graph.alphaField = "alpha";
    graph.balloonText = "<span style='font-size:13px;'>[[category]]:<b>[[value]]</b> [[additional]]</span>";
    graph.negativeLineColor = "#f44336";
    graph.hideBulletsCount = 20;
    var graphForcast = new AmCharts.AmGraph();
    graphForcast.valueField = "forcast";
    graphForcast.title = title + " forecast";
    graphForcast.bulletField = "bullet";
    graphForcast.bulletSizeField = "bulletSize";
    graphForcast.colorField = "bulletColor";
    graphForcast.bulletBorderAlpha = 1;
    graphForcast.type = "line";
    graphForcast.showBalloon = true;
    graphForcast.fillAlphas = .4;
    graphForcast.lineColor = "#e62e00";
    graphForcast.lineThickness = 3;
    graphForcast.alphaField = "alpha";
    graphForcast.balloonText = "<span style='font-size:13px;'>[[category]]:<b>[[value]]</b> [[additional]]</span>";
    scrollableChart.addGraph(graph);
    scrollableChart.addGraph(graphForcast);
    // CURSOR
    scrollableChartCursor = new AmCharts.ChartCursor();
    scrollableChartCursor.cursorPosition = "mouse";
    scrollableChartCursor.cursorColor = "#6E6E6E";
    scrollableChart.addChartCursor(scrollableChartCursor);
    // SCROLLBAR
    var chartScrollbar = new AmCharts.ChartScrollbar();
    chartScrollbar.graph = graph;
    decorateScrollBarChart(chartScrollbar);
    chartScrollbar.color = "#aaaaaa";
    chartScrollbar.scrollbarHeight = 20;
    // chartScrollbar.position="bottom";
    // chartScrollbar.gridCount=5;
    scrollableChart.addChartScrollbar(chartScrollbar);
    var valueAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valueAxis);
    scrollableChart.addValueAxis(valueAxis);
    var guide = new AmCharts.Guide();
    guide.value = 0;
    guide.lineAlpha = 0.1;
    valueAxis.addGuide(guide);
    var legend = new AmCharts.AmLegend();
    legend.bulletType = "round";
    legend.equalWidths = false;
    legend.markerBorderColor = "#aaaaaa";
    legend.markerBorderThickness = 0;
    legend.markerSize = 14;
    // legend.borderAlpha = 1;
    legend.textClickEnabled = true;
    legend.useGraphSettings = false;
    legend.color = "#000000";
    legend.autoMargins = false;
    legend.marginLeft = 13;
    scrollableChart.addLegend(legend);
    decorateBalloon(scrollableChart.balloon);
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor);
    scrollableChart.autoGridCount = false;
    scrollableChart.color = "#aaaaaa";
    scrollableChart.addChartCursor(chartCursor);
    addChartWaterMark(scrollableChart);
    scrollableChart.export = buildExportConfig(divId);
    scrollableChart.write(divId);
}

function drawLineSparklineForcastFromStrings(divId, values, forcasts, days, title) {
    var dataProviderValues = makeSparklineChartForcastData(values.split(","), forcasts.split(","), days.split(","));
    drawLineSparklineForDataForcastProvider(divId, dataProviderValues, title);
}

function makeSparklineChartForcastData(values, forcast, days) {
    var chartData = [];
    var size = days.length;
    var dif = forcast.length - values.length;
    for (var i = 0; i < size; i++) {
        var f = forcast[i];
        if (i < values.length) {
            var v = values[i];
        }
        var d = days[i];
        if (i == values.length) {
            chartData.push({
                day: d,
                forcast: f,
                bullet: "round",
                bulletColor: "#3B5998",
                alpha: .7,
                dashLengthColumn: 3,
                additional: "(Projected)",
                bulletSize: 16
            });
        } else if (i > (size - dif)) {
            chartData.push({
                day: d,
                forcast: f,
                bullet: "round",
                bulletColor: "#6E6E6E",
                alpha: .2,
                dashLengthColumn: 3,
                additional: "(Projection)",
                bulletSize: 10
            });
        } else {
            chartData.push({
                day: d,
                value: v,
                forcast: f,
                alpha: 0.6,
                bullet: "round",
                bulletSize: 1
            });
        }
    }
    return chartData;
}

function increementNumber(divId) {
    // alert(divId);
    var $counter = $('#' + divId);
    // alert($counter.text());
    if (!$counter) {
        return;
    }
    $counter.css("visibility", "visible");
    var startVal = $counter.text(),
        currentVal = startVal * 0.95,
        endVal = startVal,
        increm = (endVal - currentVal) / 45;
    if (currentVal < 0.1) {
        return;
    }
    // alert(startVal);
    if (endVal > 0.01) {
        var i = setInterval((function() {
            if (currentVal >= endVal) {
                clearInterval(i);
                $counter.text(endVal);
                $counter.animate(40);
            } else {
                currentVal += increm;
                $counter.text(roundToTwo(currentVal)).animate(40);
            }
        }), 50);
    }
}
// this method is called when chart is first inited as we listen for
// "dataUpdated" event
function zoomBoundaryChart() {
    // setPanSelect() ;
    // alert(scrollableChart);
    // different zoom methods can be used - zoomToIndexes, zoomToDates,
    // zoomToCategoryValues
    scrollableChart.zoomToIndexes(scrollableDataProvider.length - 20, scrollableDataProvider.length - 1);
}
// this method is called when chart is first inited as we listen for
// "dataUpdated" event
function zoomChart() {
    // setPanSelect() ;
    // alert(scrollableChart);
    // different zoom methods can be used - zoomToIndexes, zoomToDates,
    // zoomToCategoryValues
    scrollableChart.zoomToIndexes(scrollableDataProvider.length - 40, scrollableDataProvider.length - 1);
}
// changes cursor mode from pan to select
function setPanSelect() {
    // alert("rb1");
    if (document.getElementById("rb1").checked) {
        scrollableChartCursor.pan = false;
        scrollableChartCursor.zoomable = true;
    } else {
        scrollableChartCursor.pan = true;
    }
    scrollableChart.validateNow();
}

function formatGenericLabels(craphDataItem) {
    // if(valueText) {
    // if (valueText > 100) {
    // valueText = roundNumber(valueText,0);
    // } else if (valueText > 10) {
    // valueText = roundNumber(valueText,2);
    // }
    // } else {
    // valueText = "0";
    // }
    // .alert(craphDataItem.dataContext.labelText);
    return craphDataItem.dataContext.labelText; // craphDataItem.dataContext.labelText;
}

function buildExportConfig(chartDiv) {
    var menuDiv = chartDiv + "Menu";
    var ch = document.getElementById(chartDiv);
    var mch = document.getElementById(menuDiv);
    if (ch && mch) {
        return {
            enabled: false
        }
    } else {
        return {
            enabled: false
        }
    }
}

function exportSymbolAndIndexNewsChart(f, name) {
    symbolAndIndexNewsChart.AmExport.output({
        format: f,
        fileName: name
    });
}

function exportForcastChart(f, name) {
    scrollableChart.AmExport.output({
        format: f,
        fileName: name
    });
}

function exportPerformanceChart(f, name) {
    performanceChart.AmExport.output({
        format: f,
        fileName: name
    });
}

function exportDensityChart(f, name) {
    densityChart.AmExport.output({
        format: f,
        fileName: name
    });
}

function setLegendForPieChart(chartForLegend) {
    var legend = new AmCharts.AmLegend();
    legend.equalWidths = false;
    legend.markerBorderThickness = 1;
    legend.markerType = "round";
    legend.markerBorderColor = "#aaaaaa";
    legend.markerBorderThickness = 0;
    legend.markerSize = 26;
    legend.labelText = "[[title]]";
    legend.valueText = "";
    // legend.borderAlpha = 1;
    legend.textClickEnabled = true;
    legend.useGraphSettings = false;
    // legend.marginLeft=3;
    // legend.marginTop=-10;
    legend.position = "bottom";
    legend.align = "center";
    // legend.autoMargins = false;
    legend.color = "#aaaaaa";
    chartForLegend.addLegend(legend);
}

function setLegendForLineChart(chartForLegend) {
    var legend = new AmCharts.AmLegend();
    legend.bulletType = "line";
    legend.equalWidths = false;
    legend.markerBorderThickness = 1;
    legend.markerType = "line";
    legend.markerBorderColor = "#6E6E6E";
    legend.markerBorderThickness = 5;
    legend.markerSize = 34;
    legend.borderAlpha = 0;
    legend.textClickEnabled = true;
    legend.useGraphSettings = false;
    // legend.marginLeft=16;
    // legend.autoMargins = false;
    legend.color = "#aaaaaa";
    chartForLegend.addLegend(legend);
    return legend;
}

function setLegendForBubbleChart(chartForLegend) {
    var legend = new AmCharts.AmLegend();
    legend.labelText = "[[title]]";
    legend.color = "#aaaaaa";
    legend.textClickEnabled = true;
    legend.useGraphSettings = false;
    legend.textClickEnabled = true;
    legend.markerType = "circle";
    legend.markerBorderThickness = 0;
    legend.markerSize = 25;
    // legend.marginLeft=16;
    // legend.autoMargins = false;
    chartForLegend.addLegend(legend);
}

function decorateCursor(chartCursor, hideValueLine) {
    chartCursor.fullWidth = false;
    chartCursor.zoomable = false;
    chartCursor.categoryBalloonsEnabled = true;
    chartCursor.categoryBalloonEnabled = true;
    chartCursor.categoryLineBalloonEnabled = true;
    chartCursor.cursorAlpha = "0.3";
    chartCursor.valueLineAlpha = "0.4";
    if (!hideValueLine) {
        chartCursor.valueLineEnabled = true;
        chartCursor.valueLineBalloonEnabled = true;
    }
    chartCursor.valueBalloonsEnabled = true;
}

function drawBulletsFromHiddenStrings() {
    var allocationsE = document.getElementById("allocations");
    // alert(allocationsE);
    if (allocationsE) {
        var allocations = allocationsE.value.split(",")
        // alert(allocations);
        var size = allocations.length;
        for (var i = 0; i < size; i++) {
            var alloc = allocations[i];
            var allocAr = alloc.split("=");
            var s = allocAr[0];
            var v = allocAr[1];
            if (s == null || v == null) {
                continue;
            }
            // alert(dataProvider);
            drawBullet(s, v);
        }
    }
}

function drawBullet(divId, value) {
    var chart = AmCharts.makeChart("symbolWeightBar" + divId, {
        "type": "serial",
        "rotate": true,
        "theme": "none",
        "color": "#3B5998",
        "autoMargins": false,
        "marginTop": -2,
        "marginLeft": 0,
        "marginBottom": -2,
        "marginRight": 70,
        "dataProvider": [{
            "category": value + "%",
            "under": 3,
            "adequate": 5,
            "acceptable": 7,
            "sufficient": 5,
            "bad": 30,
            "veryBad": 50,
            "full": 100,
            "bullet": value
        }],
        "valueAxes": [{
            "maximum": 100,
            "color": "#3B5998",
            "stackType": "regular",
            "gridAlpha": 0
        }],
        "startDuration": 0,
        "graphs": [{
            "columnWidth": 1,
            "lineColor": "#aaaaaa",
            "lineThickness": 1,
            "noStepRisers": true,
            "logarithmic": true,
            "stackable": false,
            "type": "step",
            "valueField": "limit"
        }, {
            "fillAlphas": 0.7,
            "lineAlpha": 0.1,
            "lineColor": "#f44336",
            "showBalloon": true,
            "logarithmic": true,
            "type": "column",
            "balloonText": "Under Allocation",
            "valueField": "under"
        }, {
            "fillAlphas": 0.01,
            "lineAlpha": 0,
            "lineColor": "#0B610B",
            "showBalloon": true,
            "type": "column",
            "logarithmic": true,
            "balloonText": "Adequate Allocation",
            "valueField": "adequate"
        }, {
            "fillAlphas": 0.7,
            "lineAlpha": 0.1,
            "lineColor": "#0B610B",
            "showBalloon": true,
            "type": "column",
            "logarithmic": true,
            "balloonText": "Acceptable Allocation",
            "valueField": "acceptable"
        }, {
            "fillAlphas": 0.01,
            "lineAlpha": 0,
            "lineColor": "#0B610B",
            "showBalloon": true,
            "logarithmic": true,
            "type": "column",
            "balloonText": "Sufficient Allocation",
            "valueField": "sufficient"
        }, {
            "fillAlphas": 0.04,
            "lineAlpha": 0.05,
            "lineColor": "#f44336",
            "showBalloon": true,
            "type": "column",
            "logarithmic": true,
            "balloonText": "Over Allocation",
            "valueField": "bad"
        }, {
            "fillAlphas": 0.08,
            "lineAlpha": 0.05,
            "lineColor": "#f44336",
            "showBalloon": true,
            "type": "column",
            "logarithmic": true,
            "balloonText": "Dangerous Allocation",
            "valueField": "veryBad"
        }, {
            "clustered": false,
            "columnWidth": 0.4,
            "fillAlphas": 0.4,
            "logarithmic": true,
            "lineColor": "#3B5998",
            "balloonText": divId + ": " + value + "%",
            "stackable": false,
            "type": "column",
            "valueField": "bullet"
        }],
        "columnWidth": 1,
        "categoryField": "category",
        "categoryAxis": {
            "color": "#3B5998",
            "gridAlpha": 0,
            "position": "right"
        }
    });
}

function drawPerformanceBullet() {
    var valueE = document.getElementById("performanceValue");
    if (!valueE) {
        return;
    }
    var divId = "symbolPerformanceBar";
    showPerformanceGauge(divId, valueE.value);
}

function drawDistressBullet() {
    var valueE = document.getElementById("distressValue");
    if (!valueE) {
        return;
    }
    var divId = "symbolDistressBar";
    showDistressGauge(divId, valueE.value);
}

function formatCategoryLabels(valueText, serialDataItem, categoryAxis) {
    // alert(valueText);
    // if (valueText) {
    // if (valueText.length > 25)
    // return valueText.substring(0, 25) + '...';
    // else
    // return valueText;
    // } else {
    // return valueText;
    // }
    return valueText;
}

function setUpLineMargingsOn(chart, labelsUp) {
    // alert('a');
    // chart.panEventsEnabled = false;
    chart.autoMargins = false;
    chart.marginTop = 10;
    chart.marginLeft = 0;
    chart.marginBottom = 0;
    chart.marginRight = 0;
    if (labelsUp == true) {
        chart.marginTop = 30;
    } else if (labelsUp == false) {
        chart.marginBottom = 30;
    }
    // chart.marginLeft = 0;
    // chart.marginBottom = 30;
    // chart.marginRight = 100;
}

function setUpLineMargings(chart) {
    // alert('a');
    // chart.panEventsEnabled = false;
    chart.autoMargins = true;
    // chart.marginTop = 0;
    // chart.marginLeft = 0;
    // chart.marginBottom = 30;
    // chart.marginRight = 100;
}

function setUpFunnelMargings(chart, groupPercentage) {
    chart.pullOutRadius = 0;
    chart.outlineColor = "#3B5998";
    chart.outlineThickness = 0;
    chart.groupPercent = groupPercentage;
    chart.outlineAlpha = 0.8;
    chart.color = "#0B3861";
    if (groupPercentage <= 2) {
        chart.outlineThickness = 0;
    }
    chart.funnelAlpha = 0.6;
    chart.alpha = 0.6;
}

function setUpPieMargings(chart) {
    chart.autoMargins = false;
    chart.marginTop = 15;
    chart.marginBottom = 15;
    chart.marginLeft = 15;
    chart.marginRight = 15;
    chart.pullOutRadius = 0;
    chart.outlineColor = "#3B5998";
    chart.outlineThickness = 1;
    chart.outlineAlpha = 1;
}

function numberWithCommas(x) {
    var parts = x.toString().split(".");
    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return parts.join(".");
}

function isSuggestionResults() {
    var rBlock = document.getElementById("suggestionResults");
    return rBlock;
}

function decorateScrollBarChartSettings(chartScrollbarSetting) {
    chartScrollbarSetting.graphLineColor = "#c2c2c2";
    chartScrollbarSetting.updateOnReleaseOnly = true;
    chartScrollbarSetting.selectedBackgroundColor = "#cccccc",
        chartScrollbarSetting.selectedGraphLineColor = "#888888";
    chartScrollbarSetting.selectedGraphLineAlpha = 1;
    chartScrollbarSetting.selectedGraphFillAlpha = 0;
    chartScrollbarSetting.scrollbarHeight = 120;
    chartScrollbarSetting.graphFillAlpha = 0;
    chartScrollbarSetting.gridCount = 5;
    chartScrollbarSetting.backgroundAlpha = 0;
    chartScrollbarSetting.gridAlpha = 0;
    chartScrollbarSetting.graphLineAlpha = 0.2;
    chartScrollbarSetting.color = "#888888";
    chartScrollbarSetting.autoGridCount = false;
}

function decorateScrollBarChart(chartScrollbar) {
    chartScrollbar.graphLineColor = "#c2c2c2";
    chartScrollbar.updateOnReleaseOnly = true;
    chartScrollbar.selectedBackgroundColor = "#cccccc",
        chartScrollbar.selectedGraphLineColor = "#888888";
    chartScrollbar.selectedGraphLineAlpha = 1;
    chartScrollbar.selectedGraphFillAlpha = 0;
    chartScrollbar.scrollbarHeight = 120;
    chartScrollbar.graphFillAlpha = 0;
    chartScrollbar.gridCount = 5;
    chartScrollbar.backgroundAlpha = 0;
    chartScrollbar.gridAlpha = 0;
    chartScrollbar.graphLineAlpha = 0.2;
    chartScrollbar.color = "#888888";
    chartScrollbar.autoGridCount = false;
}

function showPerformanceGauge(divId, value, isBig) {
    var text = value;
    bottomTextYOffset = -70;
    var fontSize = 26;
    if (!isBig) {
        fontSize = 14;
        bottomTextYOffset = -30;
    }
    var gaugeChart = AmCharts.makeChart(divId, {
        "type": "gauge",
        "theme": "light",
        "fontSize": fontSize,
        "fontWeight": 50,
        "color": "#3B5998",
        "axes": [{
            "axisThickness": 0,
            "axisAlpha": 0.8,
            "tickAlpha": 0,
            "valueInterval": 20,
            "labelsEnabled": false,
            "startAngle": -90,
            "endAngle": 90,
            "bands": [{
                "color": "#cc4748",
                "endValue": 12,
                "labelsEnabled": false,
                "innerRadius": "90%",
                "startValue": 0
            }, {
                "color": "#cccccc",
                "endValue": 50,
                "labelsEnabled": false,
                "innerRadius": "90%",
                "startValue": 12
            }, {
                "color": "#84b761",
                "endValue": 100,
                "labelsEnabled": false,
                "innerRadius": "90%",
                "startValue": 50
            }],
            "bottomText": text,
            "bottomTextYOffset": bottomTextYOffset,
            "endValue": 100
        }],
        "arrows": [{
            "value": value,
            "color": "#3B5998",
            "innerRadius": "50%",
            "nailRadius": 0,
            "radius": "100%"
        }]
    });
}

function showDistressGauge(divId, value, isBig) {
    var text = value + "%";
    bottomTextYOffset = -60;
    var fontSize = 26;
    if (!isBig) {
        fontSize = 14;
        bottomTextYOffset = -30;
        text = value;
    }
    var gaugeChart = AmCharts.makeChart(divId, {
        "type": "gauge",
        "theme": "light",
        "fontSize": fontSize,
        "fontWeight": 100,
        "color": "#3B5998",
        "axes": [{
            "axisThickness": 0,
            "axisAlpha": 0.8,
            "tickAlpha": 0,
            "valueInterval": 20,
            "labelsEnabled": false,
            "startAngle": -90,
            "endAngle": 90,
            "bands": [{
                "color": "#84b761",
                "endValue": 12,
                "labelsEnabled": false,
                "innerRadius": "90%",
                "startValue": 0
            }, {
                "color": "#cccccc",
                "endValue": 50,
                "labelsEnabled": false,
                "innerRadius": "90%",
                "startValue": 12
            }, {
                "color": "#cc4748",
                "endValue": 100,
                "labelsEnabled": false,
                "innerRadius": "90%",
                "startValue": 50
            }],
            "bottomText": text,
            "bottomTextYOffset": bottomTextYOffset,
            "endValue": 100
        }],
        "arrows": [{
            "value": value,
            "color": "#3B5998",
            "innerRadius": "50%",
            "nailRadius": 0,
            "radius": "100%"
        }]
    });
}

function showScoreGauge(divId, value) {
    var gaugeChart = AmCharts.makeChart(divId, {
        "type": "gauge",
        "theme": "light",
        "axes": [{
            "axisThickness": 0,
            "axisAlpha": 0.2,
            "tickAlpha": 0.2,
            "valueInterval": 20,
            "labelsEnabled": false,
            "bands": [{
                "color": "#cc4748",
                "endValue": 8,
                "labelsEnabled": false,
                "innerRadius": "85%",
                "startValue": 0
            }, {
                "color": "#cccccc",
                "endValue": 25,
                "labelsEnabled": false,
                "innerRadius": "85%",
                "startValue": 8
            }, {
                "color": "#84b761",
                "endValue": 100,
                "labelsEnabled": false,
                "innerRadius": "85%",
                "startValue": 25
            }],
            "bottomText": "",
            "bottomTextYOffset": -20,
            "endValue": 100
        }],
        "arrows": [{
            "value": value,
            "color": "#3B5998"
        }]
    });
}

function updateFilters() {
    // alert('a');
    $('#focusCombo').on('change', (function() {
        var selected = $(this).find("option:selected").val();
        firePortfolioFocus(selected);
    }));
    $("#themeDropDown li a").click((function() {
        var selText = $(this).text();
        // alert( $("#theme1DropDown"));
        var v = $(this).attr('title');
        $("#theme").val(v);
        $("#themeComboButton").html(selText);
        var url = "/invest/positionOpportunities/" + v.replace(" ", "-");
        openPage(url);
    }));
    $("#themeOptimizeDropDown li a").click((function() {
        var selText = $(this).text();
        // alert(selText);
        var v = $(this).attr('title');
        $("#themeOptimize").val(v);
        $("#themeOptimizeComboButton").html(selText);
    }));
    $("#themePortfolioDropDown li a").click((function() {
        var selText = $(this).text();
        // alert( $("#theme1DropDown"));
        var v = $(this).attr('title');
        $("#themePortfolio").val(v);
        $("#themePortfolioComboButton").html(selText);
        var url = "/invest/portfolioTheme/" + v.replace(" ", "-");
        openPage(url);
    }));
    $("#themeRatingsDropDown li a").click((function() {
        var selText = $(this).text();
        // alert( $("#theme1DropDown"));
        var v = $(this).attr('title');
        $("#themeRatings").val(v);
        $("#themeRatingsComboButton").html(selText);
        var url = "/invest/themeRatings/" + v.replace(" ", "-");
        openPage(url);
    }));
    $("#maxModelPositionsDropDown li a").click((function() {
        var selText = $(this).text();
        // alert( $("#theme1DropDown"));
        var v = $(this).attr('title');
        $("#maxModelPositions").val(v);
        $("#maxModelPositionsComboButton").html(selText);
    }));
    $("#optInMAType_inputDropDown li a").click((function() {
        var selText = $(this).text();
        // alert(selText);
        // alert( $("#theme1Button"));
        var t = $(this).attr('title');
        // alert(t);
        var vars = t.split(":")
        var v = vars[1];
        var n = vars[0];
        // alert(n+":"+v);
        $("#" + n).val(v);
        $("#" + n + "ComboButton").html(selText);
        // alert(v);
    }));
    $("#industryComboDropDown li a").click((function() {
        var selText = $(this).text();
        // alert( $("#theme1Button"));
        var v = $(this).attr('title');
        $("#industryCombo").val(v);
        $("#industryComboComboButton").html(selText);
        // alert(v);
    }));
    $("#numberOfPositionsDropDown li a").click((function() {
        var selText = $(this).text();
        // alert( $("#theme1Button"));
        var v = $(this).attr('title');
        if (v == "disabled") {
            popErrorMessageDialog("Premium Feature", "Please upgrade you account to use this feature");
        } else {
            $("#numberOfPositions").val(v);
            $("#numberOfPositionsComboButton").html(selText);
        }
    }));
    $("#portfolioTogglesDropDown li a").click((function() {
        var selText = $(this).text();
        var v = $(this).attr('title');
        $("#portfolioToggles").val(v);
        $("#portfolioTogglesComboButton").html(selText);
        changePortfolioDisplayMode(v);
    }));
    $("#portfolioComboDropDown li a").click((function() {
        var selText = $(this).text();
        var v = $(this).attr('title');
        $("#portfolioCombo").val(v);
        $("#portfolioComboComboButton").html(selText);
    }));
    $("#pstyleDropDown li a").click((function() {
        var selText = $(this).text();
        var v = $(this).attr('title');
        $("#pstyle").val(v);
        $("#pstyleComboButton").html(selText);
    }));
    $("#ptagDropDown li a").click((function() {
        var selText = $(this).text();
        var v = $(this).attr('title');
        $("#ptag").val(v);
        $("#ptagComboButton").html(selText);
    }));
    $("#ptypeDropDown li a").click((function() {
        var selText = $(this).text();
        var v = $(this).attr('title');
        $("#ptype").val(v);
        $("#ptypeComboButton").html(selText);
    }));
    $("#pcdDropDown li a").click((function() {
        var selText = $(this).text();
        var v = $(this).attr('title');
        $("#pcd").val(v);
        $("#pcdComboButton").html(selText);
    }));
    $("#scDropDown li a").click((function() {
        var selText = $(this).text();
        var v = $(this).attr('title');
        $("#sc").val(v);
        $("#scComboButton").html(selText);
    }));
    $("#scvDropDown li a").click((function() {
        var selText = $(this).text();
        var v = $(this).attr('title');
        $("#scv").val(v);
        $("#scvComboButton").html(selText);
    }));
    $("#FocusDropDown li a").click((function() {
        var selText = $(this).text();
        // alert( $("#FocusButton"));
        var v = $(this).attr('title');
        // $("#Focus").val(v);
        // $("#FocusComboButton").html(selText);
        var url = "/invest/etf-directory/Focus/" + v.replace(" ", "-");
        openPage(url);
    }));
    $("#BaseCryptoCurrencyArbitrageDropDown li a").click((function() {
        var selText = $(this).text();
        var v = $(this).attr('title');
        var coin = document.getElementById("CoinArbitrage");
        // alert(v);
        // alert(coin.value);
        var coinSymbol = coin.value;
        // $("#Focus").val(v);
        // $("#FocusComboButton").html(selText);
        var url = "/invest/crypto-arbitrage/" + coinSymbol.replace(" ", "-") + "/" + v;
        openPage(url);
    }));
    $("#CoinArbitrageDropDown li a").click((function() {
        var selText = $(this).text();
        var v = $(this).attr('title');
        var base = document.getElementById("BaseCryptoCurrencyArbitrage");
        // alert(v);
        // alert(base);
        var base = base.value;
        // $("#Focus").val(v);
        // $("#FocusComboButton").html(selText);
        var url = "/invest/crypto-arbitrage/" + v.replace(" ", "-") + "/" + base;
        openPage(url);
    }));
    $("#CoinListDropDown li a").click((function() {
        var selText = $(this).text();
        var v = $(this).attr('title');
        var exchange = document.getElementById("CryptoExchange");
        // alert(v);
        // alert(base);
        var e = exchange.value;
        // $("#Focus").val(v);
        // $("#FocusComboButton").html(selText);
        var url = "/invest/cryptocurrency/" + e.replace(" ", "-") + "/" + v;
        openPage(url);
    }));
    $("#BaseCryptoCurrencyCorrelationDropDown li a").click((function() {
        var selText = $(this).text();
        var v = $(this).attr('title');
        var coin = document.getElementById("CoinCorrelation");
        // alert(v);
        // alert(coin.value);
        var coinSymbol = coin.value;
        // $("#Focus").val(v);
        // $("#FocusComboButton").html(selText);
        var url = "/invest/crypto-correlation/" + coinSymbol.replace(" ", "-") + "/" + v;
        openPage(url);
    }));
    $("#CoinCorrelationDropDown li a").click((function() {
        var selText = $(this).text();
        var v = $(this).attr('title');
        var base = document.getElementById("BaseCryptoCurrencyCorrelation");
        // alert(v);
        // alert(base);
        var base = base.value;
        // $("#Focus").val(v);
        // $("#FocusComboButton").html(selText);
        var url = "/invest/crypto-correlation/" + v.replace(" ", "-") + "/" + base;
        openPage(url);
    }));
    $("#CryptoExchangeDropDown li a").click((function() {
        var selText = $(this).text();
        var v = $(this).attr('title');
        var p = $(this).attr('pitch');
        //var coin = document.getElementById("CoinList");
       //alert(p);
        // alert(base);
       // var c = coin.value;
        // alert(v);
        // alert(base);
        // var base = base.value;
        // $("#Focus").val(v);
        // $("#FocusComboButton").html(selText);
        var url = "/invest/"+p+"/" + v + "/All-Coins";
       // alert(url);
        openPage(url);
    }));
    $("#RegionDropDown li a").click((function() {
        var selText = $(this).text();
        // alert( $("#FocusButton"));
        var v = $(this).attr('title');
        // $("#Region").val(v);
        // $("#RegionComboButton").html(selText);
        var url = "/invest/etf-directory/Region/" + v.replace(" ", "-");
        openPage(url);
    }));
    $("#CategoryDropDown li a").click((function() {
        var selText = $(this).text();
        // alert( $("#FocusButton"));
        var v = $(this).attr('title');
        // $("#Category").val(v);
        // $("#CategoryComboButton").html(selText);
        var url = "/invest/etf-directory/Category/" + v.replace(" ", "-");
        openPage(url);
    }));
    $("#IssuerDropDown li a").click((function() {
        var selText = $(this).text();
        // alert( $("#FocusButton"));
        var v = $(this).attr('title');
        // $("#Issuer").val(v);
        // $("#IssuerComboButton").html(selText);
        var url = "/invest/etf-directory/Issuer/" + v.replace(" ", "-");
        openPage(url);
    }));
    $("#EquityTypeDropDown li a").click((function() {
        var selText = $(this).text();
        // alert( $("#FocusButton"));
        var v = $(this).attr('title');
        $("#EquityType").val(v);
        $("#EquityTypeDropDown").html(selText);
        var url = "/invest/companyDirectory";
        if (v == "Fund") {
            url = "/invest/funds";
        } else if (v == "Stock") {
            url = "/invest/stocks";
        } else if (v == "Etf") {
            url = "/invest/etfs";
        } else if (v == "Index") {
            url = "/invest/indexes";
        } else if (v == "Crypto") {
            url = "/invest/cryptocurrency/All-Exchanges/All-Coins";
        } else if (v == "All") {
            url = "/invest/companyDirectory?t=All";
        } else {
            url = "/invest/companyDirectory";
        }
        openPage(url);
    }));
}

function hilightPie(ya, yaToggle) {
    alert(ya);
    if (yaToggle && ($(ya).hasClass("portfolioPieHilighted") == false)) {
        $(ya).toggleClass('portfolioPieHilighted');
    } else {
        $(ya).addClass('portfolioPieDashboard');
    }
}

function updateModelSliderValue(inputId, v) {
    var inputFormat = document.getElementById(inputId);
    // showObject(inputFormat);
    inputFormat.value = v;;
    var disp = getModelInputString(inputId, v);
    $("#" + inputId + "_display").html(disp);
    // alert(thisSlider.noUiSlider.get());
}

function showBuySellGuadge(divId, cursorValue) {
    // var buySellColors=["#0B3B0B", "#0B610B","#BDBDBD", "#DF0101","#8A0808"];
    // var text="";
    // alert(cursorValue);
    var gaugeChart = AmCharts.makeChart(divId, {
        "type": "gauge",
        "theme": "light",
        "fontSize": 10,
        "fontWeight": 100,
        "color": "#3B5998",
        "axes": [{
            "axisThickness": 0,
            "axisAlpha": 0.8,
            "tickAlpha": 0,
            "valueInterval": 20,
            "labelsEnabled": false,
            "startAngle": -90,
            "endAngle": 90,
            "bands": [{
                "color": "#8A0808",
                "endValue": 8,
                "labelsEnabled": false,
                "innerRadius": "65%",
                "startValue": 0
            }, {
                "color": "#DF0101",
                "endValue": 20,
                "alpha": 0.5,
                "labelsEnabled": false,
                "innerRadius": "65%",
                "startValue": 8
            }, {
                "color": "#FFAA00",
                "endValue": 41,
                "alpha": 0.5,
                "labelsEnabled": false,
                "innerRadius": "65%",
                "startValue": 20
            }, {
                "color": "#BDBDBD",
                "endValue": 61,
                "labelsEnabled": false,
                "innerRadius": "65%",
                "startValue": 41
            }, {
                "color": "#DDFF00",
                "endValue": 80,
                "labelsEnabled": false,
                "innerRadius": "65%",
                "startValue": 61
            }, {
                "color": "#0B610B",
                "endValue": 92,
                "labelsEnabled": false,
                "alpha": 0.5,
                "innerRadius": "65%",
                "startValue": 80
            }, {
                "color": "#0B3B0B",
                "endValue": 100,
                "labelsEnabled": false,
                "innerRadius": "65%",
                "startValue": 92
            }],
            "bottomText": "",
            "color": "#0B3B0B",
            "endValue": 100
        }],
        "arrows": [{
            "value": cursorValue,
            "color": "#3B5998",
            "innerRadius": "10%",
            "nailRadius": 0,
            "radius": "110%"
        }]
    });
}

function syncEquity(symbol) {
    var post = "/act.ma?action=syncSymbol&s=" + escape(symbol);
    openPage(post);
}

function refreshEquity(symbol) {
    var post = "/act.ma?action=refreshSymbol&s=" + escape(symbol);
    openPage(post);
}

function showObject(printthis) {
    alert(JSON.stringify(printthis));
}

function addChartWaterMark(theChart) {
    theChart.addLabel(10, "50%", "Macroaxis Charts", "center", 28, "#aaaaaa", 0, 0.3, false, "http://www.macroaxis.com");
}

function insertSmallPie(lable1, label2, v1, v2, divId) {
    // small pie chart
    var chart = new AmCharts.AmPieChart(AmCharts.themes.none);
    chart.panEventsEnabled = false;
    chart.dataProvider = [{
        x: lable1,
        value: v1
    }, {
        x: label2,
        value: v2
    }];
    chart.labelField = "x";
    chart.valueField = "value";
    chart.labelsEnabled = false;
    chart.balloonText = "";
    chart.valueText = undefined;
    chart.radius = 20; // half of a width of a div
    chart.outlineThickness = 1;
    chart.colors = ["red", "green"];
    chart.startDuration = 0;
    chart.write(divId);
}

function drowFlatSymbolSparklines() {
    // alert('a');
    var chart = AmCharts.makeChart("latestPricesColumns", {
        "type": "serial",
        "theme": "light",
        "zoomOutText": "",
        "dataDateFormat": "YYYY-MM-DD",
        "valueAxes": [{
            "position": "right",
            "gridAlpha": 0,
            "logarithmic": false,
            "showFirstLabel": false,
            "gridColor": "#000000",
            "recalculateToPercents": true,
            "axisColor": "#eeeeee",
            "fillColor": "#aaaaaa",
            "axisAlpha": 0,
            "gridCount": 2,
            "fillAlpha": 0.1,
            "fontSize": 0,
            "unitPosition": "right",
            "color": "#bbbbbb",
            "labelFunction": function(value, formatted, axis) {
                // if it's the value axis label, just return
                // preformatted one
                if (value == Number(formatted))
                    return formatted;
                // it's a cursor value, let's apply custom rounding to
                // it
                var chart = axis.chart;
                return AmCharts.formatNumber(value, {
                    precision: 3,
                    decimalSeparator: chart.decimalSeparator,
                    thousandsSeparator: chart.thousandsSeparator
                });
            },
            "inside": true
        }],
        "graphs": [{
            "id": "g1",
            "balloonText": "Close:<b>[[close]]</b>",
            "lineColor": "#2ECC71",
            "lineThickness": 1,
            "lineAlpha": 0.4,
            "fillAlphas": 0.50,
            "negativeFillColors": "#db4c3c",
            "negativeLineColor": "#db4c3c",
            "title": "Price:",
            "type": "column",
            "valueField": "close"
        }],
        "categoryField": "date",
        "categoryAxis": {
            "parseDates": true,
            "gridAlpha": 0,
            "gridColor": "#fff",
            "equalSpacing": true,
            "position": "top",
            "axisColor": "#fff",
            "fillColor": "#000000",
            "axisAlpha": 0,
            "fillAlpha": 0.03,
            "fontSize": 0,
            "color": "#f7f7f7",
            "inside": true,
            "dateFormats": [{
                    period: 'WW',
                    format: 'MMM DD'
                },
                {
                    period: 'DD',
                    format: 'EEE'
                },
                {
                    period: 'MM',
                    format: 'MMM'
                }
            ]
        },
        "chartCursor": {
            "valueLineEnabled": true,
            "bulletsEnabled": true,
            "valueLineBalloonEnabled": true,
            "zoomable": false,
            "fullWidth": true,
            "cursorAlpha": 0.5,
            "valueLineAlpha": 0.5,
            "cursorColor": "#aaaaaa",
            "categoryBalloonEnabled": true
        },
        "balloon": {
            "adjustBorderColor": false,
            "borderAlpha": 1,
            "shadowAlpha": 0,
            "borderThickness": 1,
            "fillColor": "#aaaaaa",
            "fillAlpha": 1,
            "color": "#ffffff"
        }
    });
    chart.dataProvider = symbolDataProvider;
    setUpLineMargingsOn(chart);
    chart.validateData();
}

function drawIntraDayChart() {
	
	am4core.options.commercialLicense = true;
    am4core.useTheme(am4themes_animated);
	var chart = am4core.create("intraDayChart", am4charts.XYChart);
	chart.marginBottom = 0;
    chart.marginLeft = 0;
    chart.marginRight = 0;
    chart.marginTop = 0;
    chart.paddingLeft = 0;
    chart.paddingRight = 0;
    chart.paddingTop = 0;
    chart.paddingBottom = 0;
    //setUpV4Export(chart, "Equity", "left");
	//2020-05-28 14:15:00
	chart.dateFormatter.inputDateFormat = "yyyy-MM-dd hh:mm:ss";

	var dateAxis = chart.xAxes.push(new am4charts.DateAxis());

	dateAxis.skipEmptyPeriods = true; 
   


    dateAxis.hidden = false;

    dateAxis.renderer.inside = true;
  
    dateAxis.disabled = false;
    dateAxis.inside = true;
    dateAxis.showFirstLabel = false
    dateAxis.showLastLabel = false
    dateAxis.startLocation = 0.7;
    dateAxis.endLocation = 0.3;
    dateAxis.renderer.minLabelPosition = 0.2;
    dateAxis.renderer.maxLabelPosition = 0.8;
    dateAxis.renderer.labels.template.fillOpacity = 0.4;
    dateAxis.renderer.grid.template.opacity = 0.2;

 // Set date label formatting
    //dateAxis.periodChangeDateFormats.setKey("day", "[bold]dd");
	
	
	
	
	var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
	valueAxis.tooltip.disabled = false;
	valueAxis.renderer.line.strokeOpacity = 0.1;
    valueAxis.renderer.line.strokeWidth =0.1;
    valueAxis.marginLeft = 0;
    valueAxis.marginRight = 0;
    valueAxis.hidden = false;
    valueAxis.width = 0;
    valueAxis.position = "right"
    valueAxis.renderer.inside = true;
    valueAxis.startOnAxis = false;
    valueAxis.showFirstLabel = false
    valueAxis.showLastLabel = false
    valueAxis.startLocation = 0.7;
    valueAxis.endLocation = 0.3;
    valueAxis.renderer.minLabelPosition = 0.3;
    valueAxis.renderer.maxLabelPosition = 0.7;
    // valueAxis.renderer.labels.template.dy = 5;
    valueAxis.renderer.labels.template.fillOpacity = 0.4;
    valueAxis.renderer.grid.template.opacity = 0.2;
    //valueAxis.logarithmic = true;
    valueAxis.renderer.line.strokeOpacity = 0.1;
    valueAxis.renderer.line.strokeWidth = 0.1;
    //setUpV4BigNumbers(valueAxis.numberFormatter, intraDataProvider);
    
	var series = chart.series.push(new am4charts.CandlestickSeries());
	series.dataFields.dateX = "date";
	series.dataFields.valueY = "close";
	series.dataFields.openValueY = "open";
	series.dataFields.lowValueY = "low";
	series.dataFields.highValueY = "high";
	series.tooltipText = "Open:${openValueY.value}\nLow:${lowValueY.value}\nHigh:${highValueY.value}\nClose:${valueY.value}";

	// important!
	// candlestick series colors are set in states. 
	// series.riseFromOpenState.properties.fill = am4core.color("#00ff00");
	// series.dropFromOpenState.properties.fill = am4core.color("#FF0000");
	// series.riseFromOpenState.properties.stroke = am4core.color("#00ff00");
	// series.dropFromOpenState.properties.stroke = am4core.color("#FF0000");

	series.riseFromPreviousState.properties.fillOpacity = 1;
	series.dropFromPreviousState.properties.fillOpacity = 1;
	series.simplifiedProcessing = true;
	chart.cursor = new am4charts.XYCursor();

	// a separate series for scrollbar
	var lineSeries = chart.series.push(new am4charts.LineSeries());
	lineSeries.dataFields.dateX = "date";
	lineSeries.dataFields.valueY = "close";
	// need to set on default state, as initially series is "show"
	lineSeries.defaultState.properties.visible = false;

	
	
	
	// hide from legend too (in case there is one)
	lineSeries.hiddenInLegend = true;
	lineSeries.fillOpacity = 0.5;
	lineSeries.strokeOpacity = 0.5;

//	var scrollbarX = new am4charts.XYChartScrollbar();
//	scrollbarX.series.push(lineSeries);
//	chart.scrollbarX = scrollbarX;

	chart.data =intraDataProvider;
}

function drowHiLowSymbolSparklinesImpNew(up) {
    var lineC = "#aaaaaa";
    // if (up < 0) {
    // lineC = "#FF0000";
    // } else if (up == 0) {
    // lineC = "#aaaaaa";
    // }
    // alert(lineC);
    am4core.options.commercialLicense = true;
    am4core.useTheme(am4themes_animated);
    var chart = am4core.create("latestPricesColumns", am4charts.XYChart);
    chart.lineColor = lineC;
    chart.data = symbolDataProvider;
    chart.marginBottom = 0;
    chart.marginLeft = 0;
    chart.marginRight = 0;
    chart.marginTop = 0;
    chart.paddingLeft = 0;
    chart.paddingRight = 0;
    chart.paddingTop = 0;
    chart.paddingBottom = 0;
    setUpV4Export(chart, "Equity", "leftBottom");
    // Create axes
    var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
    dateAxis.renderer.grid.template.location = 0;
    dateAxis.renderer.minGridDistance = 0;
    dateAxis.contentHeight = 0;
    dateAxis.height = 0;
    dateAxis.marginBottom = 0;
    dateAxis.marginTop = 0;
    dateAxis.hidden = true;
    dateAxis.renderer.minLabelPosition = 0;
    dateAxis.renderer.maxLabelPosition = 1;
    dateAxis.renderer.inside = false;
    dateAxis.start = 1;
    dateAxis.startOnAxis = true;
    dateAxis.fixedWidthGrid = true;
    dateAxis.equalSpacing = true;
    dateAxis.disabled = false;
    dateAxis.startLocation = 1;
    dateAxis.inside = true;
    dateAxis.endLocation = 0;
    // dateAxis.cursorTooltipEnabled = false;
    dateAxis.renderer.opposite = true;
    for (var i = 0; i < chart.data.length; i++) {
        var c = chart.data[i].hideSecEvent;
        var s = chart.data[i].hideSplit;
        if (s == false) {
            let event = dateAxis.axisRanges.create();
            event.date = new Date(chart.data[i].date);
            var pin = new am4plugins_bullets.FlagBullet();
            pin.label.text = "split";
            pin.poleHeight = 1;
            pin.dy = 392;
            pin.url = chart.data[i].url;
            pin.background.fillOpacity = 1;
            pin.background.fill = am4core.color(chart.data[i].color);
            pin.stroke = am4core.color(chart.data[i].color);
            pin.propertyFields.url = "url";
            pin.strokeWidth = 0
            pin.label.fill = am4core.color("#fff");
            pin.background.waveLength = 0;
            // var base = pin.createChild(am4core.Circle);
            // base.radius =4;
            // base.paddingTop = "50%";
            // base.strokeWidth =1;
            // base.stroke = am4core.color(chart.data[i].color);
            // base.fill =am4core.color(chart.data[i].color);
            // base.propertyFields.fill =am4core.color(chart.data[i].color);
            event.bullet = pin;
        }
        if (c == false) {
            let event = dateAxis.axisRanges.create();
            event.date = new Date(chart.data[i].date);
            var pin = new am4plugins_bullets.FlagBullet();
            pin.label.text = "";
            pin.poleHeight = 20;
            pin.dy = 380;
            pin.url = chart.data[i].url;
            pin.background.fillOpacity = 0.7;
            pin.background.fill = am4core.color(chart.data[i].color);
            pin.stroke = am4core.color(chart.data[i].color);
            pin.propertyFields.url = "url";
            pin.strokeWidth = 1
            pin.label.fill = am4core.color("#000");
            pin.background.waveLength = 20;
            var base = pin.createChild(am4core.Circle);
            base.radius = 13;
            base.paddingTop = "95%";
            base.strokeWidth = 1;
            base.stroke = am4core.color(chart.data[i].color);
            base.fill = am4core.color(chart.data[i].color);
            base.propertyFields.fill = am4core.color(chart.data[i].color);
            event.bullet = pin;
        }
    }
    // dateAxis.renderer.line.strokeOpacity = 1;
    // dateAxis.renderer.minGridDistance = 30;
    var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
    // valueAxis.renderer.minGridDistance = 80;
    valueAxis.extraMax = 0.3;
    // Create series
    function createSeries(field, name) {
        var series = chart.series.push(new am4charts.LineSeries());
        series.dataFields.valueY = field;
        series.dataFields.dateX = "date";
        series.name = "";
        series.tooltipText = "{title}\n{dateX} [bold]{valueY}[/]\n{dividendText} {storyText} {filingText} {eventText} {secEventText} {insiderEventText} {newsText} {coverText}  {secondText}  {splitText}";
        series.fill = am4core.color("#000");
        series.stroke = am4core.color("#000");
        series.strokeWidth = 2;
        series.fillOpacity = 0.06;
        series.tensionX = 0.95;
        series.tensionY = 0.95;
        var current = chart.data[chart.data.length - 1];
        // hi lo
        var bulletHiLo = series.bullets.push(new am4plugins_bullets.FlagBullet());
        bulletHiLo.label.text = "{bulletText}";
        bulletHiLo.label.textAlign = "middle";
        bulletHiLo.disabled = true;
        bulletHiLo.propertyFields.disabled = "hideBullet";
        bulletHiLo.propertyFields.url = "url";
        bulletHiLo.propertyFields.poleHeight = "height";
        bulletHiLo.background.waveLength = 0;
        bulletHiLo.background.fillOpacity = 1;
        bulletHiLo.background.propertyFields.fill = "color";
        bulletHiLo.propertyFields.stroke = "color";
        bulletHiLo.strokeWidth = 1;
        bulletHiLo.label.fill = am4core.color("#000");
        bulletHiLo.horizontalCenter = "left";
        bulletHiLo.verticalCenter = "top";
        var circleHiLo = bulletHiLo.createChild(am4core.Circle);
        circleHiLo.radius = 5;
        circleHiLo.strokeWidth = 2;
        circleHiLo.stroke = am4core.color("#000");
        // circleHiLo.fill = am4core.color("#aaa");
        circleHiLo.fill = am4core.color("#fff");;
        // dividend
        var bulletD = series.bullets.push(new am4plugins_bullets.FlagBullet());
        bulletD.label.text = "D";
        bulletD.label.textAlign = "middle";
        bulletD.disabled = true;
        bulletD.propertyFields.disabled = "hideDividend";
        bulletD.poleHeight = 50;
        bulletD.background.waveLength = 0;
        // bulletD.background.fillOpacity = 1;
        bulletD.background.propertyFields.fill = "color";
        bulletD.propertyFields.stroke = "color";
        bulletD.strokeWidth = 1
        bulletD.label.fill = am4core.color("#fff");
        bulletD.horizontalCenter = "left";
        bulletD.verticalCenter = "top";
        bulletD.propertyFields.url = "url";
        var circleD = bulletD.createChild(am4core.Circle);
        circleD.radius = 4;
        circleD.strokeWidth = 0;
        circleD.propertyFields.fill = "color";
        circleD.propertyFields.stroke = "color";
        // split
        // var bulletSplit = series.bullets.push(new am4plugins_bullets.FlagBullet());
        // bulletSplit.label.text = "Split";
        //	 
        // bulletSplit.label.textAlign = "middle";
        // bulletSplit.disabled = true;
        // bulletSplit.propertyFields.disabled = "hideSplit";
        // bulletSplit.poleHeight = 55;
        // bulletSplit.background.waveLength = 1;
        // bulletSplit.background.fillOpacity = 0.9;
        // bulletSplit.background.propertyFields.fill = "color";
        // bulletSplit.propertyFields.stroke = "color";
        //	  
        //	  
        // bulletSplit.strokeWidth =1
        // bulletSplit.label.fill = am4core.color("#fff");
        // bulletSplit.horizontalCenter = "left";
        // bulletSplit.verticalCenter = "top";
        // bulletSplit.propertyFields.url = "url";
        // var circleSplit = bulletSplit.createChild(am4core.Circle);
        // circleSplit.radius =6;
        // circleSplit.strokeWidth =2;
        // circleSplit.propertyFields.fill = "color";
        // circleSplit.propertyFields.stroke = "color";
        // story
        var bulletS = series.bullets.push(new am4plugins_bullets.PointedCircle());
        bulletS.alwaysShowTooltip = true;
        bulletS.fillOpacity = 0.5;
        bulletS.propertyFields.url = "url";
        bulletS.radius = 11;
        bulletS.disabled = true;
        bulletS.propertyFields.disabled = "hideStory";
        bulletS.fill = am4core.color("#EE2505");
        bulletS.strokeWidth = 1
        // cover
        var bulletC = series.bullets.push(new am4plugins_bullets.PointedCircle());
        bulletC.alwaysShowTooltip = true;
        bulletC.fillOpacity = 0.5;
        bulletC.propertyFields.url = "url";
        bulletC.radius = 14;
        bulletC.disabled = true;
        bulletC.propertyFields.disabled = "hideCover";
        bulletC.fill = am4core.color("#057AEE");
        bulletC.strokeWidth = 1
        // news
        var bulletC = series.bullets.push(new am4plugins_bullets.PointedCircle());
        bulletC.alwaysShowTooltip = true;
        bulletC.fillOpacity = 1;
        bulletC.propertyFields.url = "url";
        bulletC.radius = 7;
        bulletC.disabled = true;
        bulletC.propertyFields.disabled = "hideNews";
        bulletC.fill = am4core.color("#000");
        bulletC.strokeWidth = 1
        // event
        var bulletE = series.bullets.push(new am4plugins_bullets.FlagBullet());
        bulletE.label.text = "E";
        bulletE.label.textAlign = "middle";
        bulletE.disabled = true;
        bulletE.propertyFields.disabled = "hideEvent";
        bulletE.propertyFields.poleHeight = "height";
        bulletE.background.waveLength = 0;
        bulletE.background.fillOpacity = 1;
        bulletE.background.propertyFields.fill = "color";
        bulletE.propertyFields.stroke = "color";
        bulletE.propertyFields.url = "url";
        bulletE.strokeWidth = 1
        bulletE.label.fill = am4core.color("#fff");
        bulletE.horizontalCenter = "left";
        bulletE.verticalCenter = "top";
        var circleE = bulletE.createChild(am4core.Circle);
        circleE.radius = 2;
        circleE.strokeWidth = 4;
        circleE.propertyFields.stroke = "color";
        circleE.propertyFields.fill = "color";
        // insider event
        var bulletIE = series.bullets.push(new am4plugins_bullets.FlagBullet());
        // bulletIE.label.text = "I";
        bulletIE.label.textAlign = "middle";
        bulletIE.disabled = true;
        bulletIE.propertyFields.disabled = "hideInsiderEvent";
        bulletIE.poleHeight = 8;
        bulletIE.background.waveLength = 0;
        bulletIE.propertyFields.url = "url";
        bulletIE.background.fillOpacity = 1;
        bulletIE.background.propertyFields.fill = "color";
        bulletIE.propertyFields.stroke = "color";
        bulletIE.strokeWidth = 1
        bulletIE.label.fill = am4core.color("#fff");
        bulletIE.horizontalCenter = "left";
        bulletIE.verticalCenter = "top";
        var circleIE = bulletIE.createChild(am4core.Circle);
        circleIE.radius = 2;
        circleIE.strokeWidth = 2;
        circleIE.propertyFields.stroke = "color";
        circleIE.propertyFields.fill = "color";
        // Second
        var bulletF = series.bullets.push(new am4plugins_bullets.FlagBullet());
        bulletF.label.text = "n";
        bulletF.label.textAlign = "middle";
        bulletF.disabled = true;
        // bulletF.label.marginTop=3;
        // bulletF.label.marginBottom=3;
        // bulletF.label.paddingRight=3;
        bulletF.label.paddingLeft = 6;
        bulletF.propertyFields.disabled = "hideSecond";
        bulletF.poleHeight = 25;
        bulletF.background.waveLength = 0;
        bulletF.background.fillOpacity = 1;
        bulletF.background.propertyFields.fill = "color";
        bulletF.propertyFields.stroke = "color";
        bulletF.propertyFields.url = "url";
        bulletF.strokeWidth = 1
        bulletF.label.fill = am4core.color("#000");
        bulletF.horizontalCenter = "left";
        bulletF.verticalCenter = "top";
        var circleF = bulletF.createChild(am4core.Circle);
        circleF.radius = 2;
        circleF.strokeWidth = 4;
        circleF.propertyFields.stroke = "color";
        circleF.propertyFields.fill = "color";
        // sec Filing
        // var bulletF = series.bullets.push(new am4plugins_bullets.FlagBullet());
        // bulletF.label.text = "sec";
        // bulletF.label.marginTop=3;
        // bulletF.label.marginBottom=3;
        // bulletF.label.paddingRight=3;
        // bulletF.label.paddingLeft=3;
        //	
        // bulletF.disabled = true;
        // bulletF.propertyFields.disabled = "hideSecEvent";
        // bulletF.poleHeight = 40;
        // bulletF.background.waveLength = 0;
        // bulletF.background.fillOpacity = 1;
        // bulletF.background.propertyFields.fill = "color";
        // bulletF.propertyFields.stroke = "color";
        // bulletF.propertyFields.url = "url";
        // bulletF.strokeWidth =1
        // bulletF.label.fill = am4core.color("#fff");
        // bulletF.horizontalCenter = "center";
        // bulletF.verticalCenter = "bottom";
        // var circleF = bulletF.createChild(am4core.Circle);
        // circleF.radius =2;
        // circleF.strokeWidth =4;
        // circleF.propertyFields.stroke = "color";
        // circleF.propertyFields.fill = "color";
        // chart.cursor.events.on("cursorpositionchanged", function(ev) {
        // ev.target.triggerMove(ev.target.point, "soft");
        // });
        // series.tooltip.label.textAlign = "middle";
        // s//eries.tooltip.pointerOrientation = "down";
        // series.tooltip.dy = -5;
        // bullet.circle.stroke = am4core.color("#fff");
        // bullet.circle.strokeWidth = 2;
        // bullet.tooltipText = "{dateX}: [bold]{valueY}[/]";
        // series.columns.template.width = am4core.percent(100);
        // series.columns.template.propertyFields.strokeDasharray = "dashLength";
        // series.columns.template.propertyFields.fillOpacity = "alpha";
        // series.columns.template.propertyFields.strokeOpacity = "dashAlpha";
        //		
        // var disatnceState = series.columns.template.states.create("hover");
        // disatnceState.properties.fillOpacity = 0.9;
    }
    createSeries("close", "Series #1");
    // chart.legend = new am4charts.Legend();
    chart.cursor = new am4charts.XYCursor();
    chart.cursor.xAxis = dateAxis;
    chart.cursor.zoomable = false;
    var axisTooltip = dateAxis.tooltip;
    axisTooltip.background.fill = am4core.color("#aaa");
    axisTooltip.y = am4core.percent(0.50);
    axisTooltip.background.strokeWidth = 0;
    axisTooltip.background.cornerRadius = 2;
    axisTooltip.background.pointerLength = 5;
    // chart.cursor.yAxis = valueAxis;
    var yTooltip = valueAxis.tooltip;
    yTooltip.background.fill = am4core.color("#aaa");
    yTooltip.background.strokeWidth = 0;
    yTooltip.background.cornerRadius = 2;
    yTooltip.background.pointerLength = 5;
    // axisTooltip.disabled = true;
    // axisTooltip.layout ="vertical";
    // axisTooltip.zIndex = 999999;
    // axisTooltip.pointerOrientation = "down";
    // axisTooltip.verticalCenter = "top";
    // chart.cursor.xAxis = dateAxis;
    // chart.cursor.fullWidthLineX = false;
    // chart.cursor.lineY.strokeWidth = 1;
    // chart.cursor.lineY.fill = am4core.color("#aaa");
    // chart.cursor.lineY.fillOpacity = 0.1;
    // chart.cursor.lineY.disabled = true;
    // var event = dateAxis.axisRanges.create();
    // event.date = new Date(2018, 0, 3, 12);
    // event.grid.disabled = true;
    // event.bullet = new am4core.Triangle();
    // event.bullet.width = 15;
    // event.bullet.height = 11;
    // event.bullet.fill = am4core.color("#c00");
    // event.bullet.horizontalCenter = "middle";
    valueAxis.renderer.line.strokeOpacity = 0.1;
    valueAxis.renderer.line.strokeWidth = 0.1;
    valueAxis.marginLeft = 0;
    valueAxis.marginRight = 0;
    valueAxis.hidden = true;
    valueAxis.width = 0;
    valueAxis.position = "right"
    valueAxis.renderer.inside = false;
    valueAxis.start = 0;
    valueAxis.startOnAxis = true;
    valueAxis.fixedWidthGrid = true;
    valueAxis.equalSpacing = true;
    // var vevent = valueAxis.axisRanges.create();
    // vevent.value = 2.46;
    // vevent.grid.disabled = true;
    // var pin = new am4plugins_bullets.PinBullet();
    // vevent.bullet = pin;
    // pin.toFront()
    //
    // // Configure
    // //pin.layout = "none"
    // pin.background.pointerAngle = 0;
    // pin.background.radius = 20;
    // pin.background.fill = am4core.color("#c00");
    // setV4ChartCursor(chart);
    chart.cursor.zoomable = false;
    // setUpLineMargingsOn(chart,true);
    // chart.categoryAxis.startOnAxis = true;
    chart.validateData();
    // chart.cursor.toFront();
}

function drowHiLowSymbolSparklinesImpl(up) {
    // alert(up);
    var lineC = "#008000";
    if (up < 0) {
        lineC = "#FF0000";
    } else if (up == 0) {
        lineC = "#aaaaaa";
    }
    var chart = AmCharts.makeChart("latestPricesColumns", {
        "type": "serial",
        "theme": "light",
        "zoomOutText": "",
        "dataDateFormat": "YYYY-MM-DD",
        "valueAxes": [{
            "id": "v1",
            "position": "right",
            "gridAlpha": 0.01,
            "logarithmic": false,
            "showFirstLabel": false,
            "gridColor": "#000000",
            // "recalculateToPercents":true,
            "axisColor": "#eeeeee",
            "fillColor": "#aaaaaa",
            "axisAlpha": 0,
            "gridCount": 2,
            "fillAlpha": 0,
            "unitPosition": "right",
            "color": "#bbbbbb",
            "labelFunction": function(value, formatted, axis) {
                // if it's the value axis label, just return
                // preformatted one
                if (value == Number(formatted))
                    return formatted;
                // it's a cursor value, let's apply custom rounding to
                // it
                var chart = axis.chart;
                return AmCharts.formatNumber(value, {
                    precision: 3,
                    decimalSeparator: chart.decimalSeparator,
                    thousandsSeparator: chart.thousandsSeparator
                });
            },
            "inside": false
        }, {
            "id": "v2",
            "position": "right",
            "gridAlpha": 0,
            "logarithmic": false,
            "showFirstLabel": false,
            "axisAlpha": 0,
            "gridCount": 2,
            "fillAlpha": 0.1,
            "unitPosition": "right",
            "color": "#bbbbbb",
            "labelFunction": function(value, formatted, axis) {
                // if it's the value axis label, just return
                // preformatted one
                if (value == Number(formatted))
                    return formatted;
                // it's a cursor value, let's apply custom rounding
                // to it
                var chart = axis.chart;
                return AmCharts.formatNumber(value, {
                    precision: 3,
                    decimalSeparator: chart.decimalSeparator,
                    thousandsSeparator: chart.thousandsSeparator
                });
            },
            "inside": false
        }],
        "graphs": [{
            "id": "g1",
            "valueAxis": "v1",
            // "addClassNames": true,
            "proCandlesticks": false,
            "balloonText": "Open:<b>[[open]]</b><br>Low:<b>[[low]]</b><br>High:<b>[[high]]</b><br>Close:<b>[[close]]</b><br>",
            "closeField": "close",
            "classNameField": "barClass",
            "highField": "high",
            "lineColor": lineC,
            "lineThickness": 2,
            "lineAlpha": 1,
            "lowField": "low",
            "fillAlphas": 0.10,
            "negativeFillColors": "#db4c3c",
            "negativeLineColor": "#db4c3c",
            "openField": "open",
            // "labelText": "[[close]]",
            // "labelPosition": "end",
            // "labelOffset": 50,
            "title": "Price:",
            "type": "smoothedLine",
            "valueField": "close"
        }],
        "categoryField": "date",
        "categoryAxis": {
            "parseDates": true,
            "gridAlpha": 0,
            "equalSpacing": true,
            "position": "top",
            "axisAlpha": 0,
            "fillAlpha": 0,
            "color": "#000000",
            "inside": false,
            "fontSize": 0,
            "dateFormats": [{
                    period: 'WW',
                    format: 'MMM DD'
                },
                {
                    period: 'DD',
                    format: 'EEE'
                },
                {
                    period: 'MM',
                    format: 'MMM'
                }
            ]
        },
        "chartCursor": {
            "valueLineEnabled": true,
            "bulletsEnabled": true,
            "valueLineBalloonEnabled": true,
            "zoomable": false,
            "fullWidth": true,
            "balloonAlpha": 0.5,
            "valueLineAlpha": 0.5,
            "valueLineBalloonAlpha": 0.5,
            "cursorColor": "#aaa",
            "categoryBalloonEnabled": true
        },
        "balloon": {
            "adjustBorderColor": false,
            "borderAlpha": 1,
            "shadowAlpha": 0,
            "borderThickness": 1,
            "fillColor": "#aaaaaa",
            "fillAlpha": 1,
            "color": "#ffffff"
        }
    });
    chart.dataProvider = symbolDataProvider;
    setUpLineMargingsOn(chart, true);
    chart.categoryAxis.startOnAxis = true;
    chart.validateData();
}

function drowHiLowSymbolSparklines(up) {
    var d1 = $.Deferred();
    d1.done((function() {
        drowHiLowSymbolSparklinesImpNew(up);
    }));
    d1.resolve();
}

function runIndicatorForSymbol(symbol, axis, ratio) {
	var s = document.getElementById("r");
    var vs = null;
    var name = ratio;
    if (s) {
        vs = s.value;
        var ns = document.getElementById("r-name" + vs);
        if (ns) {
            name = ns.innerHTML.replaceAll(" ", "-");
            //alert(name);
        }
    }
    var postData = null;
    if (vs) {

		postData = "/financial-statements/" + symbol + "/" + vs;
	    
    } else {
    	postData = "/financial-statements/" + symbol;
    }
    openPage(postData);
}

function runIndicator(symbol, axis, ratio) {
    var s = document.getElementById("s");
    var vs = null;
    var name = ratio;
    if (s) {
        vs = s.value;
        var ns = document.getElementById("s-name" + vs);
        if (ns) {
            name = ns.innerHTML.replaceAll(" ", "-");
            //alert(name);
        }
    }
    //alert(axis+" "+ratio);
    // postData = getFormData(document.getElementById("taInput"), false);
    //alert(ratio);
    var postData = null;
    if (vs) {
    	var selectedStatementNameEl = document.getElementById("selectedStatementName");
    	
    	var selectedStatementName = null;
    	if (selectedStatementNameEl) {
    		selectedStatementName = selectedStatementNameEl.innerHTML;
    		if (selectedStatementName.indexOf('Select ') > -1) {
    			selectedStatementName = null;
    		} else {
    			selectedStatementName = selectedStatementName.replaceAll(" ", "-");
    		}
    	}
    	//alert(axis+" "+ratio+" "+selectedStatementName);
        if ("ratioPatterns" == axis) {
        	if (ratio) {
        		if (selectedStatementName) {
        			ratio = selectedStatementName;
        		}
        		if ("Probability-Of-Bankruptcy" == selectedStatementName) {
    				postData = "/invest/ratio/" + vs + "/Probability-Of-Bankruptcy";
    			} else {
    				postData = "/financial-statements/" + vs + "/" + ratio;
    			}
        	} else {
        		
        		if (selectedStatementName) {
        			ratio = selectedStatementName;
        		}
        		if (ratio) {
        			postData = "/financial-statements/" + vs + "/" + ratio;
        		} else {
        			postData = "/financial-statements/" + vs;
        		}
        	}
            openPage(postData);
        } else if ("symbolHistory" == axis) {
            postData = "/market/" + vs + "/" + name + "/stock-price-history";
            openPage(postData);
        } else if ("diagnostics" == axis) {
            postData = "/stock-analysis/" + vs + "/" + name;
            openPage(postData);
        } else if ("hype" == axis) {
            postData = "/predict/" + vs + "/" + name;
            openPage(postData);
        } else if ("performance" == axis) {
            postData = "/performance/" + vs + "/" + name;
            openPage(postData);
        } else if ("market-value" == axis) {
            postData = "/market-value/" + vs;
            openPage(postData);
        } else if ("compareChart" == axis) {
            postData = "/invest/chart/" + vs;
            openPage(postData);
        }else if ("alphaSearch" == axis) {
            postData = "/invest/beta/" + vs;
            openPage(postData);
        } else if ("beta" == axis) {
            postData = "/invest/beta/" + vs;
            openPage(postData);
        }  else if ("symbolRatiosCompareOverTime" == axis) {
            if ("bs" == ratio) {
                ratio = "balance-sheet";
            } else if ("is" == ratio) {
                ratio = "income-statement";
            } else if ("cs" == ratio) {
                ratio = "cash-flow-statement";
            } else if ("fr" == ratio) {
                ratio = "financial-ratios";
            } else if ("vd" == ratio) {
                ratio = "financial-analysis";
            }
            postData = "/market/" + vs + "/" + name + "/" + ratio;
            //alert(postData);
            openPage(postData);
        } else if ("fundamentals" == axis || "financial-statements" == axis) {
    		if (selectedStatementName) {
    			//alert(selectedStatementName)
    			if ("Probability-Of-Bankruptcy" == selectedStatementName) {
    				ratio = selectedStatementName;
    				postData = "/invest/ratio/" + vs + "/Probability-Of-Bankruptcy";
    			} else {
	    			ratio = selectedStatementName;
	    			postData = "/financial-statements/" + vs + "/" + ratio;
    			}
    		} else {
    			postData = "/financials/" + vs + "/" + name;
    		}
            openPage(postData);
        } else if ("ratio" == axis) {
        	//alert(ratio);
    		if (selectedStatementName) {
    			
    			if ("Probability-Of-Bankruptcy" == selectedStatementName) {
    				ratio = selectedStatementName;
    				postData = "/invest/ratio/" + vs + "/Probability-Of-Bankruptcy";
    			} else {
    				ratio = selectedStatementName;
    				postData = "/invest/ratio/" + vs + "/" + ratio;
    			}
    		} else {
    			
    			if (!ratio) {
    				postData = "/invest/ratio/" + vs ;
    			} else {
    				postData = "/invest/ratio/" + vs + "/" + ratio;
    			}
    		}
            openPage(postData);
        } else if ("management" == axis) {
            postData = "/executives/" + vs + "/" + name;
            openPage(postData);
        }else if ("volatility" == axis) {
            postData = "/volatility/" + vs + "/" + name;
            openPage(postData);
        } else if ("valuation" == axis) {
            postData = "/valuation/" + vs + "/" + name;
            openPage(postData);
        } else if ("performance" == axis) {
            postData = "/performance/" + vs + "/" + name;
            openPage(postData);
        } else if ("symbolMedia" == axis) {
            postData = "/news/" + vs + "/" + name;
            openPage(postData);
        } else if ("technical" == axis) {
            postData = "/technical-analysis/" + vs + "/" + name;
            openPage(postData);
        } else if ("technical-analysis" == axis) {
            postData = "/technical-analysis/" + vs + "/" + name;
            openPage(postData);
        }  else if ("target-price" == axis || "analystRecommendations" == axis) {
            postData = "/target-price/" + vs;
            openPage(postData);
        }  else if ("earnings-estimate" == axis || "earningsEstimates" == axis) {
            postData = "/earnings-estimate/" + vs;
            openPage(postData);
        } else if ("future-stock-price" == axis || "priceProbability" == axis) {
            postData = "/future-stock-price/" + vs;
            openPage(postData);
        }else if ("in-the-news" == axis || "timeline" == axis) {
            postData = "/in-the-news/" + vs;
            openPage(postData);
        }  else if ("investing" == axis || "stockCalendar" == axis) {
            postData = "/investing/" + vs;
            openPage(postData);
        }  else if ("valuation" == axis ||
            "volatility" == axis ||
            "fundamentals" == axis ||
            "performance" == axis ||
            "technical" == axis ||
            "symbolMedia" == axis ||
            "symbolHistory" == axis ||
            "hype" == axis ||
            "diagnostics" == axis ||
            "management" == axis) {
            postData = "/invest/market/" + vs + "--" + axis + "--" + escape(name);
            openPage(postData);
        } else if ("advice" == axis ||
            "alphaSearch" == axis ||
            "compare" == axis ||
            "competition" == axis ||
            "analystRecommendations" == axis ||
            "target-price" == axis ||
            "ratioCompare" == axis ||
            "bond" == axis ||
            "earningsEstimates" == axis ||
            "timeline" == axis ||
            "symbolRatiosCorrelations" == axis ||
            "priceProbability" == axis ||
            "stockDividends" == axis ||
            "stockPeerDividends" == axis ||
            "compareChart" == axis ||
            "symbolRatiosCompareOverTime" == axis) {
            postData = "/invest/" + axis + "/" + vs;
            //alert(postData);
            openPage(postData);
        } else if ("compareFundamentals" == axis) {
            postData = "/invest/trends/" + ratio + "/" + vs;
            //alert(postData);
            openPage(postData);
        }else if ("trends" == axis) {
            postData = "/invest/trends/" + ratio + "/" + vs;
            //alert(postData);
            openPage(postData);
        } else {
            if (ratio == "" || ratio == "--") {
            	
            	 if ("dividends" == axis) {
                     postData = "/dividends/" + vs;
                     openPage(postData);
                 } else if ("forecast" == axis) {
                     postData = "/forecast/" + vs;
                     openPage(postData);
                 } else {
                	 postData = "/invest/" + axis + "/" + vs;
                 }
            } else {
                postData = "/invest/" + axis + "/" + vs + "--" + ratio;
            }
            openPage(postData);
        }
    }
    // alert(postData);
}

function addEquityToWatchList(symbol, name, onOkUrl) {
    //alert(symbol);
    var vs = symbol;
    if (vs && vs != "") {
        swal.queue([{
            title: 'Add Equity To Watchlist?',
            confirmButtonText: 'Yes, do it!',
            confirmButtonColor: "#f44336",
            showCancelButton: true,
            cancelButtonColor: "#aaa",
            focusConfirm: false,
            allowEscapeKey: false,
            allowOutsideClick: false,
            type: "question",
            footer: "This will add " + name + " to your watchlist",
            showLoaderOnConfirm: true,
            preConfirm: function() {
                return new Promise(function(resolve) {
                    $.get("/act.ma?action=addEquityToWatchlist&s=" + vs + "&name=" + name)
                        .done((function(data) {
                            if (data == "added") {
                                Swal.fire({
                                    title: "Added!",
                                    footer: name + " was added to your watchlist.",
                                    type: "success",
                                    allowEscapeKey: false,
                                    allowOutsideClick: false,
                                    confirmButtonText: "OK",
                                    confirmButtonColor: "green"
                                }).then((result) => {
                                    if (result.value) {
                                        postData = "/invest/watchlist";
                                        document.location.href = postData;
                                    }
                                })
                            } else {
                                Swal.fire({
                                    title: "Already Watching",
                                    footer: "You already have " + name + " in your watchlist.",
                                    type: "warning",
                                    allowEscapeKey: false,
                                    allowOutsideClick: false,
                                    confirmButtonText: "OK",
                                    confirmButtonColor: "green"
                                }).then((function(result) {
                                    if (result.value) {
                                        if (onOkUrl) {
                                            postData = onOkUrl;
                                            document.location.href = postData;
                                        } else {
                                            window.location.reload();
                                        }
                                    }
                                }))
                            }
                        }))
                })
            }
        }]).catch(swal.noop);
    } else {
        popInfoMessageDialog("Missing Symbol", "Please select equity to add to your watchlist");
    }
}

function addToWatchlist() {
    //alert(va);
    var s = document.getElementById("s");
    //alert(s);
    var vs = null;
    var name = null;
    if (s) {
        vs = s.value;
        if (vs && vs != "") {
            var ns = document.getElementById("s-name" + vs);
            if (ns) {
                name = ns.innerHTML;
                //alert(name);
            }
            //alert(s+" "+vs +" "+ns+" "+name)
            addEquityToWatchList(vs, name, "/invest/watchlist");
        } else {
            popInfoMessageDialog("Missing Symbol", "Please select equity to add to your watchlist");
        }
    } else {
        popInfoMessageDialog("Missing Symbol", "Please select equity to add to your watchlist");
    }
}

function popHelpDialog(title, msg, url) {
    // var eventBodyEl = document.getElementById('eventBody');
    // eventBodyEl.innerHTML="<h1 style='padding-left:0px;
    // margin-left:0px;'>"+event.displayDate+"</h1>"+event.description;
    Swal.fire({
        title: title,
        html: msg,
        type: "info",
        confirmButtonColor: "green",
        confirmButtonText: "View Analysis",
        showCancelButton: true
    }).then((function(result) {
        if (result.value) {
            openPage(url);
        }
    }));
}

function popEventDialog(event) {
    // var eventBodyEl = document.getElementById('eventBody');
    // eventBodyEl.innerHTML="<h1 style='padding-left:0px;
    // margin-left:0px;'>"+event.displayDate+"</h1>"+event.description;
    Swal.fire({
        title: event.displayDate,
        html: event.description,
        type: "info",
        confirmButtonColor: "green",
        confirmButtonText: "View Event",
        showCancelButton: false
    }).then((function(result) {
    	 if (result.value) {
    		 openPage(event.descriptionUrl);
         }
    }));
}

function eventRemoval(eventCategory) {
    // alert(eventCategory);
    if (eventCategory == "ALL") {
        return true;
    }
    $('#transactionHistoryDiv').fullCalendar('removeEvents', (function(event) {
        if (eventCategory == event.type) {
            return false;
        } else {
            return true;
        }
    }));
}

function getChart(id) {
    var allCharts = AmCharts.charts;
    for (var i = 0; i < allCharts.length; i++) {
        if (id == allCharts[i].div.id) {
            return allCharts[i];
        }
    }
}
/**
 * Exports and triggers download of chart data as JSON file
 */
function exportJSON(chardivid) {
    var c = getChart(chardivid);
    c.export.toJSON({}, (function(data) {
        this.download(data, this.defaults.formats.JSON.mimeType, "macroaxisData.json");
    }));
}
/**
 * Exports and triggers download of chart data as CSV file
 */
function exportCSV() {
    chart.export.toCSV({}, (function(data) {
        this.download(data, this.defaults.formats.CSV.mimeType, "amCharts.csv");
    }));
}
/**
 * Exports and triggers download of chart data as Excel file
 */
function exportXLSX() {
    chart.export.toXLSX({}, (function(data) {
        this.download(data, this.defaults.formats.XLSX.mimeType, "amCharts.xlsx");
    }));
}

function downloadChart(chardivid) {
    var c = getChart(chardivid);
    c.export.capture({}, (function() {
        alert('a');
        this.toPNG({}, (function(base64) {
            this.download(base64, "image/png", "macroaxisChart.png");
        }));
    }));
    // alert(c.export);
    // c.export.toPNG({}, function(data) {
    //
    // this.download(data, "image/png", "macroaxisCharts.png");
    // });
}

function drawTechnicalAnalysisBlock() {
    var outputStart = document.getElementById('outputStart');
    if (outputStart) {
        var chartData = makeSameScaleDataTA();
        var useSeparateOutput = $('#useSeparateOutput').val();
        var useLargeBullet = $('#useLargeBullet').val();
        var outputDataName2 = $('#outputName2').val();
        var outputDataName3 = $('#outputName3').val();
        var hasSecondOutput = false;
        var hasThirdOutput = false;
        if (outputDataName2) {
            hasSecondOutput = true;
        }
        if (outputDataName3) {
            hasThirdOutput = true;
        }
        if (useSeparateOutput) {
            drawSameScaleTAForDataProvider("line", chartData, true, false, hasSecondOutput, hasThirdOutput);
        } else {
            if (useLargeBullet) {
                drawSameScaleTAForDataProvider("line", chartData, false, true, hasSecondOutput, hasThirdOutput);
            } else {
                if (chartData) {
                    drawSameScaleTAForDataProvider("line", chartData, false, false, hasSecondOutput, hasThirdOutput);
                }
            }
        }
    }
}

function printChart() {
    chart.export.capture({}, (function() {
        this.toPRINT();
    }));
}

function displayEarningsEstimatesLineChart(shortVersion) {
    // alert(shortVersion);
    var chart = AmCharts.makeChart("sparklineBase", {
        "type": "serial",
        "autoMargins": false,
        "marginTop": 0,
        "marginRight": 0,
        "marginLeft": 0,
        "marginBottom": 30,
        "columnWidth":1,
        "dataProvider": makeEarningsChartData(),
        "graphs": [{
            "id": "estimateHigh",
            "lineAlpha": 0.4,
            "fillAlphas": 0.2,
            "showBalloon": true,
            "fillToGraph": "estimate",
            "title": "Highest Estimate",
            "type": "smoothedLine",
            "lineThickness": 0,
            "lineColor": "green",
            "fillColors": "green",
            "columnWidth":1,
            "valueField": "estimateHigh",
            "balloonText": "High [[value]]"
        }, {
            "id": "estimateLow",
            "lineAlpha": 0.4,
            "fillAlphas": 0.2,
            "fillToGraph": "estimate",
            "title": "Lowest Estimate",
            "type": "smoothedLine",
            "lineThickness": 0,
            "lineColor": "red",
            "fillColors": "red",
            "showBalloon": true,
            "columnWidth":1,
            "balloonText": "Low [[value]]",
            "valueField": "estimateLow"
        }, {
            "id": "estimate",
            "valueField": "estimate",
            "lineThickness": 4,
            "type": "smoothedLine",
            "fillAlpha": 0.4,
            "lineColor": "#3b5998",
            "title": "Estimated EPS",
            "columnWidth":1,
            "balloonText": "Estimate <b>[[value]]</b>",
            "fillAlphas": 0
        }, {
            "id": "actual",
            "valueField": "actual",
            "bullet": "square",
            "bulletSize": 40,
            "lineAlpha": 1,
            "lineThickness": 0,
            "lineColor": "orange",
            "fillColor": "orange",
            "line": "orange",
            "title": "Actual EPS",
            "type": "column",
            "columnWidth":1,
            "balloonText": "[[category]]: Actual <b>[[value]]</b>",
            "fillAlphas": 0.3
        }],
        "chartCursor": {
            "zoomable": false,
            "fullWidth": true,
            "cursorAlpha": 0.3,
            "cursorColor": "#aaaaaa",
            "categoryBalloonEnabled": true
        },
        "dataDateFormat": "YYYY",
        "categoryField": "day",
        "categoryAxis": {
            "parseDates": true,
            "twoLineMode": true,
            "axisColor": "#aaaaaa",
            "fillColor": "#000000",
            "equalSpacing": true,
            "fillAlpha": 0,
            "gridColor": "#000000",
            "gridAlpha": 0,
            "axisAlpha": 0,
            "color": "#3b5998"
        },
        "export": {
            "enabled": false
        },
        "legend": {
            "useGraphSettings": true,
            "markerSize": 22,
            "valueWidth": 50
        }
    });
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor);
    chart.addChartCursor(chartCursor);
    decorateBalloon(chart.balloon);
    var valueAxis = new AmCharts.ValueAxis();
    decorateValueAxis(valueAxis);
    valueAxis.inside = true;
    chart.addValueAxis(valueAxis);
}

function makeEarningsChartData() {
    var actualEPSValues = $('#actualEPS').val();
    var estimatedEPSValues = $('#estimatedEPS').val();
    var estimatedEPSHighValues = $('#estimatedEPSHigh').val();
    var estimatedEPSLowValues = $('#estimatedEPSLow').val();
    var datesValuesValues = $('#dates').val();
    // alert(datesValuesValues);
    if (!actualEPSValues) {
        return;
    }
    var actualEPS = actualEPSValues.split(",");
    var estimatedEPS = estimatedEPSValues.split(",");
    var estimatedEPSHigh = estimatedEPSHighValues.split(",");
    var estimatedEPSLow = estimatedEPSLowValues.split(",");
    var days = datesValuesValues.split(",");
    // alert(days+" "+actualEPS);
    var chartData = [];
    var size = days.length;
    for (var i = 0; i < size; i++) {
        var a = actualEPS[i];
        var e = estimatedEPS[i];
        var eh = estimatedEPSHigh[i];
        var el = estimatedEPSLow[i];
        var d = days[i];
        if (a == -9999) {
            chartData.push({
                day: d,
                estimate: e,
                estimateHigh: eh,
                estimateLow: el
            });
        } else {
            chartData.push({
                day: d,
                actual: a,
                estimate: e
            });
        }
    }
    // alert(chartData);
    return chartData;
}
// sleep time expects milliseconds
function sleep(time) {
    return new Promise((resolve) => setTimeout(resolve, time));
}

function getV4BigFormat(max, min) {
	//alert(max);
    var f = "#a";
    if (max > 10000000) {
        f = "#,###.0a";
    } else if (min < -10000000) {
        f = "#,###.0a";
    } else if (max > 10000000 || min < -10000000) {
        f = "#,###.00a";
    } else if (max < 1 && max>0.05) {
        f = "#a";
    } else if (max > -1 && max <= 1) {
        // alert(max);
        f = "#.0000a";
    } else if (max > 1000) {
        f = "#.0a";
    } else if (max > 1) {
        f = "#.00a";
    } else if (min <= 0) {
        f = "#.00a";
    } else {
        f = "#a";
    }
    //alert(max+" "+f);
    return f;
}

function setUpV4BigNumbersLabel(labelBullet, max, min) {
    //alert(max);
    var f = getV4BigFormat(max, min);
    //alert(f);
    labelBullet.label.text = "{valueY.value.formatNumber('" + f + "')}";
    labelBullet.label.ellipsis = "...";
    labelBullet.label.hideOversized = true;
}

function setUpV4BigNumbers(numberFormatter, data) {
    numberFormatter.numberFormat = "# a";
    var max = hasV4DataMax(data);
    var min = hasV4DataMin(data);
    // alert(data);
    numberFormatter.numberFormat = getV4BigFormat(max, min);
    numberFormatter.bigNumberPrefixes = [{
            "number": 1e+3,
            "suffix": "K"
        },
        {
            "number": 1e+6,
            "suffix": "M"
        },
        {
            "number": 1e+9,
            "suffix": "B"
        },
        {
            "number": 1e+12,
            "suffix": "T"
        },
        {
            "number": 1e+15,
            "suffix": "Q"
        },
        {
            "number": 1e+18,
            "suffix": "E"
        },
        {
            "number": 1e+21,
            "suffix": "Z"
        },
        {
            "number": 1e+24,
            "suffix": "Y"
        }
    ];
    numberFormatter.smallNumberPrefixes = [{}];
}
var chart;
// create chart
function createLineChartsForPageSymbols(t) {
    var symbols = document.getElementById("symbols");
    // alert(symbols);
    if (symbols) {
        var symbolsValues = symbols.value.split(",");
        // alert(symbolsValues);
        var size = symbolsValues.length;
        for (var i = 0; i < size; i++) {
            var s = symbolsValues[i];
            if (s && s != "") {
                createLineChart(3, s);
            }
        }
    }
}

function createPieChartsForPageSymbols() {
    var symbols = document.getElementById("symbols");
    if (symbols) {
        var symbolsValues = symbols.value.split(",");
        // alert(symbolsValues);
        var size = symbolsValues.length;
        for (var i = 0; i < size; i++) {
            var s = symbolsValues[i];
            if (s && s != "") {
                displayPostGenericPieChart(s + "_smallAllocation", false);
            }
        }
    }
}

function createLineChartsForPagePortfolio(pid, locDiv) {
    // var locDiv = "recent-items-chart2";
    // alert(locDiv);
    var chartData = getChartDataObject('/act.ma?action=portfolioTimeseries&xd=' + pid, locDiv);
    // alert(chartData);
    // createLineChartFromChartData(chartData,locDiv);
}

function createLineChart(t, symbol) {
    // alert(symbol);
    var locDiv = symbol + "inlineChart";
    // alert(locDiv);
    var chartData = getChartDataObject('/act.ma?action=timeseries&s=' + symbol + '&t=' + t, locDiv);
    // alert(chartData);
}

function createLineChartFromChartData(chartData, locDiv) {
    chart = new AmCharts.AmSerialChart();
    chart.autoMargins = false;
    var isPortfolio = false;
    if ("portfolioChart" == locDiv) {
        isPortfolio = true;
    }
    chart.pathToImages = "/lib/images/";
    var categoryAxis = chart.categoryAxis;
    chart.dataProvider = chartData.data;
    // alert(chart.dataProvider);
    chart.categoryField = "x";
    chart.dataDateFormat = "YYYY-MM-DD";
    // GRAPHS
    var width = chartData.graphs.length;
    var margin = -30;
    if (width > 1) {
        margin = -10;
    }
    $.each(chartData.graphs, (function() {
        var graph1 = new AmCharts.AmGraph();
        var ctype = this.type;
        graph1.valueField = this.dataField;
        graph1.type = ctype;
        graph1.title = this.name;
        // alert( this.color);
        var valueAxis = new AmCharts.ValueAxis();
        if (ctype == "column") {
            chart.marginTop = 25;
            chart.marginBottom = 20;
            chart.marginLeft = 0;
            chart.marginRight = 0;
            categoryAxis.inside = false;
            categoryAxis.gridAlpha = 0.4;
            categoryAxis.gridColor = "#dddddd";
            chart.addLabel(3, 0, " Portfolio Positions Value", "center", 12, "#aaaaaa", 0, 0.6, false, "https://www.macroaxis.com");
            graph1.fillAlphas = 0.5;
            graph1.lineAlpha = 0.6;
            valueAxis.labelsEnabled = true;
            graph1.lineThickness = 1;
            graph1.fillColors = "#8b9dc3";
            graph1.lineColor = "#3b5998";
            graph1.negativeLineColor = "#f44336";
            graph1.negativeFillColors = "#f44336";
            // valueAxis.logarithmic = true;
            valueAxis.gridAlpha = 0.4;
            valueAxis.gridColor = "#dddddd";
            valueAxis.recalculateToPercents = true;
        } else {
            valueAxis.labelsEnabled = false;
            graph1.fillAlphas = 0.01;
            graph1.lineThickness = 0;
            categoryAxis.inside = true;
            valueAxis.inside = true;
            // graph1.fillColors = "#eeeeee";
            graph1.lineColor = this.color;
            graph1.lineAlpha = 1;
            chart.marginLeft = margin;
            chart.marginRight = margin - 2;
            chart.marginTop = 0;
            if (isPortfolio) {
                chart.addClassNames = true;
                graph1.lineThickness =3;
                valueAxis.recalculateToPercents = false;
                graph1.color = this.color;
                graph1.useLineColorForBulletBorder = false;
                graph1.bulletBorderAlpha = 0;
                graph1.bulletBorderSize = 0;
                graph1.bulletColor = this.bulletColor;
                graph1.fillColors = this.color;
                graph1.lineColor = this.color;
                graph1.fillAlphas = 0;
                graph1.bulletAlpha = 0;
                graph1.bulletSize = 0;
                graph1.bulletBorderThickness = 0;
                // decorateCategoryAxis(categoryAxis);
                graph1.labelText = "[[y2]]";
                graph1.labelAlpha = 0.5;
                graph1.colorField = "c1";
                graph1.classNameField = "bc1",
                    graph1.bulletSizeField = "s1";
                graph1.labelColorField = "lc1";
                graph1.labelRotation = 0;
                graph1.labelOffset = 5;
                categoryAxis.gridAlpha = 0.05;
                categoryAxis.gridColor = "#aaaaaa";
                valueAxis.gridColor = "#aaaaaa";
                valueAxis.gridAlpha = 0.05;
                chart.marginTop = 10;
                chart.marginBottom = 10;
                chart.responsive = {
                    "enabled": true
                };
            } else {
                valueAxis.recalculateToPercents = false;
                graph1.lineThickness = 1;
                graph1.bulletSize = 1;
                graph1.color = this.color;
                graph1.fillAlphas = 0.55;
                graph1.fillColors = this.color;
                graph1.lineColor = this.color;
                graph1.bulletAlpha = 1;
                graph1.bulletBorderThickness = 1;
                categoryAxis.gridAlpha = 0.02;
                categoryAxis.gridColor = "#aaaaaa";
                valueAxis.gridColor = "#aaaaaa";
                valueAxis.gridAlpha = 0.02;
                chart.marginBottom = 0;
            }
            
            graph1.bullet = "round";
            graph1.negativeLineColor = "#f44336";
            graph1.negativeFillColors = "#f44336";
            categoryAxis.autoGridCount = true;
            categoryAxis.equalSpacing = true;
        }
        // Value Axis
        valueAxis.labelFrequency = 2;
        valueAxis.offset = 3;
        valueAxis.titleBold = false;
        valueAxis.inside = true;
        valueAxis.autoGridCount = true;
        valueAxis.showFirstLabel = true
        valueAxis.showLastLabel = true
        if (ctype == "column") {
            valueAxis.position = "left";
            graph1.balloonText = "$[[value]] ";
        } else {
            valueAxis.position = "right";
            graph1.balloonText = "[[category]]: [[value]]";
        }
        graph1.valueAxis = valueAxis;
        chart.addValueAxis(valueAxis);
        chart.addGraph(graph1);
    }));
    // CATEGORY AXIS
    categoryAxis.labelFrequency = 3;
    categoryAxis.showFirstLabel = true
    categoryAxis.showLastLabel = true
    categoryAxis.color = "#cccccc";
    categoryAxis.alpha = 0;
    categoryAxis.fontSize = 0;
    categoryAxis.axisAlpha = 0;
    categoryAxis.labelsEnabled = true;
    // categoryAxis.colorAlpha=0.1;
    // //
    categoryAxis.parseDates = true;
    categoryAxis.minPeriod = "DD";
    // categoryAxis.axisColor = "#ffffff";
    // we want custom date formatting, so we change it in next line
    categoryAxis.dateFormats = [{
        period: 'DD',
        format: 'DD MMM'
    }, {
        period: 'WW',
        format: 'DD MMM'
    }, {
        period: 'MM',
        format: 'MMM'
    }, {
        period: 'YYYY',
        format: 'YYYY'
    }];
    
    if (isPortfolio) {
    	decorateBalloon(chart.balloon);
    } else {
    	decorateBalloon(chart.balloon);
    }
    // chart.balloon.drop=true;
    // CURSOR
    var chartCursor = new AmCharts.ChartCursor();
    decorateCursor(chartCursor);
    chartCursor.fullWidth = false;
    chartCursor.categoryBalloonsEnabled = false;
    chartCursor.categoryBalloonEnabled = false;
    chartCursor.categoryLineBalloonEnabled = false;
    chartCursor.cursorAlpha = "0.3";
    chart.addChartCursor(chartCursor);
    chartCursor.valueLineEnabled = false;
    chartCursor.valueLineBalloonEnabled = false;
    if (isPortfolio) {
        chart.export = {
            enabled: false
        };
    }
    chart.write(locDiv);
    // switchSelector($('#'+t));
    // alert(JSON.stringify(chartData.summary));
}

function createStackedChart(type) {
    // load the data
    var chartData = loadJSON('/finance/chart/main?type=' + type);
    // var chartData = AmCharts.loadJSON(
    // '/data2.html?type='+type+'&startDate=2013-10-01&endDate=2013-12-12' );
    // SERIAL CHART
    chart = new AmCharts.AmSerialChart();
    chart.pathToImages = "/lib/images/";
    chart.dataProvider = chartData.data;
    chart.categoryField = "x";
    chart.dataDateFormat = "YYYY-MM-DD";
    // GRAPHS
    $.each(chartData.graphs, (function() {
        var graph1 = new AmCharts.AmGraph();
        // var ctype = "line";
        var ctype = this.type;
        // alert(ctype);
        graph1.valueField = this.dataField;
        graph1.type = ctype;
        graph1.title = this.name;
        graph1.fillAlphas = 0.5;
        graph1.balloonText = "<span style='color:#555555;'>[[category]]</span><br><span style='font-size:14px'>[[title]]:<b>[[value]]</b></span>";
        chart.addGraph(graph1);
    }))
    // Value Axis
    var valueAxis = new AmCharts.ValueAxis();
    valueAxis.stackType = "regular";
    valueAxis.title = this.name;;
    valueAxis.titleBold = false;
    valueAxis.inside = true;
    valueAxis.logarithmic = false;
    valueAxis.gridAlpha = 0.1;
    valueAxis.gridColor = "#000";
    valueAxis.autoGridCount = false;
    valueAxis.gridCount = 2;
    valueAxis.showFirstLabel = true
    valueAxis.showLastLabel = true
    valueAxis.axisAlpha = 0;
    valueAxis.labelsEnabled = false;
    valueAxis.color = "#444444";
    chart.addValueAxis(valueAxis);
    // CATEGORY AXIS
    var categoryAxis = chart.categoryAxis;
    categoryAxis.gridAlpha = 0.1;
    categoryAxis.axisAlpha = 0;
    categoryAxis.gridPosition = "start";
    categoryAxis.parseDates = true; // as our data is date-based, we set
    // parseDates to true
    categoryAxis.minPeriod = "DD"; // our data is daily, so we set minPeriod to
    // DD
    categoryAxis.axisAlpha = 0;
    categoryAxis.labelFrequency = 3;
    categoryAxis.inside = false;
    categoryAxis.showFirstLabel = true
    categoryAxis.showLastLabel = true
    categoryAxis.gridCount = 3;
    categoryAxis.color = "#444444";
    categoryAxis.gridColor = "#fff";
    categoryAxis.autoGridCount = true;
    categoryAxis.labelsEnabled = false;
    categoryAxis.colorAlpha = 0;
    // we want custom date formatting, so we change it in next line
    categoryAxis.dateFormats = [{
        period: 'DD',
        format: 'DD MMM'
    }, {
        period: 'WW',
        format: 'DD MMM'
    }, {
        period: 'MM',
        format: 'MMM'
    }, {
        period: 'YYYY',
        format: 'YYYY'
    }];
    // LEGEND
    var legend = new AmCharts.AmLegend();
    legend.borderAlpha = 0;
    legend.horizontalGap = 10;
    legend.switchType = 'v';
    chart.addLegend(legend);
    // WRITE
    chart.write(locDiv);
}
loadJSON = function(url) {
    return getChartDataObject(url);
};

function getChartDataObject(url, divStr) {
    $.ajax(url).done((function(data) {
        // alert('a');
        var o = JSON.parse(data);
        // alert(data);
        createLineChartFromChartData(o, divStr);
        // return JSON.stringify(data);
    }));
    // alert("last");
}

function switchSelector(selElement) {
    var elements = document.getElementsByClassName("duration");
    for (var i = elements.length - 1; i >= 0; --i) {
        elements[i].setAttribute('class', 'duration');
    }
    selElement.addClass('text-error');
}

function getUrlVars() {
    var vars = {};
    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, (function(m, key, value) {
        vars[key] = value;
    }));
    return vars;
}

function getUrlParam(parameter, defaultvalue) {
    var urlparameter = defaultvalue;
    if (window.location.href.indexOf(parameter) > -1) {
        urlparameter = getUrlVars()[parameter];
    }
    // alert(urlparameter);
    return urlparameter;
}

function copyShareToClipboard() {
    var el = $("#shareUrl");
    el.select();
    document.execCommand('copy');
    popInfoMessageDialog("Done", "You can now paste it into your email body and send it privately to your client or share it with larger audience on social media");
}

function copyWidgetAttributionToClipboard() {
    var el = $("shareUrl");
    el.select();
    document.execCommand('copy');
    popInfoMessageDialog("Done", "You can now paste it into the footer of the page where the widget is embedded, below or above the widget, or on the 'About' page of your site.");
}

function editCustomFilter() {
    // alert("a");
    $.post('/editFilter.jsp', (function(data) {
        $('#filter_output').slideUp((function() {
            var html = data;
            // updatePortfolioTiles();
            // $('#pTiles').slideUp();
            $(this).html(html);
            // $('#pTiles').slideUp();
            $(this).slideDown();
            $('#themesDiv').dropdown({
                maxSelections: 4,
                message: {
                    maxSelections: 'Max {maxCount} ideas selected. Please remove some ideas to add more'
                }
            });
            $('#typesDiv').dropdown();
            // $('#pTiles').slideDown();
            // updatePortfolioTiles();
        }));
    }));
}
function displayValuationBarChart(chartDiv, data, marketValue) {
	//alert(chartDiv);
	// alert(data);
	 am4core.options.commercialLicense = true;
    am4core.useTheme(am4themes_animated);
    var chart = am4core.create(chartDiv, am4charts.XYChart);
    chart.data = data;

    chart.paddingTop = 0;
    chart.paddingBottom = 0;
    var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
    categoryAxis.dataFields.category = "label";
    categoryAxis.numberFormatter.numberFormat = "#";
    categoryAxis.renderer.inversed = false;
    categoryAxis.renderer.grid.template.location = 0;
    categoryAxis.renderer.cellStartLocation = 0;
    categoryAxis.renderer.cellEndLocation = 1;
    categoryAxis.renderer.labels.template.fill = am4core.color("#000");
    categoryAxis.renderer.labels.template.fontSize = 15;
    var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
    valueAxis.renderer.opposite = true;
    valueAxis.renderer.minLabelPosition = 0;
    valueAxis.renderer.maxLabelPosition = 1;
    valueAxis.renderer.grid.template.stroke  = am4core.color("#ddd");
    valueAxis.renderer.line.stroke  = am4core.color("#eee");

    
    var range = valueAxis.axisRanges.create();
    range.label.disabled = false;
    range.value = marketValue;
    range.grid.strokeOpacity = 1;
   // range.label.text = "Market Value";
    range.grid.stroke = am4core.color("#3b5998");
    //range.label.fill = am4core.color("#aaa");
    //range.label.stroke = am4core.color("#aaa");
    range.grid.strokeWidth = 5;
    //range.label.horizontalCenter = "left";
    range.label.dx =0;
    
    
    function createSeries() {
        var series = chart.series.push(new am4charts.ColumnSeries());
        series.dataFields.valueX = "value";
        series.dataFields.categoryY = "label";

        series.sequencedInterpolation = true;
        series.name = name;
        series.tooltipText = "{valueX.value}"
        series.columns.template.strokeOpacity = 0;
        series.columns.template.column.cornerRadiusBottomRight = 2;
        series.columns.template.column.cornerRadiusTopRight =2;

        var labelBullet = series.bullets.push(new am4charts.LabelBullet())
        labelBullet.label.horizontalCenter = "left";
        labelBullet.label.dx = 10;
        labelBullet.label.text = "{values.valueX.workingValue.formatNumber('#.0as')}";
        labelBullet.locationX = 1;

        // as by default columns of the same series are of the same color, we add adapter which takes colors from chart.colors color set
        series.columns.template.adapter.add("fill", function(fill, target) {
        	
         // alert(target.dataItem.description);
          var s = data[target.dataItem.index].label;
          if (s == "Market Value") {
        	  return "#3b5998";
          } else if (s == "Real Value") {
        	  return "green";
          }  else {
        	  return "#cccccc";
          }
          
        });

//        series.columns.template.adapter.add("stroke", function(stroke, target) {
//        	
//             //alert(target.dataItem.index);
//             var s = data[target.dataItem.index].label;
//             if (s == "Market Value") {
//           	  return "#eee";
//             } else {
//           	  return "#aaa";
//             }
//             
//           });
        //categoryAxis.sortBySeries = series;
        
        
        var disatnceState = series.columns.template.states.create("hover");
        disatnceState.properties.fillOpacity = 0.9;
        var valueLabel = series.bullets.push(new am4charts.LabelBullet());
        // valueLabel.label.text = "{valueX}";
        valueLabel.label.horizontalCenter = "left";
        valueLabel.label.dx = 10;
        valueLabel.label.hideOversized = true;
        valueLabel.label.truncate = true;
        var categoryLabel = series.bullets.push(new am4charts.LabelBullet());
        categoryLabel.label.text = "{valueX}";
        categoryLabel.label.fontSize = 18;
        categoryLabel.label.horizontalCenter = "right";
        categoryLabel.label.dx = -5;
        categoryLabel.label.fill = am4core.color("#fff");
        categoryLabel.label.hideOversized = true;
        categoryLabel.label.truncate = true;
        
        
        
        let label = categoryAxis.renderer.labels.template;
        label.wrap = true;
        label.maxWidth =70;
        categoryAxis.renderer.labels.template.horizontalCenter = "center";
        categoryAxis.renderer.labels.template.verticalCenter = "middle";
        
        
        
        // createChartV4ColumnSeries(chart, "value", names[0],"#FF0F00");
    }
    createSeries();
}
function createRealValueChart(chartDiv, market, real) {
    // Add data
    // Create chart instance
    am4core.options.commercialLicense = true;
    am4core.useTheme(am4themes_animated);
    var chart = am4core.create(chartDiv, am4charts.XYChart);
    chart.data = [{
        "label": "Market Value",
        "value": market,
        "color": "gray",
    }, {
        "label": "Real Value",
        "value": real,
        "color": "black",
    }];
    // alert(chart.data);
    chart.paddingLeft = 0;
    chart.paddingRight = 0;
    chart.paddingTop = 0;
    chart.paddingBottom = 0;
    chart.marginLeft = 0;
    chart.marginRight = 0;
    chart.marginTop = 0;
    chart.marginBottom = 0;
    // Create axes
    var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
    categoryAxis.dataFields.category = "label";
    categoryAxis.numberFormatter.numberFormat = "#";
    categoryAxis.renderer.inversed = true;
    categoryAxis.renderer.grid.template.location = 0;
    categoryAxis.renderer.cellStartLocation = 0;
    categoryAxis.renderer.cellEndLocation = 1;
    categoryAxis.renderer.grid.template.disabled = true;
    categoryAxis.renderer.minGridDistance = 30;
    categoryAxis.renderer.inside = true;
    categoryAxis.renderer.labels.template.fill = am4core.color("#fff");
    categoryAxis.renderer.labels.template.fontSize = 18;
    var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
    valueAxis.renderer.opposite = true;
    valueAxis.renderer.minLabelPosition = 0.2;
    valueAxis.renderer.maxLabelPosition = 0.8;
    var minX = Math.min(market, real);
    var maxX = Math.max(market, real);
    // alert(minX+" "+maxX);
    valueAxis.max = maxX * 1.01;
    valueAxis.min = minX * 0.9;
    // valueAxis.renderer.labels.template.dy = 5;
    valueAxis.renderer.labels.template.fillOpacity = 0.4;
    valueAxis.renderer.grid.template.opacity = 0.2;
    // valueAxis.logarithmic = true;
    valueAxis.renderer.line.strokeOpacity = 0.1;
    valueAxis.renderer.line.strokeWidth = 0.1;
    // valueAxis.logarithmic = true;
    // Create series
    function createSeries() {
        var series = chart.series.push(new am4charts.ColumnSeries());
        series.dataFields.valueX = "value";
        series.dataFields.categoryY = "label";
        // series.colors = colorSet;
        series.name = name;
        series.columns.template.tooltipText = "{categoryY}: [bold]{valueX}[/]";
        series.columns.template.height = am4core.percent(100);
        series.sequencedInterpolation = true;
        series.columns.template.strokeOpacity = 0;
        series.sequencedInterpolation = true;
        series.columns.template.column.cornerRadiusTopRight = 0;
        series.columns.template.column.cornerRadiusBottomRight = 0;
        series.columns.template.propertyFields.fill = "color";
        series.columns.template.propertyFields.stroke = "color";
        series.columns.template.fillOpacity = 1;
        series.columns.template.propertyFields.strokeDasharray = "dashLength";
        series.columns.template.propertyFields.fillOpacity = "alpha";
        series.columns.template.propertyFields.strokeOpacity = "dashAlpha";
        var disatnceState = series.columns.template.states.create("hover");
        disatnceState.properties.fillOpacity = 0.9;
        var valueLabel = series.bullets.push(new am4charts.LabelBullet());
        // valueLabel.label.text = "{valueX}";
        valueLabel.label.horizontalCenter = "left";
        valueLabel.label.dx = 10;
        valueLabel.label.hideOversized = true;
        valueLabel.label.truncate = true;
        var categoryLabel = series.bullets.push(new am4charts.LabelBullet());
        categoryLabel.label.text = "{valueX}";
        categoryLabel.label.fontSize = 18;
        categoryLabel.label.horizontalCenter = "right";
        categoryLabel.label.dx = -10;
        categoryLabel.label.fill = am4core.color("#fff");
        categoryLabel.label.hideOversized = true;
        //categoryLabel.label.truncate = true;
        // createChartV4ColumnSeries(chart, "value", names[0],"#FF0F00");
    }
    createSeries();
}

function popHelpVideo(videoId) {
    if (videoId) {
        $(".helpVideo").videopopup({
            'videoid': videoId,
            'videoplayer': 'youtube',
            'autoplay': 'true',
            'width': '722',
            'height': '400'
        });
    }
}

function setUpDiversificationPairCircles(firstLabel, secondLabel,valueDiv ) {
	//FF6600", "#33cc33"
	  am4core.options.commercialLicense = true;
		 am4core.useTheme(am4themes_animated);
		 var pattern = new am4core.CirclePattern();
		 pattern.radius = 10;
		 pattern.height = 50;
		 pattern.width = 50;
		 pattern.fill = am4core.color("#FF6600");
		 pattern.backgroundFill = am4core.color("#3b5998");
		 pattern.backgroundOpacity = 1;

		 //var data = [{name:firstLabel, value:100, color:am4core.color("#FFFFFF")}, {secondLabel, value:100, color:am4core.color("#000000")}, {name:"Diversified Away", value:valueDiv, sets:[firstLabel, secondLabel], color:pattern}];

		 var data = [{name:firstLabel, value:100, color:am4core.color("#FF6600")}, {name:secondLabel, value:100, color:am4core.color("#3b5998")}, {name:"Diversified Away", value:valueDiv, sets:[firstLabel, secondLabel], color:pattern}];

		 var chart = am4core.create("diversificationPiesDiv", am4plugins_venn.VennDiagram);
		 var series = chart.series.push(new am4plugins_venn.VennSeries())

		 series.dataFields.category = "name";
		 series.dataFields.value = "value";
		 series.dataFields.intersections = "sets";
		 series.data = data;
		 series.slices.template.propertyFields.fill = "color";
		 series.slices.template.stroke = am4core.color("#FF6600");
		 series.slices.template.strokeWidth = 2;
		 series.slices.template.tooltipText = "";

		 series.labels.template.padding(10,14,10,14);
		 series.labels.template.fill = am4core.color("#3b5998");

		 var labelBackground = new am4core.RoundedRectangle();
		 labelBackground.fillOpacity = 1;
		 labelBackground.cornerRadius(8,8,8,8);
		 series.labels.template.background = labelBackground;

		 labelBackground.fill = am4core.color("#FF6600");

		 series.hoverSprite.stroke = am4core.color("#3b5998");
		 series.hoverSprite.strokeDasharray = "10,10";
		 series.hoverSprite.strokeWidth = 4;

		 chart.legend = new am4charts.Legend();
		 chart.legend.marginTop =20;
}

function showEarningsChart() {

	var chart = AmCharts.makeChart("sparkColumnBase", {
		    "type": "serial",
		    "marginTop":0,
		    "marginRight":0,
		    "marginLeft":0,
		    "marginBottom":0,
		    "dataProvider": makeEarningsChartData(),
		   
		    "startDuration": 1,
		    "graphs": [{
		        "balloonText": "[[category]]: Actual <b>[[value]]</b>",
		        "fillAlphas": .5,
		        "lineAlpha": .5,
		        "lineColor": "orange",
		        "title":"Actual EPS",
		        "lineThickness":0,
		        "title": "Actual",
		        "type": "column",
		        "columnWidth":0.3,
		        "valueField": "actual"
		    }, {
		        "balloonText": "[[category]]: Estimated <b>[[value]]</b>",
		        "fillAlphas": 0.4,
		        "lineAlpha": 0.5,
		        "title": "Estimated",
		        "type": "column",
		        "lineThickness": 0,
		        "lineColor": "#3b5998",
		        "clustered":false,
		        "columnWidth":1,
		        "valueField": "estimate"
		    }],
		    "dataDateFormat": "YYYY",
		    "categoryField": "day",
		    "categoryAxis": {
		    	 "parseDates": true,			      
		         "axisColor":"#aaaaaa",
		         "equalSpacing":true,
				 "gridColor":"#3b5998",
				 "gridAlpha":0,
				 "axisAlpha":0,
				 "fillColor":"#3b5998",
				 "fillAlpha":0,
				 "color":"#3b5998"
		        
		    },"export": {
		    	"enabled": false,
		     },"chartCursor": {
		     	"zoomable":false,
		         "fullWidth":true,
		         "cursorAlpha":0.3,
		         "cursorColor":"#aaaaaa",
		         "categoryBalloonEnabled":true
		     },"legend": {
		        "useGraphSettings": true,
		        "markerSize":19,
		        "valueWidth":40,
		        "verticalGap":10
		    }
	});
	var chartCursor = new AmCharts.ChartCursor();
	decorateCursor(chartCursor);	
	chart.addChartCursor(chartCursor);
	decorateBalloon(chart.balloon);
	var valueAxis = new AmCharts.ValueAxis();
	decorateValueAxis(valueAxis);
	valueAxis.inside=true;
	chart.addValueAxis(valueAxis);
}

function getChartV4(chartid) {
	am4core.registry.baseSprites.find(function(chartObj) {
	  return chartObj.htmlContainer.id ===chartid;
	});
}

function shareChartImage(url, title, symbol) {

	var sendIt = "/invest/chartImagePreview?url="+url+"&title="+title+"&s="+symbol;
	openSeparatePage(sendIt);
	  
}

//
//
//
//function shareChartImage(url, title) {
//	
//	var sendIt = "/chartImagePreview.jsp?url="+url+"&title="+title;
//	
//	 $.get({
//	        async: true,
//	        url: sendIt
//	    }).done((function(data) {
//	    	
//	        Swal.fire({
//	            title: "Share",
//	            html: data,
//	            showCancelButton: false,
//	            confirmButtonText: "OK",
//	            allowEscapeKey: false,
//	            allowOutsideClick: false,
//	            confirmButtonColor: "green"
//	        }).then((function(result) {
//	            
//	        }));
//	    }));
//}


async function postChartImage(chartCh,titleStr, symbol) {
	
	if (!chartCh.legend) {
		var title = chartCh.titles.create();
		title.text = titleStr;
		title.marginBottom = 11;
		title.bold = true;
		title.disabled = false;
		title.parent.invalidate();
		title.fontSize = 20;
		title.marginLeft  = 30;
		title.marginTop  = 15;
		title.marginBottom  = 15;
		//chartCh.background.fill = '#fff';
		//chartCh.background.opacity = 1;
		chartCh.exporting.useWebFonts = true;
		chartCh.exporting.validateSprites.push(title);
		chartCh.exporting.validateSprites.push(title.parent);	
		
	} else {
		chartCh.exporting.useWebFonts = true;
		chartCh.background.fill = '#fff';
		chartCh.background.opacity = 1;
		//chartCh.exporting.validateSprites.push(title);
		//chartCh.exporting.validateSprites.push(title.parent);	
//		var title = chartCh.titles.create();
//		title.text = titleStr;
//		title.marginBottom = 11;
//		title.bold = true;
//		title.disabled = false;
//		title.parent.invalidate();
//		title.fontSize = 20;
//		title.marginLeft  = 30;
//		title.marginTop  = 15;
//		title.marginBottom  = 15;
//		//chartCh.background.fill = '#fff';
//		//chartCh.background.opacity = 1;
//		chartCh.exporting.useWebFonts = true;
//		chartCh.exporting.validateSprites.push(title);
//		chartCh.exporting.validateSprites.push(title.parent);	
	}
	
	let imgData = await chartCh.exporting.getImage("png");
	if (title) {
		title.disabled = true;
	}
	//chartCh.background.visible = true;
	var postData = "/chart-image/upload?s="+symbol;////" + imgData;
	//alert(postData);
	
	
	$.ajax({ 
        url: postData, 
        type: 'post', 
        data: imgData, 
        contentType: false, 
        processData: false, 
       
    }).done((function(data) {
    	// alert(data);
    	var contextUrl = "<a href='https://www.macroaxis.com'><img src='https://www.macroaxis.com<%=host+imgUrl%>' alt='Macroaxis Chart' /></a><p style='font-size: 11px;'>Data by <a title='Macroaxis' href='https://www.macroaxis.com'>Macroaxis</a></p>";
    	var dataText ="<input type=\"text\" style=\"font-size: 0.8em;border: 1px solid #aaa\" size=\"40\" " +
    			"id =\"downloadImageUrl\" value=\""+contextUrl+"\"> <span data-tooltip=\"Copy To Clipboard\" data-variation=\"mini\" data-inverted=\"\">" +
    					"<i class=\"fa fa-clipboard fa-lg\" style=\"cursor:pointer;\" onClick=\"copyInput('downloadImageUrl');\"></i></span>";
    	Swal.fire({
            title: "Use Image Url",
            html: dataText,
            footer: "Your image was generated, and you can share it publically with proper attributions",
            type: "success",
            allowEscapeKey: true,
            allowOutsideClick: true,
            cancelButtonText: "More Options",
            showCancelButton: true,
            confirmButtonText: "Download",
            confirmButtonColor: "green"
        }).then((result) => {
        	if (result.value) {
        		window.open(data, '_blank').focus();
        	} else {
        		//var sendIt = "/chartImagePreview.jsp?url="+data+"&title="+titleStr;
        		//window.open(sendIt, '_blank').focus();
        		shareChartImage(data, titleStr, symbol);
        	}
        })
        return;
    })); 
	
}
async function exportAMChart(chartid,titleStr, symbol) {
	//chartid = chartid+"_genericBars";
	//alert(chartid);
	var chartCh = am4core.registry.baseSprites.find(function(chartObj) {
	  return chartObj.htmlContainer.id ===chartid;
	});
	
//	if (titleStr) {
//		var title = chartCh.titles.get(0);
//		title.text = titleStr;
//		title.marginBottom = 11;
//		title.disabled = true;
//		
//		chartCh.exporting.events.on("exportstarted", function(ev) {
//			  title.disabled = false;
//			  title.parent.invalidate();
//		});
//		
//		chartCh.exporting.events.on("exportfinished", function(ev) {
//		  title.disabled = true;
//		});
//	}
	

	//alert(chartCh);
	if (chartCh) {
		//alert(chartCh);
		//alert("a");
		//alert(chartCh.exporting);
		
		 var text =
		        "<div class=\"justifiedText m-t-25 m-b-15\">" +
		        "To maintain a record-low cost of our services, we ask that you provide attribution via a link back to our site. " +
		        		"Here is the example that you can copy and paste to your site:</div>" +
		        		"<input id=\"maWeb\" type=\"text\" style=\"font-size: 0.8em;border: 1px solid #aaa\" size=\"40\" value=\"<a title='Macroaxis' href='https://www.macroaxis.com'>Macroaxis</a>\"> " +
		        		"<span data-tooltip=\"Copy To Clipboard\" data-variation=\"mini\" data-inverted=\"\">" +
		        		"<i class=\"fal fa-clipboard fa-lg\" style=\"cursor:pointer;\" onClick=\"copyInput('maWeb');\"></i></span>";
		 
		 
		 swal.queue([{
		        title: 'Get Chart Image',
		        confirmButtonText: 'Sure, I will Do it!',
		        html: text,
		        confirmButtonColor: "green",
		        showCancelButton: false,
		        showConfirmButton: true,
		        allowEscapeKey: true,
		        allowOutsideClick: true,
		        focusConfirm: true,
		        cancelButtonColor: "#aaa",
		        type: "question",
		        //footer: "This will genereate an image your can share",
		        showLoaderOnConfirm: true,
		        preConfirm: function() {
		            return new Promise(function(resolve) {
		            	
		            	postChartImage(chartCh,titleStr,symbol);
		            })
		        }
		    }]).catch(swal.noop);
		
		
		
		//chartCh.exporting.getImage("png").then(function(imgData) {
		  //console.log(imgData); // contains exported image data
		 // alert(imgData);
		  
		//});
	}
	
}

function exportCryptoData(url) {
	
	popExportCryptoPairNotificationMessage();
	openPage(url);
	
}

function exportStockHistory(name, symbol) {
	
	popNotificationMessage("Exporting "+name+" Data","Please wait for a few seconds while we export your data",5000);
	openPage("/act.ma?action=exportStock&s="+symbol);
}


function exportPortfolioData(pid) {
	
	popExportPortfolioNotificationMessage();
	openPage("/act.ma?action=export&xd="+pid);
}

function popExportCryptoPairNotificationMessage() {
	popNotificationMessage("Exporting","Please wait for a few seconds while we export your data",5000);
	
}

function popExportPortfolioNotificationMessage() {
	popNotificationMessage("Exporting","Please wait for a few seconds while we export your portfolio",2000);
}
function popNotificationMessage(title, message, timer) {
	
	Swal.fire({
		  text: "",
		  icon: 'success',
		  title: title,
		  footer:message,
		  showConfirmButton: true,
		  timer: timer
		})
	Swal.showLoading()
}